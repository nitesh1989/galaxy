{"version":3,"sources":["libs/jquery/jquery.autocomplete.js"],"names":["$","fn","autocomplete_verheul","options","url","arguments","length","defaults","this","each","Autocompleter","$this","opts","extend","inputClass","loadingClass","resultsClass","selectClass","queryParamName","extraParams","remoteDataType","lineSeparator","cellSeparator","minChars","maxItemsToShow","delay","useCache","maxCacheLength","matchSubset","matchCase","matchInside","mustMatch","selectFirst","selectOnly","showResult","preventDefaultReturn","preventDefaultTab","autoFill","filterResults","filter","sortResults","sortFunction","onItemSelect","onNoMatch","onFinish","matchStringConverter","beforeUseConverter","autoWidth","useDelimiter","delimiterChar","delimiterKeyCode","processData","sanitizeResult","result","value","data","type","isArray","slice","_typeof","sanitizeInteger","stdValue","num","parseInt","min","makeUrlParam","name","encodeURIComponent","join","makeUrl","params","urlAppend","index","push","indexOf","sortValueAlpha","a","b","String","plainTextParser","text","results","lines","replace","split","i","line","decodeURIComponent","j","shift","$elem","get","tagName","toUpperCase","Error","self","cacheData_","cacheLength_","selectClass_","keyTimeout_","finishTimeout_","lastKeyPressed_","lastProcessedValue_","lastSelectedValue_","active_","finishOnBlur_","dom","attr","addClass","$results","hide","css","position","keydown","e","keyCode","preventDefault","focusPrev","activate","focusNext","selectCurrent","on","onBlurFunction","deactivate","blur","setTimeout","parents","prototype","offset","height","outerHeight","totalHeight","window","inputBottom","top","bottomIfDown","left","cacheRead","filterLength","search","maxPos","pos","searchLength","undefined","cacheWrite","cacheFlush","callHook","hook","f","isFunction","enabled","clearTimeout","activateNow","val","fetchData","processResults","showResults","remoteData","fetchRemoteData","callback","dataType","ajaxCallback","parsed","parseRemoteData","removeClass","ajax","error","jqXHR","textStatus","errorThrown","onError","success","setExtraParam","trim","param","parseJSON","defaultFilter","pattern","testValue","toLowerCase","patternIndex","filterResult","filtered","s","converter","getValue","enableFinishOnBlur","disableFinishOnBlur","$li","html","click","selectItem","getItems","numResults","$ul","createItemFromResult","append","first","$first","firstItemClass","lastItemClass","outerWidth","width","focusItem","lcValue","lcFilter","valueLength","substr","getDelimiterOffsets","pad","end","start","focusMove","selectRange","modifier","$items","hasClass","item","$item","displayValue","processedDisplayValue","d","delimiter","substring","elem","extraCaretPos","setValue","setCaret","focus","hideResults","finish","input","createTextRange","range","collapse","moveEnd","moveStart","getCaret","stored_range","selection","document","createRange","duplicate","lastIndexOf","setEndPoint","selectionEnd","postVal","preVal","preCaretVal","postCaretVal","jQuery"],"mappings":"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","file":"../../../scripts/libs/jquery/jquery.autocomplete.js","sourcesContent":["/**\n * @fileOverview jquery-autocomplete, the jQuery Autocompleter\n * @author <a href=\"mailto:dylan@dyve.net\">Dylan Verheul</a>\n * @version 2.4.4\n * @requires jQuery 1.6+\n * @license MIT | GPL | Apache 2.0, see LICENSE.txt\n * @see https://github.com/dyve/jquery-autocomplete\n */\n(function($) {\n    \"use strict\";\n\n    /**\n     * jQuery autocomplete plugin\n     * @param {object|string} options\n     * @returns (object} jQuery object\n     */\n    $.fn.autocomplete_verheul = function(options) {\n        var url;\n        if (arguments.length > 1) {\n            url = options;\n            options = arguments[1];\n            options.url = url;\n        } else if (typeof options === 'string') {\n            url = options;\n            options = { url: url };\n        }\n        var opts = $.extend({}, $.fn.autocomplete_verheul.defaults, options);\n        return this.each(function() {\n            var $this = $(this);\n            $this.data('autocompleter', new $.Autocompleter(\n                $this,\n                $.meta ? $.extend({}, opts, $this.data()) : opts\n            ));\n        });\n    };\n\n    /**\n     * Store default options\n     * @type {object}\n     */\n    $.fn.autocomplete_verheul.defaults = {\n        inputClass: 'acInput',\n        loadingClass: 'acLoading',\n        resultsClass: 'acResults',\n        selectClass: 'acSelect',\n        queryParamName: 'q',\n        extraParams: {},\n        remoteDataType: false,\n        lineSeparator: '\\n',\n        cellSeparator: '|',\n        minChars: 2,\n        maxItemsToShow: 10,\n        delay: 400,\n        useCache: true,\n        maxCacheLength: 10,\n        matchSubset: true,\n        matchCase: false,\n        matchInside: true,\n        mustMatch: false,\n        selectFirst: false,\n        selectOnly: false,\n        showResult: null,\n        preventDefaultReturn: 1,\n        preventDefaultTab: 0,\n        autoFill: false,\n        filterResults: true,\n        filter: true,\n        sortResults: true,\n        sortFunction: null,\n        onItemSelect: null,\n        onNoMatch: null,\n        onFinish: null,\n        matchStringConverter: null,\n        beforeUseConverter: null,\n        autoWidth: 'min-width',\n        useDelimiter: false,\n        delimiterChar: ',',\n        delimiterKeyCode: 188,\n        processData: null,\n        onError: null,\n        enabled: true\n    };\n\n    /**\n     * Sanitize result\n     * @param {Object} result\n     * @returns {Object} object with members value (String) and data (Object)\n     * @private\n     */\n    var sanitizeResult = function(result) {\n        var value, data;\n        var type = typeof result;\n        if (type === 'string') {\n            value = result;\n            data = {};\n        } else if ($.isArray(result)) {\n            value = result[0];\n            data = result.slice(1);\n        } else if (type === 'object') {\n            value = result.value;\n            data = result.data;\n        }\n        value = String(value);\n        if (typeof data !== 'object') {\n            data = {};\n        }\n        return {\n            value: value,\n            data: data\n        };\n    };\n\n    /**\n     * Sanitize integer\n     * @param {mixed} value\n     * @param {Object} options\n     * @returns {Number} integer\n     * @private\n     */\n    var sanitizeInteger = function(value, stdValue, options) {\n        var num = parseInt(value, 10);\n        options = options || {};\n        if (isNaN(num) || (options.min && num < options.min)) {\n            num = stdValue;\n        }\n        return num;\n    };\n\n    /**\n     * Create partial url for a name/value pair\n     */\n    var makeUrlParam = function(name, value) {\n        return [name, encodeURIComponent(value)].join('=');\n    };\n\n    /**\n     * Build an url\n     * @param {string} url Base url\n     * @param {object} [params] Dictionary of parameters\n     */\n    var makeUrl = function(url, params) {\n        var urlAppend = [];\n        $.each(params, function(index, value) {\n            urlAppend.push(makeUrlParam(index, value));\n        });\n        if (urlAppend.length) {\n            url += url.indexOf('?') === -1 ? '?' : '&';\n            url += urlAppend.join('&');\n        }\n        return url;\n    };\n\n    /**\n     * Default sort filter\n     * @param {object} a\n     * @param {object} b\n     * @param {boolean} matchCase\n     * @returns {number}\n     */\n    var sortValueAlpha = function(a, b, matchCase) {\n        a = String(a.value);\n        b = String(b.value);\n        if (!matchCase) {\n            a = a.toLowerCase();\n            b = b.toLowerCase();\n        }\n        if (a > b) {\n            return 1;\n        }\n        if (a < b) {\n            return -1;\n        }\n        return 0;\n    };\n\n    /**\n     * Parse data received in text format\n     * @param {string} text Plain text input\n     * @param {string} lineSeparator String that separates lines\n     * @param {string} cellSeparator String that separates cells\n     * @returns {array} Array of autocomplete data objects\n     */\n    var plainTextParser = function(text, lineSeparator, cellSeparator) {\n        var results = [];\n        var i, j, data, line, value, lines;\n        // Be nice, fix linebreaks before splitting on lineSeparator\n        lines = String(text).replace('\\r\\n', '\\n').split(lineSeparator);\n        for (i = 0; i < lines.length; i++) {\n            line = lines[i].split(cellSeparator);\n            data = [];\n            for (j = 0; j < line.length; j++) {\n                data.push(decodeURIComponent(line[j]));\n            }\n            value = data.shift();\n            results.push({ value: value, data: data });\n        }\n        return results;\n    };\n\n    /**\n     * Autocompleter class\n     * @param {object} $elem jQuery object with one input tag\n     * @param {object} options Settings\n     * @constructor\n     */\n    $.Autocompleter = function($elem, options) {\n\n        /**\n         * Assert parameters\n         */\n        if (!$elem || !($elem instanceof $) || $elem.length !== 1 || ($elem.get(0).tagName.toUpperCase() !== 'INPUT' && $elem.get(0).tagName.toUpperCase() !== 'TEXTAREA')) {\n            throw new Error('Invalid parameter for jquery.Autocompleter, jQuery object with one element with INPUT or TEXTAREA tag expected.');\n        }\n\n        /**\n         * @constant Link to this instance\n         * @type object\n         * @private\n         */\n        var self = this;\n\n        /**\n         * @property {object} Options for this instance\n         * @public\n         */\n        this.options = options;\n\n        /**\n         * @property object Cached data for this instance\n         * @private\n         */\n        this.cacheData_ = {};\n\n        /**\n         * @property {number} Number of cached data items\n         * @private\n         */\n        this.cacheLength_ = 0;\n\n        /**\n         * @property {string} Class name to mark selected item\n         * @private\n         */\n        this.selectClass_ = 'jquery-autocomplete-selected-item';\n\n        /**\n         * @property {number} Handler to activation timeout\n         * @private\n         */\n        this.keyTimeout_ = null;\n\n        /**\n         * @property {number} Handler to finish timeout\n         * @private\n         */\n        this.finishTimeout_ = null;\n\n        /**\n         * @property {number} Last key pressed in the input field (store for behavior)\n         * @private\n         */\n        this.lastKeyPressed_ = null;\n\n        /**\n         * @property {string} Last value processed by the autocompleter\n         * @private\n         */\n        this.lastProcessedValue_ = null;\n\n        /**\n         * @property {string} Last value selected by the user\n         * @private\n         */\n        this.lastSelectedValue_ = null;\n\n        /**\n         * @property {boolean} Is this autocompleter active (showing results)?\n         * @see showResults\n         * @private\n         */\n        this.active_ = false;\n\n        /**\n         * @property {boolean} Is this autocompleter allowed to finish on blur?\n         * @private\n         */\n        this.finishOnBlur_ = true;\n\n        /**\n         * Sanitize options\n         */\n        this.options.minChars = sanitizeInteger(this.options.minChars, $.fn.autocomplete_verheul.defaults.minChars, { min: 0 });\n        this.options.maxItemsToShow = sanitizeInteger(this.options.maxItemsToShow, $.fn.autocomplete_verheul.defaults.maxItemsToShow, { min: 0 });\n        this.options.maxCacheLength = sanitizeInteger(this.options.maxCacheLength, $.fn.autocomplete_verheul.defaults.maxCacheLength, { min: 1 });\n        this.options.delay = sanitizeInteger(this.options.delay, $.fn.autocomplete_verheul.defaults.delay, { min: 0 });\n        if (this.options.preventDefaultReturn != 2) {\n            this.options.preventDefaultReturn = this.options.preventDefaultReturn ? 1 : 0;\n        }\n        if (this.options.preventDefaultTab != 2) {\n            this.options.preventDefaultTab = this.options.preventDefaultTab ? 1 : 0;\n        }\n\n        /**\n         * Init DOM elements repository\n         */\n        this.dom = {};\n\n        /**\n         * Store the input element we're attached to in the repository\n         */\n        this.dom.$elem = $elem;\n\n        /**\n         * Switch off the native autocomplete and add the input class\n         */\n        this.dom.$elem.attr('autocomplete', 'off').addClass(this.options.inputClass);\n\n        /**\n         * Create DOM element to hold results, and force absolute position\n         */\n        this.dom.$results = $('<div></div>').hide().addClass(this.options.resultsClass).css({\n            position: 'absolute'\n        });\n        $('body').append(this.dom.$results);\n\n        /**\n         * Attach keyboard monitoring to $elem\n         */\n        $elem.keydown(function(e) {\n            self.lastKeyPressed_ = e.keyCode;\n            switch(self.lastKeyPressed_) {\n\n                case self.options.delimiterKeyCode: // comma = 188\n                    if (self.options.useDelimiter && self.active_) {\n                        self.selectCurrent();\n                    }\n                    break;\n\n                // ignore navigational & special keys\n                case 35: // end\n                case 36: // home\n                case 16: // shift\n                case 17: // ctrl\n                case 18: // alt\n                case 37: // left\n                case 39: // right\n                    break;\n\n                case 38: // up\n                    e.preventDefault();\n                    if (self.active_) {\n                        self.focusPrev();\n                    } else {\n                        self.activate();\n                    }\n                    return false;\n\n                case 40: // down\n                    e.preventDefault();\n                    if (self.active_) {\n                        self.focusNext();\n                    } else {\n                        self.activate();\n                    }\n                    return false;\n\n                case 9: // tab\n                    if (self.active_) {\n                        self.selectCurrent();\n                        if (self.options.preventDefaultTab) {\n                            e.preventDefault();\n                            return false;\n                        }\n                    }\n                    if (self.options.preventDefaultTab === 2) {\n                        e.preventDefault();\n                        return false;\n                    }\n                break;\n\n                case 13: // return\n                    if (self.active_) {\n                        self.selectCurrent();\n                        if (self.options.preventDefaultReturn) {\n                            e.preventDefault();\n                            return false;\n                        }\n                    }\n                    if (self.options.preventDefaultReturn === 2) {\n                        e.preventDefault();\n                        return false;\n                    }\n                break;\n\n                case 27: // escape\n                    if (self.active_) {\n                        e.preventDefault();\n                        self.deactivate(true);\n                        return false;\n                    }\n                break;\n\n                default:\n                    self.activate();\n\n            }\n        });\n\n        /**\n         * Attach paste event listener because paste may occur much later then keydown or even without a keydown at all\n         */\n        $elem.on('paste', function() {\n            self.activate();\n        });\n\n        /**\n         * Finish on blur event\n         * Use a timeout because instant blur gives race conditions\n         */\n        var onBlurFunction = function() {\n            self.deactivate(true);\n        }\n        $elem.blur(function() {\n            if (self.finishOnBlur_) {\n                self.finishTimeout_ = setTimeout(onBlurFunction, 200);\n            }\n        });\n        /**\n         * Catch a race condition on form submit\n         */\n        $elem.parents('form').on('submit', onBlurFunction);\n\n    };\n\n    /**\n     * Position output DOM elements\n     * @private\n     */\n    $.Autocompleter.prototype.position = function() {\n        var offset = this.dom.$elem.offset();\n        var height = this.dom.$results.outerHeight();\n        var totalHeight = $(window).outerHeight();\n        var inputBottom = offset.top + this.dom.$elem.outerHeight();\n        var bottomIfDown = inputBottom + height;\n        // Set autocomplete results at the bottom of input\n        var position = {top: inputBottom, left: offset.left};\n        if (bottomIfDown > totalHeight) {\n            // Try to set autocomplete results at the top of input\n            var topIfUp = offset.top - height;\n            if (topIfUp >= 0) {\n                position.top = topIfUp;\n            }\n        }\n        this.dom.$results.css(position);\n    };\n\n    /**\n     * Read from cache\n     * @private\n     */\n    $.Autocompleter.prototype.cacheRead = function(filter) {\n        var filterLength, searchLength, search, maxPos, pos;\n        if (this.options.useCache) {\n            filter = String(filter);\n            filterLength = filter.length;\n            if (this.options.matchSubset) {\n                searchLength = 1;\n            } else {\n                searchLength = filterLength;\n            }\n            while (searchLength <= filterLength) {\n                if (this.options.matchInside) {\n                    maxPos = filterLength - searchLength;\n                } else {\n                    maxPos = 0;\n                }\n                pos = 0;\n                while (pos <= maxPos) {\n                    search = filter.substr(0, searchLength);\n                    if (this.cacheData_[search] !== undefined) {\n                        return this.cacheData_[search];\n                    }\n                    pos++;\n                }\n                searchLength++;\n            }\n        }\n        return false;\n    };\n\n    /**\n     * Write to cache\n     * @private\n     */\n    $.Autocompleter.prototype.cacheWrite = function(filter, data) {\n        if (this.options.useCache) {\n            if (this.cacheLength_ >= this.options.maxCacheLength) {\n                this.cacheFlush();\n            }\n            filter = String(filter);\n            if (this.cacheData_[filter] !== undefined) {\n                this.cacheLength_++;\n            }\n            this.cacheData_[filter] = data;\n            return this.cacheData_[filter];\n        }\n        return false;\n    };\n\n    /**\n     * Flush cache\n     * @public\n     */\n    $.Autocompleter.prototype.cacheFlush = function() {\n        this.cacheData_ = {};\n        this.cacheLength_ = 0;\n    };\n\n    /**\n     * Call hook\n     * Note that all called hooks are passed the autocompleter object\n     * @param {string} hook\n     * @param data\n     * @returns Result of called hook, false if hook is undefined\n     */\n    $.Autocompleter.prototype.callHook = function(hook, data) {\n        var f = this.options[hook];\n        if (f && $.isFunction(f)) {\n            return f(data, this);\n        }\n        return false;\n    };\n\n    /**\n     * Set timeout to activate autocompleter\n     */\n    $.Autocompleter.prototype.activate = function() {\n        if (!this.options.enabled) return;\n        var self = this;\n        if (this.keyTimeout_) {\n            clearTimeout(this.keyTimeout_);\n        }\n        this.keyTimeout_ = setTimeout(function() {\n            self.activateNow();\n        }, this.options.delay);\n    };\n\n    /**\n     * Activate autocompleter immediately\n     */\n    $.Autocompleter.prototype.activateNow = function() {\n        var value = this.beforeUseConverter(this.dom.$elem.val());\n        if (value !== this.lastProcessedValue_ && value !== this.lastSelectedValue_) {\n            this.fetchData(value);\n        }\n    };\n\n    /**\n     * Get autocomplete data for a given value\n     * @param {string} value Value to base autocompletion on\n     * @private\n     */\n    $.Autocompleter.prototype.fetchData = function(value) {\n        var self = this;\n        var processResults = function(results, filter) {\n            if (self.options.processData) {\n                results = self.options.processData(results);\n            }\n            self.showResults(self.filterResults(results, filter), filter);\n        };\n        this.lastProcessedValue_ = value;\n        if (value.length < this.options.minChars) {\n            processResults([], value);\n        } else if (this.options.data) {\n            processResults(this.options.data, value);\n        } else {\n            this.fetchRemoteData(value, function(remoteData) {\n                processResults(remoteData, value);\n            });\n        }\n    };\n\n    /**\n     * Get remote autocomplete data for a given value\n     * @param {string} filter The filter to base remote data on\n     * @param {function} callback The function to call after data retrieval\n     * @private\n     */\n    $.Autocompleter.prototype.fetchRemoteData = function(filter, callback) {\n        var data = this.cacheRead(filter);\n        if (data) {\n            callback(data);\n        } else {\n            var self = this;\n            var dataType = self.options.remoteDataType === 'json' ? 'json' : 'text';\n            var ajaxCallback = function(data) {\n                var parsed = false;\n                if (data !== false) {\n                    parsed = self.parseRemoteData(data);\n                    self.cacheWrite(filter, parsed);\n                }\n                self.dom.$elem.removeClass(self.options.loadingClass);\n                callback(parsed);\n            };\n            this.dom.$elem.addClass(this.options.loadingClass);\n            $.ajax({\n                url: this.makeUrl(filter),\n                success: ajaxCallback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    if($.isFunction(self.options.onError)) {\n                        self.options.onError(jqXHR, textStatus, errorThrown);\n                    } else {\n                      ajaxCallback(false);\n                    }\n                },\n                dataType: dataType\n            });\n        }\n    };\n\n    /**\n     * Create or update an extra parameter for the remote request\n     * @param {string} name Parameter name\n     * @param {string} value Parameter value\n     * @public\n     */\n    $.Autocompleter.prototype.setExtraParam = function(name, value) {\n        var index = $.trim(String(name));\n        if (index) {\n            if (!this.options.extraParams) {\n                this.options.extraParams = {};\n            }\n            if (this.options.extraParams[index] !== value) {\n                this.options.extraParams[index] = value;\n                this.cacheFlush();\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Build the url for a remote request\n     * If options.queryParamName === false, append query to url instead of using a GET parameter\n     * @param {string} param The value parameter to pass to the backend\n     * @returns {string} The finished url with parameters\n     */\n    $.Autocompleter.prototype.makeUrl = function(param) {\n        var self = this;\n        var url = this.options.url;\n        var params = $.extend({}, this.options.extraParams);\n\n        if (this.options.queryParamName === false) {\n            url += encodeURIComponent(param);\n        } else {\n            params[this.options.queryParamName] = param;\n        }\n\n        return makeUrl(url, params);\n    };\n\n    /**\n     * Parse data received from server\n     * @param remoteData Data received from remote server\n     * @returns {array} Parsed data\n     */\n    $.Autocompleter.prototype.parseRemoteData = function(remoteData) {\n        var remoteDataType;\n        var data = remoteData;\n        if (this.options.remoteDataType === 'json') {\n            remoteDataType = typeof(remoteData);\n            switch (remoteDataType) {\n                case 'object':\n                    data = remoteData;\n                    break;\n                case 'string':\n                    data = $.parseJSON(remoteData);\n                    break;\n                default:\n                    throw new Error(\"Unexpected remote data type: \" + remoteDataType);\n            }\n            return data;\n        }\n        return plainTextParser(data, this.options.lineSeparator, this.options.cellSeparator);\n    };\n\n    /**\n     * Default filter for results\n     * @param {Object} result\n     * @param {String} filter\n     * @returns {boolean} Include this result\n     * @private\n     */\n    $.Autocompleter.prototype.defaultFilter = function(result, filter) {\n        if (!result.value) {\n            return false;\n        }\n        if (this.options.filterResults) {\n            var pattern = this.matchStringConverter(filter);\n            var testValue = this.matchStringConverter(result.value);\n            if (!this.options.matchCase) {\n                pattern = pattern.toLowerCase();\n                testValue = testValue.toLowerCase();\n            }\n            var patternIndex = testValue.indexOf(pattern);\n            if (this.options.matchInside) {\n                return patternIndex > -1;\n            } else {\n                return patternIndex === 0;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Filter result\n     * @param {Object} result\n     * @param {String} filter\n     * @returns {boolean} Include this result\n     * @private\n     */\n    $.Autocompleter.prototype.filterResult = function(result, filter) {\n        // No filter\n        if (this.options.filter === false) {\n            return true;\n        }\n        // Custom filter\n        if ($.isFunction(this.options.filter)) {\n            return this.options.filter(result, filter);\n        }\n        // Default filter\n        return this.defaultFilter(result, filter);\n    };\n\n    /**\n     * Filter results\n     * @param results\n     * @param filter\n     */\n    $.Autocompleter.prototype.filterResults = function(results, filter) {\n        var filtered = [];\n        var i, result;\n\n        for (i = 0; i < results.length; i++) {\n            result = sanitizeResult(results[i]);\n            if (this.filterResult(result, filter)) {\n                filtered.push(result);\n            }\n        }\n        if (this.options.sortResults) {\n            filtered = this.sortResults(filtered, filter);\n        }\n        if (this.options.maxItemsToShow > 0 && this.options.maxItemsToShow < filtered.length) {\n            filtered.length = this.options.maxItemsToShow;\n        }\n        return filtered;\n    };\n\n    /**\n     * Sort results\n     * @param results\n     * @param filter\n     */\n    $.Autocompleter.prototype.sortResults = function(results, filter) {\n        var self = this;\n        var sortFunction = this.options.sortFunction;\n        if (!$.isFunction(sortFunction)) {\n            sortFunction = function(a, b, f) {\n                return sortValueAlpha(a, b, self.options.matchCase);\n            };\n        }\n        results.sort(function(a, b) {\n            return sortFunction(a, b, filter, self.options);\n        });\n        return results;\n    };\n\n    /**\n     * Convert string before matching\n     * @param s\n     * @param a\n     * @param b\n     */\n    $.Autocompleter.prototype.matchStringConverter = function(s, a, b) {\n        var converter = this.options.matchStringConverter;\n        if ($.isFunction(converter)) {\n            s = converter(s, a, b);\n        }\n        return s;\n    };\n\n    /**\n     * Convert string before use\n     * @param {String} s\n     */\n    $.Autocompleter.prototype.beforeUseConverter = function(s) {\n        s = this.getValue(s);\n        var converter = this.options.beforeUseConverter;\n        if ($.isFunction(converter)) {\n            s = converter(s);\n        }\n        return s;\n    };\n\n    /**\n     * Enable finish on blur event\n     */\n    $.Autocompleter.prototype.enableFinishOnBlur = function() {\n        this.finishOnBlur_ = true;\n    };\n\n    /**\n     * Disable finish on blur event\n     */\n    $.Autocompleter.prototype.disableFinishOnBlur = function() {\n        this.finishOnBlur_ = false;\n    };\n\n    /**\n     * Create a results item (LI element) from a result\n     * @param result\n     */\n    $.Autocompleter.prototype.createItemFromResult = function(result) {\n        var self = this;\n        var $li = $('<li/>');\n        $li.html(this.showResult(result.value, result.data));\n        $li.data({value: result.value, data: result.data})\n            .click(function() {\n                self.selectItem($li);\n            })\n            .mousedown(self.disableFinishOnBlur)\n            .mouseup(self.enableFinishOnBlur)\n        ;\n        return $li;\n    };\n\n    /**\n     * Get all items from the results list\n     * @param result\n     */\n    $.Autocompleter.prototype.getItems = function() {\n        return $('>ul>li', this.dom.$results);\n    };\n\n    /**\n     * Show all results\n     * @param results\n     * @param filter\n     */\n    $.Autocompleter.prototype.showResults = function(results, filter) {\n        var numResults = results.length;\n        var self = this;\n        var $ul = $('<ul></ul>');\n        var i, result, $li, autoWidth, first = false, $first = false;\n\n        if (numResults) {\n            for (i = 0; i < numResults; i++) {\n                result = results[i];\n                $li = this.createItemFromResult(result);\n                $ul.append($li);\n                if (first === false) {\n                    first = String(result.value);\n                    $first = $li;\n                    $li.addClass(this.options.firstItemClass);\n                }\n                if (i === numResults - 1) {\n                    $li.addClass(this.options.lastItemClass);\n                }\n            }\n\n            this.dom.$results.html($ul).show();\n\n            // Always recalculate position since window size or\n            // input element location may have changed.\n            this.position();\n            if (this.options.autoWidth) {\n                autoWidth = this.dom.$elem.outerWidth() - this.dom.$results.outerWidth() + this.dom.$results.width();\n                this.dom.$results.css(this.options.autoWidth, autoWidth);\n            }\n            this.getItems().hover(\n                function() { self.focusItem(this); },\n                function() { /* void */ }\n            );\n            if (this.autoFill(first, filter) || this.options.selectFirst || (this.options.selectOnly && numResults === 1)) {\n                this.focusItem($first);\n            }\n            this.active_ = true;\n        } else {\n            this.hideResults();\n            this.active_ = false;\n        }\n    };\n\n    $.Autocompleter.prototype.showResult = function(value, data) {\n        if ($.isFunction(this.options.showResult)) {\n            return this.options.showResult(value, data);\n        } else {\n            return $('<p></p>').text(value).html();\n        }\n    };\n\n    $.Autocompleter.prototype.autoFill = function(value, filter) {\n        var lcValue, lcFilter, valueLength, filterLength;\n        if (this.options.autoFill && this.lastKeyPressed_ !== 8) {\n            lcValue = String(value).toLowerCase();\n            lcFilter = String(filter).toLowerCase();\n            valueLength = value.length;\n            filterLength = filter.length;\n            if (lcValue.substr(0, filterLength) === lcFilter) {\n                var d = this.getDelimiterOffsets();\n                var pad = d.start ? ' ' : ''; // if there is a preceding delimiter\n                this.setValue( pad + value );\n                var start = filterLength + d.start + pad.length;\n                var end = valueLength + d.start + pad.length;\n                this.selectRange(start, end);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    $.Autocompleter.prototype.focusNext = function() {\n        this.focusMove(+1);\n    };\n\n    $.Autocompleter.prototype.focusPrev = function() {\n        this.focusMove(-1);\n    };\n\n    $.Autocompleter.prototype.focusMove = function(modifier) {\n        var $items = this.getItems();\n        modifier = sanitizeInteger(modifier, 0);\n        if (modifier) {\n            for (var i = 0; i < $items.length; i++) {\n                if ($($items[i]).hasClass(this.selectClass_)) {\n                    this.focusItem(i + modifier);\n                    return;\n                }\n            }\n        }\n        this.focusItem(0);\n    };\n\n    $.Autocompleter.prototype.focusItem = function(item) {\n        var $item, $items = this.getItems();\n        if ($items.length) {\n            $items.removeClass(this.selectClass_).removeClass(this.options.selectClass);\n            if (typeof item === 'number') {\n                if (item < 0) {\n                    item = 0;\n                } else if (item >= $items.length) {\n                    item = $items.length - 1;\n                }\n                $item = $($items[item]);\n            } else {\n                $item = $(item);\n            }\n            if ($item) {\n                $item.addClass(this.selectClass_).addClass(this.options.selectClass);\n            }\n        }\n    };\n\n    $.Autocompleter.prototype.selectCurrent = function() {\n        var $item = $('li.' + this.selectClass_, this.dom.$results);\n        if ($item.length === 1) {\n            this.selectItem($item);\n        } else {\n            this.deactivate(false);\n        }\n    };\n\n    $.Autocompleter.prototype.selectItem = function($li) {\n        var value = $li.data('value');\n        var data = $li.data('data');\n        var displayValue = this.displayValue(value, data);\n        var processedDisplayValue = this.beforeUseConverter(displayValue);\n        this.lastProcessedValue_ = processedDisplayValue;\n        this.lastSelectedValue_ = processedDisplayValue;\n        var d = this.getDelimiterOffsets();\n        var delimiter = this.options.delimiterChar;\n        var elem = this.dom.$elem;\n        var extraCaretPos = 0;\n        if ( this.options.useDelimiter ) {\n            // if there is a preceding delimiter, add a space after the delimiter\n            if ( elem.val().substring(d.start-1, d.start) == delimiter && delimiter != ' ' ) {\n                displayValue = ' ' + displayValue;\n            }\n            // if there is not already a delimiter trailing this value, add it\n            if ( elem.val().substring(d.end, d.end+1) != delimiter && this.lastKeyPressed_ != this.options.delimiterKeyCode ) {\n                displayValue = displayValue + delimiter;\n            } else {\n                // move the cursor after the existing trailing delimiter\n                extraCaretPos = 1;\n            }\n        }\n        this.setValue(displayValue);\n        this.setCaret(d.start + displayValue.length + extraCaretPos);\n        this.callHook('onItemSelect', { value: value, data: data });\n        this.deactivate(true);\n        elem.focus();\n    };\n\n    $.Autocompleter.prototype.displayValue = function(value, data) {\n        if ($.isFunction(this.options.displayValue)) {\n            return this.options.displayValue(value, data);\n        }\n        return value;\n    };\n\n    $.Autocompleter.prototype.hideResults = function() {\n        this.dom.$results.hide();\n    };\n\n    $.Autocompleter.prototype.deactivate = function(finish) {\n        if (this.finishTimeout_) {\n            clearTimeout(this.finishTimeout_);\n        }\n        if (this.keyTimeout_) {\n            clearTimeout(this.keyTimeout_);\n        }\n        if (finish) {\n            if (this.lastProcessedValue_ !== this.lastSelectedValue_) {\n                if (this.options.mustMatch) {\n                    this.setValue('');\n                }\n                this.callHook('onNoMatch');\n            }\n            if (this.active_) {\n                this.callHook('onFinish');\n            }\n            this.lastKeyPressed_ = null;\n            this.lastProcessedValue_ = null;\n            this.lastSelectedValue_ = null;\n            this.active_ = false;\n        }\n        this.hideResults();\n    };\n\n    $.Autocompleter.prototype.selectRange = function(start, end) {\n        var input = this.dom.$elem.get(0);\n        if (input.setSelectionRange) {\n            input.focus();\n            input.setSelectionRange(start, end);\n        } else if (input.createTextRange) {\n            var range = input.createTextRange();\n            range.collapse(true);\n            range.moveEnd('character', end);\n            range.moveStart('character', start);\n            range.select();\n        }\n    };\n\n    /**\n     * Move caret to position\n     * @param {Number} pos\n     */\n    $.Autocompleter.prototype.setCaret = function(pos) {\n        this.selectRange(pos, pos);\n    };\n\n    /**\n     * Get caret position\n     */\n    $.Autocompleter.prototype.getCaret = function() {\n        var $elem = this.dom.$elem;\n        var elem = $elem[0];\n        var val, selection, range, start, end, stored_range;\n        if (elem.createTextRange) { // IE\n            selection = document.selection;\n            if (elem.tagName.toLowerCase() != 'textarea') {\n                val = $elem.val();\n                range = selection.createRange().duplicate();\n                range.moveEnd('character', val.length);\n                if (range.text === '') {\n                    start = val.length;\n                } else {\n                    start = val.lastIndexOf(range.text);\n                }\n                range = selection.createRange().duplicate();\n                range.moveStart('character', -val.length);\n                end = range.text.length;\n            } else {\n                range = selection.createRange();\n                stored_range = range.duplicate();\n                stored_range.moveToElementText(elem);\n                stored_range.setEndPoint('EndToEnd', range);\n                start = stored_range.text.length - range.text.length;\n                end = start + range.text.length;\n            }\n        } else {\n            start = $elem[0].selectionStart;\n            end = $elem[0].selectionEnd;\n        }\n        return {\n            start: start,\n            end: end\n        };\n    };\n\n    /**\n     * Set the value that is currently being autocompleted\n     * @param {String} value\n     */\n    $.Autocompleter.prototype.setValue = function(value) {\n        if ( this.options.useDelimiter ) {\n            // set the substring between the current delimiters\n            var val = this.dom.$elem.val();\n            var d = this.getDelimiterOffsets();\n            var preVal = val.substring(0, d.start);\n            var postVal = val.substring(d.end);\n            value = preVal + value + postVal;\n        }\n        this.dom.$elem.val(value);\n    };\n\n    /**\n     * Get the value currently being autocompleted\n     * @param {String} value\n     */\n    $.Autocompleter.prototype.getValue = function(value) {\n        if ( this.options.useDelimiter ) {\n            var d = this.getDelimiterOffsets();\n            return value.substring(d.start, d.end).trim();\n        } else {\n            return value;\n        }\n    };\n\n    /**\n     * Get the offsets of the value currently being autocompleted\n     */\n    $.Autocompleter.prototype.getDelimiterOffsets = function() {\n        var val = this.dom.$elem.val();\n        if ( this.options.useDelimiter ) {\n            var preCaretVal = val.substring(0, this.getCaret().start);\n            var start = preCaretVal.lastIndexOf(this.options.delimiterChar) + 1;\n            var postCaretVal = val.substring(this.getCaret().start);\n            var end = postCaretVal.indexOf(this.options.delimiterChar);\n            if ( end == -1 ) end = val.length;\n            end += this.getCaret().start;\n        } else {\n            start = 0;\n            end = val.length;\n        }\n        return {\n            start: start,\n            end: end\n        };\n    };\n\n})(jQuery);"]}