{"version":3,"sources":["libs/jquery/jstorage.js"],"names":["window","data","_backend","_storage_elm","load","getAttribute","E5","_reloadData","E6","jStorage","_load_storage","_handleTTL","_observer_update","_handlePubSub","setInterval","_storageObserver","document","updateTime","_observer_timeout","setTimeout","_storage_service","jStorage_update","_checkUpdatedKeys","_storage","__jstorage_meta","CRC32","newCrc32List","JSON","parse","stringify","key","updated","removed","oldCrc32List","hasOwnProperty","String","substr","push","_fireObservers","action","keys","_observers","i","concat","len","j","jlen","length","_publishChange","Date","E8","setAttribute","save","_storage_size","_save","_dropOldEvents","E7","TypeError","curtime","nextExpire","Infinity","changed","deleted","clearTimeout","_ttl_timeout","_typeof","TTL","PubSub","pubelm","_pubsubCurrent","_pubsub_last","_fireSubscribers","channel","payload","_pubsub_observers","retire","_publish","unshift","murmurhash2_32_gc","str","seed","k","l","h","charCodeAt","$","jQuery","decode","prototype","evalJSON","parseJSON","encode","Error","_XMLService","isXML","elm","documentElement","ownerDocument","nodeName","xmlNode","this","E1","xml","E2","XMLSerializer","resultXML","dom_parser","DOMParser","parseFromString","ActiveXObject","_xmlString","xml_doc","loadXML","call","xmlString","set","value","options","version","JSTORAGE_VERSION","deleteKey","_is_xml","_checkKey","setTTL","get","def","ttl","Number","getTTL","flush","storageObj","F","index","storageSize","currentBackend","storageAvailable","listenKeyChange","callback","stopListening","splice","subscribe","toString","publish","reInit","localStorageReallyWorks","localStorage","setItem","removeItem","BogusQuotaExceededErrorOnIos5","E3","location","hostname","E4","addBehavior","behavior","appendChild","style","_setupObserver","addEventListener","event"],"mappings":"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","file":"../../../scripts/libs/jquery/jstorage.js","sourcesContent":["/*\n * ----------------------------- JSTORAGE -------------------------------------\n * Simple local storage wrapper to save data on the browser side, supporting\n * all major browsers - IE6+, Firefox2+, Safari4+, Chrome4+ and Opera 10.5+\n *\n * Copyright (c) 2010 - 2012 Andris Reinman, andris.reinman@gmail.com\n * Project homepage: www.jstorage.info\n *\n * Licensed under MIT-style license:\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n (function(){\n    var\n        /* jStorage version */\n        JSTORAGE_VERSION = \"0.4.4\",\n\n        /* detect a dollar object or create one if not found */\n        $ = window.jQuery || window.$ || (window.$ = {}),\n\n        /* check for a JSON handling support */\n        JSON = {\n            parse:\n                window.JSON && (window.JSON.parse || window.JSON.decode) ||\n                String.prototype.evalJSON && function(str){return String(str).evalJSON();} ||\n                $.parseJSON ||\n                $.evalJSON,\n            stringify:\n                Object.toJSON ||\n                window.JSON && (window.JSON.stringify || window.JSON.encode) ||\n                $.toJSON\n        };\n\n    // Break if no JSON support was found\n    if(!('parse' in JSON) || !('stringify' in JSON)){\n        throw new Error(\"No JSON support found, include //cdnjs.cloudflare.com/ajax/libs/json2/20110223/json2.js to page\");\n    }\n\n    var\n        /* This is the object, that holds the cached values */\n        _storage = {__jstorage_meta:{CRC32:{}}},\n\n        /* Actual browser storage (localStorage or globalStorage['domain']) */\n        _storage_service = {jStorage:\"{}\"},\n\n        /* DOM element for older IE versions, holds userData behavior */\n        _storage_elm = null,\n\n        /* How much space does the storage take */\n        _storage_size = 0,\n\n        /* which backend is currently used */\n        _backend = false,\n\n        /* onchange observers */\n        _observers = {},\n\n        /* timeout to wait after onchange event */\n        _observer_timeout = false,\n\n        /* last update time */\n        _observer_update = 0,\n\n        /* pubsub observers */\n        _pubsub_observers = {},\n\n        /* skip published items older than current timestamp */\n        _pubsub_last = +new Date(),\n\n        /* Next check for TTL */\n        _ttl_timeout,\n\n        /**\n         * XML encoding and decoding as XML nodes can't be JSON'ized\n         * XML nodes are encoded and decoded if the node is the value to be saved\n         * but not if it's as a property of another object\n         * Eg. -\n         *   $.jStorage.set(\"key\", xmlNode);        // IS OK\n         *   $.jStorage.set(\"key\", {xml: xmlNode}); // NOT OK\n         */\n        _XMLService = {\n\n            /**\n             * Validates a XML node to be XML\n             * based on jQuery.isXML function\n             */\n            isXML: function(elm){\n                var documentElement = (elm ? elm.ownerDocument || elm : 0).documentElement;\n                return documentElement ? documentElement.nodeName !== \"HTML\" : false;\n            },\n\n            /**\n             * Encodes a XML node to string\n             * based on http://www.mercurytide.co.uk/news/article/issues-when-working-ajax/\n             */\n            encode: function(xmlNode) {\n                if(!this.isXML(xmlNode)){\n                    return false;\n                }\n                try{ // Mozilla, Webkit, Opera\n                    return new XMLSerializer().serializeToString(xmlNode);\n                }catch(E1) {\n                    try {  // IE\n                        return xmlNode.xml;\n                    }catch(E2){}\n                }\n                return false;\n            },\n\n            /**\n             * Decodes a XML node from string\n             * loosely based on http://outwestmedia.com/jquery-plugins/xmldom/\n             */\n            decode: function(xmlString){\n                var dom_parser = (\"DOMParser\" in window && (new DOMParser()).parseFromString) ||\n                        (window.ActiveXObject && function(_xmlString) {\n                    var xml_doc = new ActiveXObject('Microsoft.XMLDOM');\n                    xml_doc.async = 'false';\n                    xml_doc.loadXML(_xmlString);\n                    return xml_doc;\n                }),\n                resultXML;\n                if(!dom_parser){\n                    return false;\n                }\n                resultXML = dom_parser.call(\"DOMParser\" in window && (new DOMParser()) || window, xmlString, 'text/xml');\n                return this.isXML(resultXML)?resultXML:false;\n            }\n        };\n\n\n    ////////////////////////// PRIVATE METHODS ////////////////////////\n\n    /**\n     * Initialization function. Detects if the browser supports DOM Storage\n     * or userData behavior and behaves accordingly.\n     */\n    function _init(){\n        /* Check if browser supports localStorage */\n        var localStorageReallyWorks = false;\n        if(\"localStorage\" in window){\n            try {\n                window.localStorage.setItem('_tmptest', 'tmpval');\n                localStorageReallyWorks = true;\n                window.localStorage.removeItem('_tmptest');\n            } catch(BogusQuotaExceededErrorOnIos5) {\n                // Thanks be to iOS5 Private Browsing mode which throws\n                // QUOTA_EXCEEDED_ERRROR DOM Exception 22.\n            }\n        }\n\n        if(localStorageReallyWorks){\n            try {\n                if(window.localStorage) {\n                    _storage_service = window.localStorage;\n                    _backend = \"localStorage\";\n                    _observer_update = _storage_service.jStorage_update;\n                }\n            } catch(E3) {/* Firefox fails when touching localStorage and cookies are disabled */}\n        }\n        /* Check if browser supports globalStorage */\n        else if(\"globalStorage\" in window){\n            try {\n                if(window.globalStorage) {\n\t\t\t\t\tif(window.location.hostname == 'localhost'){\n\t\t\t\t\t\t_storage_service = window.globalStorage['localhost.localdomain'];\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t_storage_service = window.globalStorage[window.location.hostname];\n\t\t\t\t\t}\n                    _backend = \"globalStorage\";\n                    _observer_update = _storage_service.jStorage_update;\n                }\n            } catch(E4) {/* Firefox fails when touching localStorage and cookies are disabled */}\n        }\n        /* Check if browser supports userData behavior */\n        else {\n            _storage_elm = document.createElement('link');\n            if(_storage_elm.addBehavior){\n\n                /* Use a DOM element to act as userData storage */\n                _storage_elm.style.behavior = 'url(#default#userData)';\n\n                /* userData element needs to be inserted into the DOM! */\n                document.getElementsByTagName('head')[0].appendChild(_storage_elm);\n\n                try{\n                    _storage_elm.load(\"jStorage\");\n                }catch(E){\n                    // try to reset cache\n                    _storage_elm.setAttribute(\"jStorage\", \"{}\");\n                    _storage_elm.save(\"jStorage\");\n                    _storage_elm.load(\"jStorage\");\n                }\n\n                var data = \"{}\";\n                try{\n                    data = _storage_elm.getAttribute(\"jStorage\");\n                }catch(E5){}\n\n                try{\n                    _observer_update = _storage_elm.getAttribute(\"jStorage_update\");\n                }catch(E6){}\n\n                _storage_service.jStorage = data;\n                _backend = \"userDataBehavior\";\n            }else{\n                _storage_elm = null;\n                return;\n            }\n        }\n\n        // Load data from storage\n        _load_storage();\n\n        // remove dead keys\n        _handleTTL();\n\n        // start listening for changes\n        _setupObserver();\n\n        // initialize publish-subscribe service\n        _handlePubSub();\n\n        // handle cached navigation\n        if(\"addEventListener\" in window){\n            window.addEventListener(\"pageshow\", function(event){\n                if(event.persisted){\n                    _storageObserver();\n                }\n            }, false);\n        }\n    }\n\n    /**\n     * Reload data from storage when needed\n     */\n    function _reloadData(){\n        var data = \"{}\";\n\n        if(_backend == \"userDataBehavior\"){\n            _storage_elm.load(\"jStorage\");\n\n            try{\n                data = _storage_elm.getAttribute(\"jStorage\");\n            }catch(E5){}\n\n            try{\n                _observer_update = _storage_elm.getAttribute(\"jStorage_update\");\n            }catch(E6){}\n\n            _storage_service.jStorage = data;\n        }\n\n        _load_storage();\n\n        // remove dead keys\n        _handleTTL();\n\n        _handlePubSub();\n    }\n\n    /**\n     * Sets up a storage change observer\n     */\n    function _setupObserver(){\n        if(_backend == \"localStorage\" || _backend == \"globalStorage\"){\n            if(\"addEventListener\" in window){\n                window.addEventListener(\"storage\", _storageObserver, false);\n            }else{\n                document.attachEvent(\"onstorage\", _storageObserver);\n            }\n        }else if(_backend == \"userDataBehavior\"){\n            setInterval(_storageObserver, 1000);\n        }\n    }\n\n    /**\n     * Fired on any kind of data change, needs to check if anything has\n     * really been changed\n     */\n    function _storageObserver(){\n        var updateTime;\n        // cumulate change notifications with timeout\n        clearTimeout(_observer_timeout);\n        _observer_timeout = setTimeout(function(){\n\n            if(_backend == \"localStorage\" || _backend == \"globalStorage\"){\n                updateTime = _storage_service.jStorage_update;\n            }else if(_backend == \"userDataBehavior\"){\n                _storage_elm.load(\"jStorage\");\n                try{\n                    updateTime = _storage_elm.getAttribute(\"jStorage_update\");\n                }catch(E5){}\n            }\n\n            if(updateTime && updateTime != _observer_update){\n                _observer_update = updateTime;\n                _checkUpdatedKeys();\n            }\n\n        }, 25);\n    }\n\n    /**\n     * Reloads the data and checks if any keys are changed\n     */\n    function _checkUpdatedKeys(){\n        var oldCrc32List = JSON.parse(JSON.stringify(_storage.__jstorage_meta.CRC32)),\n            newCrc32List;\n\n        _reloadData();\n        newCrc32List = JSON.parse(JSON.stringify(_storage.__jstorage_meta.CRC32));\n\n        var key,\n            updated = [],\n            removed = [];\n\n        for(key in oldCrc32List){\n            if(oldCrc32List.hasOwnProperty(key)){\n                if(!newCrc32List[key]){\n                    removed.push(key);\n                    continue;\n                }\n                if(oldCrc32List[key] != newCrc32List[key] && String(oldCrc32List[key]).substr(0,2) == \"2.\"){\n                    updated.push(key);\n                }\n            }\n        }\n\n        for(key in newCrc32List){\n            if(newCrc32List.hasOwnProperty(key)){\n                if(!oldCrc32List[key]){\n                    updated.push(key);\n                }\n            }\n        }\n\n        _fireObservers(updated, \"updated\");\n        _fireObservers(removed, \"deleted\");\n    }\n\n    /**\n     * Fires observers for updated keys\n     *\n     * @param {Array|String} keys Array of key names or a key\n     * @param {String} action What happened with the value (updated, deleted, flushed)\n     */\n    function _fireObservers(keys, action){\n        keys = [].concat(keys || []);\n        if(action == \"flushed\"){\n            keys = [];\n            for(var key in _observers){\n                if(_observers.hasOwnProperty(key)){\n                    keys.push(key);\n                }\n            }\n            action = \"deleted\";\n        }\n        for(var i=0, len = keys.length; i<len; i++){\n            if(_observers[keys[i]]){\n                for(var j=0, jlen = _observers[keys[i]].length; j<jlen; j++){\n                    _observers[keys[i]][j](keys[i], action);\n                }\n            }\n            if(_observers[\"*\"]){\n                for(var j=0, jlen = _observers[\"*\"].length; j<jlen; j++){\n                    _observers[\"*\"][j](keys[i], action);\n                }\n            }\n        }\n    }\n\n    /**\n     * Publishes key change to listeners\n     */\n    function _publishChange(){\n        var updateTime = (+new Date()).toString();\n\n        if(_backend == \"localStorage\" || _backend == \"globalStorage\"){\n            try {\n                _storage_service.jStorage_update = updateTime;\n            } catch (E8) {\n                // safari private mode has been enabled after the jStorage initialization\n                _backend = false;\n            }\n        }else if(_backend == \"userDataBehavior\"){\n            _storage_elm.setAttribute(\"jStorage_update\", updateTime);\n            _storage_elm.save(\"jStorage\");\n        }\n\n        _storageObserver();\n    }\n\n    /**\n     * Loads the data from the storage based on the supported mechanism\n     */\n    function _load_storage(){\n        /* if jStorage string is retrieved, then decode it */\n        if(_storage_service.jStorage){\n            try{\n                _storage = JSON.parse(String(_storage_service.jStorage));\n            }catch(E6){_storage_service.jStorage = \"{}\";}\n        }else{\n            _storage_service.jStorage = \"{}\";\n        }\n        _storage_size = _storage_service.jStorage?String(_storage_service.jStorage).length:0;\n\n        if(!_storage.__jstorage_meta){\n            _storage.__jstorage_meta = {};\n        }\n        if(!_storage.__jstorage_meta.CRC32){\n            _storage.__jstorage_meta.CRC32 = {};\n        }\n    }\n\n    /**\n     * This functions provides the \"save\" mechanism to store the jStorage object\n     */\n    function _save(){\n        _dropOldEvents(); // remove expired events\n        try{\n            _storage_service.jStorage = JSON.stringify(_storage);\n            // If userData is used as the storage engine, additional\n            if(_storage_elm) {\n                _storage_elm.setAttribute(\"jStorage\",_storage_service.jStorage);\n                _storage_elm.save(\"jStorage\");\n            }\n            _storage_size = _storage_service.jStorage?String(_storage_service.jStorage).length:0;\n        }catch(E7){/* probably cache is full, nothing is saved this way*/}\n    }\n\n    /**\n     * Function checks if a key is set and is string or numberic\n     *\n     * @param {String} key Key name\n     */\n    function _checkKey(key){\n        if(!key || (typeof key != \"string\" && typeof key != \"number\")){\n            throw new TypeError('Key name must be string or numeric');\n        }\n        if(key == \"__jstorage_meta\"){\n            throw new TypeError('Reserved key name');\n        }\n        return true;\n    }\n\n    /**\n     * Removes expired keys\n     */\n    function _handleTTL(){\n        var curtime, i, TTL, CRC32, nextExpire = Infinity, changed = false, deleted = [];\n\n        clearTimeout(_ttl_timeout);\n\n        if(!_storage.__jstorage_meta || typeof _storage.__jstorage_meta.TTL != \"object\"){\n            // nothing to do here\n            return;\n        }\n\n        curtime = +new Date();\n        TTL = _storage.__jstorage_meta.TTL;\n\n        CRC32 = _storage.__jstorage_meta.CRC32;\n        for(i in TTL){\n            if(TTL.hasOwnProperty(i)){\n                if(TTL[i] <= curtime){\n                    delete TTL[i];\n                    delete CRC32[i];\n                    delete _storage[i];\n                    changed = true;\n                    deleted.push(i);\n                }else if(TTL[i] < nextExpire){\n                    nextExpire = TTL[i];\n                }\n            }\n        }\n\n        // set next check\n        if(nextExpire != Infinity){\n            _ttl_timeout = setTimeout(_handleTTL, nextExpire - curtime);\n        }\n\n        // save changes\n        if(changed){\n            _save();\n            _publishChange();\n            _fireObservers(deleted, \"deleted\");\n        }\n    }\n\n    /**\n     * Checks if there's any events on hold to be fired to listeners\n     */\n    function _handlePubSub(){\n        var i, len;\n        if(!_storage.__jstorage_meta.PubSub){\n            return;\n        }\n        var pubelm,\n            _pubsubCurrent = _pubsub_last;\n\n        for(i=len=_storage.__jstorage_meta.PubSub.length-1; i>=0; i--){\n            pubelm = _storage.__jstorage_meta.PubSub[i];\n            if(pubelm[0] > _pubsub_last){\n                _pubsubCurrent = pubelm[0];\n                _fireSubscribers(pubelm[1], pubelm[2]);\n            }\n        }\n\n        _pubsub_last = _pubsubCurrent;\n    }\n\n    /**\n     * Fires all subscriber listeners for a pubsub channel\n     *\n     * @param {String} channel Channel name\n     * @param {Mixed} payload Payload data to deliver\n     */\n    function _fireSubscribers(channel, payload){\n        if(_pubsub_observers[channel]){\n            for(var i=0, len = _pubsub_observers[channel].length; i<len; i++){\n                // send immutable data that can't be modified by listeners\n                _pubsub_observers[channel][i](channel, JSON.parse(JSON.stringify(payload)));\n            }\n        }\n    }\n\n    /**\n     * Remove old events from the publish stream (at least 2sec old)\n     */\n    function _dropOldEvents(){\n        if(!_storage.__jstorage_meta.PubSub){\n            return;\n        }\n\n        var retire = +new Date() - 2000;\n\n        for(var i=0, len = _storage.__jstorage_meta.PubSub.length; i<len; i++){\n            if(_storage.__jstorage_meta.PubSub[i][0] <= retire){\n                // deleteCount is needed for IE6\n                _storage.__jstorage_meta.PubSub.splice(i, _storage.__jstorage_meta.PubSub.length - i);\n                break;\n            }\n        }\n\n        if(!_storage.__jstorage_meta.PubSub.length){\n            delete _storage.__jstorage_meta.PubSub;\n        }\n\n    }\n\n    /**\n     * Publish payload to a channel\n     *\n     * @param {String} channel Channel name\n     * @param {Mixed} payload Payload to send to the subscribers\n     */\n    function _publish(channel, payload){\n        if(!_storage.__jstorage_meta){\n            _storage.__jstorage_meta = {};\n        }\n        if(!_storage.__jstorage_meta.PubSub){\n            _storage.__jstorage_meta.PubSub = [];\n        }\n\n        _storage.__jstorage_meta.PubSub.unshift([+new Date, channel, payload]);\n\n        _save();\n        _publishChange();\n    }\n\n\n    /**\n     * JS Implementation of MurmurHash2\n     *\n     *  SOURCE: https://github.com/garycourt/murmurhash-js (MIT licensed)\n     *\n     * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n     * @see http://github.com/garycourt/murmurhash-js\n     * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n     * @see http://sites.google.com/site/murmurhash/\n     *\n     * @param {string} str ASCII only\n     * @param {number} seed Positive integer only\n     * @return {number} 32-bit positive integer hash\n     */\n\n    function murmurhash2_32_gc(str, seed) {\n        var\n            l = str.length,\n            h = seed ^ l,\n            i = 0,\n            k;\n\n        while (l >= 4) {\n            k =\n                ((str.charCodeAt(i) & 0xff)) |\n                ((str.charCodeAt(++i) & 0xff) << 8) |\n                ((str.charCodeAt(++i) & 0xff) << 16) |\n                ((str.charCodeAt(++i) & 0xff) << 24);\n\n            k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));\n            k ^= k >>> 24;\n            k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));\n\n            h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^ k;\n\n            l -= 4;\n            ++i;\n        }\n\n        switch (l) {\n            case 3: h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n            case 2: h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n            case 1: h ^= (str.charCodeAt(i) & 0xff);\n                h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));\n        }\n\n        h ^= h >>> 13;\n        h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));\n        h ^= h >>> 15;\n\n        return h >>> 0;\n    }\n\n    ////////////////////////// PUBLIC INTERFACE /////////////////////////\n\n    $.jStorage = {\n        /* Version number */\n        version: JSTORAGE_VERSION,\n\n        /**\n         * Sets a key's value.\n         *\n         * @param {String} key Key to set. If this value is not set or not\n         *              a string an exception is raised.\n         * @param {Mixed} value Value to set. This can be any value that is JSON\n         *              compatible (Numbers, Strings, Objects etc.).\n         * @param {Object} [options] - possible options to use\n         * @param {Number} [options.TTL] - optional TTL value\n         * @return {Mixed} the used value\n         */\n        set: function(key, value, options){\n            _checkKey(key);\n\n            options = options || {};\n\n            // undefined values are deleted automatically\n            if(typeof value == \"undefined\"){\n                this.deleteKey(key);\n                return value;\n            }\n\n            if(_XMLService.isXML(value)){\n                value = {_is_xml:true,xml:_XMLService.encode(value)};\n            }else if(typeof value == \"function\"){\n                return undefined; // functions can't be saved!\n            }else if(value && typeof value == \"object\"){\n                // clone the object before saving to _storage tree\n                value = JSON.parse(JSON.stringify(value));\n            }\n\n            _storage[key] = value;\n\n            _storage.__jstorage_meta.CRC32[key] = \"2.\" + murmurhash2_32_gc(JSON.stringify(value), 0x9747b28c);\n\n            this.setTTL(key, options.TTL || 0); // also handles saving and _publishChange\n\n            _fireObservers(key, \"updated\");\n            return value;\n        },\n\n        /**\n         * Looks up a key in cache\n         *\n         * @param {String} key - Key to look up.\n         * @param {mixed} def - Default value to return, if key didn't exist.\n         * @return {Mixed} the key value, default value or null\n         */\n        get: function(key, def){\n            _checkKey(key);\n            if(key in _storage){\n                if(_storage[key] && typeof _storage[key] == \"object\" && _storage[key]._is_xml) {\n                    return _XMLService.decode(_storage[key].xml);\n                }else{\n                    return _storage[key];\n                }\n            }\n            return typeof(def) == 'undefined' ? null : def;\n        },\n\n        /**\n         * Deletes a key from cache.\n         *\n         * @param {String} key - Key to delete.\n         * @return {Boolean} true if key existed or false if it didn't\n         */\n        deleteKey: function(key){\n            _checkKey(key);\n            if(key in _storage){\n                delete _storage[key];\n                // remove from TTL list\n                if(typeof _storage.__jstorage_meta.TTL == \"object\" &&\n                  key in _storage.__jstorage_meta.TTL){\n                    delete _storage.__jstorage_meta.TTL[key];\n                }\n\n                delete _storage.__jstorage_meta.CRC32[key];\n\n                _save();\n                _publishChange();\n                _fireObservers(key, \"deleted\");\n                return true;\n            }\n            return false;\n        },\n\n        /**\n         * Sets a TTL for a key, or remove it if ttl value is 0 or below\n         *\n         * @param {String} key - key to set the TTL for\n         * @param {Number} ttl - TTL timeout in milliseconds\n         * @return {Boolean} true if key existed or false if it didn't\n         */\n        setTTL: function(key, ttl){\n            var curtime = +new Date();\n            _checkKey(key);\n            ttl = Number(ttl) || 0;\n            if(key in _storage){\n\n                if(!_storage.__jstorage_meta.TTL){\n                    _storage.__jstorage_meta.TTL = {};\n                }\n\n                // Set TTL value for the key\n                if(ttl>0){\n                    _storage.__jstorage_meta.TTL[key] = curtime + ttl;\n                }else{\n                    delete _storage.__jstorage_meta.TTL[key];\n                }\n\n                _save();\n\n                _handleTTL();\n\n                _publishChange();\n                return true;\n            }\n            return false;\n        },\n\n        /**\n         * Gets remaining TTL (in milliseconds) for a key or 0 when no TTL has been set\n         *\n         * @param {String} key Key to check\n         * @return {Number} Remaining TTL in milliseconds\n         */\n        getTTL: function(key){\n            var curtime = +new Date(), ttl;\n            _checkKey(key);\n            if(key in _storage && _storage.__jstorage_meta.TTL && _storage.__jstorage_meta.TTL[key]){\n                ttl = _storage.__jstorage_meta.TTL[key] - curtime;\n                return ttl || 0;\n            }\n            return 0;\n        },\n\n        /**\n         * Deletes everything in cache.\n         *\n         * @return {Boolean} Always true\n         */\n        flush: function(){\n            _storage = {__jstorage_meta:{CRC32:{}}};\n            _save();\n            _publishChange();\n            _fireObservers(null, \"flushed\");\n            return true;\n        },\n\n        /**\n         * Returns a read-only copy of _storage\n         *\n         * @return {Object} Read-only copy of _storage\n        */\n        storageObj: function(){\n            function F() {}\n            F.prototype = _storage;\n            return new F();\n        },\n\n        /**\n         * Returns an index of all used keys as an array\n         * ['key1', 'key2',..'keyN']\n         *\n         * @return {Array} Used keys\n        */\n        index: function(){\n            var index = [], i;\n            for(i in _storage){\n                if(_storage.hasOwnProperty(i) && i != \"__jstorage_meta\"){\n                    index.push(i);\n                }\n            }\n            return index;\n        },\n\n        /**\n         * How much space in bytes does the storage take?\n         *\n         * @return {Number} Storage size in chars (not the same as in bytes,\n         *                  since some chars may take several bytes)\n         */\n        storageSize: function(){\n            return _storage_size;\n        },\n\n        /**\n         * Which backend is currently in use?\n         *\n         * @return {String} Backend name\n         */\n        currentBackend: function(){\n            return _backend;\n        },\n\n        /**\n         * Test if storage is available\n         *\n         * @return {Boolean} True if storage can be used\n         */\n        storageAvailable: function(){\n            return !!_backend;\n        },\n\n        /**\n         * Register change listeners\n         *\n         * @param {String} key Key name\n         * @param {Function} callback Function to run when the key changes\n         */\n        listenKeyChange: function(key, callback){\n            _checkKey(key);\n            if(!_observers[key]){\n                _observers[key] = [];\n            }\n            _observers[key].push(callback);\n        },\n\n        /**\n         * Remove change listeners\n         *\n         * @param {String} key Key name to unregister listeners against\n         * @param {Function} [callback] If set, unregister the callback, if not - unregister all\n         */\n        stopListening: function(key, callback){\n            _checkKey(key);\n\n            if(!_observers[key]){\n                return;\n            }\n\n            if(!callback){\n                delete _observers[key];\n                return;\n            }\n\n            for(var i = _observers[key].length - 1; i>=0; i--){\n                if(_observers[key][i] == callback){\n                    _observers[key].splice(i,1);\n                }\n            }\n        },\n\n        /**\n         * Subscribe to a Publish/Subscribe event stream\n         *\n         * @param {String} channel Channel name\n         * @param {Function} callback Function to run when the something is published to the channel\n         */\n        subscribe: function(channel, callback){\n            channel = (channel || \"\").toString();\n            if(!channel){\n                throw new TypeError('Channel not defined');\n            }\n            if(!_pubsub_observers[channel]){\n                _pubsub_observers[channel] = [];\n            }\n            _pubsub_observers[channel].push(callback);\n        },\n\n        /**\n         * Publish data to an event stream\n         *\n         * @param {String} channel Channel name\n         * @param {Mixed} payload Payload to deliver\n         */\n        publish: function(channel, payload){\n            channel = (channel || \"\").toString();\n            if(!channel){\n                throw new TypeError('Channel not defined');\n            }\n\n            _publish(channel, payload);\n        },\n\n        /**\n         * Reloads the data from browser storage\n         */\n        reInit: function(){\n            _reloadData();\n        }\n    };\n\n    // Initialize jStorage\n    _init();\n\n})();\n"]}