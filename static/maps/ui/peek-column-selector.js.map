{"version":3,"sources":["ui/peek-column-selector.js"],"names":["COLUMN_INDEX_DATA_KEY","control","disabled","_jquery2","default","type","Error","JSON","stringify","multiselect","selected","label","id","validateControl","indexOf","buildButton","columnIndex","$","addClass","BUTTON_CLASS","text","buildControlCell","$td","html","attr","DISABLED_CLASS","$button","$cell","children","hasClass","SELECTED_CLASS","undefined","selectedText","unselectedText","buildSingleSelectCell","setSelectedText","ev","this","click","removeClass","key","parent","val","eventData","parents","buildMultiSelectCell","selectedColumnIndeces","map","makeArray","trigger","buildControlCells","count","$cells","push","buildControlRow","includePrompts","$controlRow","$promptCell","append","ROW_CLASS","PROMPT_CLASS","options","peekColumnSelector","cellCount","columnCount","$peektable","defaults","length","rowCount","find","$this","$commentRows","e","i","match","RegExp","commentChar","hideCommentRows","get","hide","name","first","renameColumns","$headers","each","index","newColumnName","COLUMN_NAME_DATA_KEY","RENAMABLE_HEADER_CLASS","controls","forEach","data","prevName","columnNames","RENAME_EVENT","CHANGE_EVENT","topLeftContent","fn","extend","call"],"mappings":"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","file":"../../scripts/ui/peek-column-selector.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\nimport jQuery from \"jquery\";\nvar $ = jQuery;\n\n//==============================================================================\n/** Column selection using the peek display as the control.\n     *  Adds rows to the bottom of the peek with clickable areas in each cell\n     *      to allow the user to select columns.\n     *  Column selection can be limited to a single column or multiple.\n     *  (Optionally) adds a left hand column of column selection prompts.\n     *  (Optionally) allows the column headers to be clicked/renamed\n     *      and set to some initial value.\n     *  (Optionally) hides comment rows.\n     *  (Optionally) allows pre-selecting and disabling certain columns for\n     *      each row control.\n     *\n     *  Construct by selecting a peek table to be used with jQuery and\n     *      calling 'peekColumnSelector' with options.\n     *  Options must include a 'controls' array and can include other options\n     *      listed below.\n     *  @example:\n     *  $( 'pre.peek' ).peekColumnSelector({\n     *          columnNames : [\"Chromosome\", \"Start\", \"Base\", \"\", \"\", \"Qual\" ],\n     *          controls : [\n     *              { label: 'X Column',  id: 'xColumn' },\n     *              { label: 'Y Column',  id: 'yColumn', selected: 2 },\n     *              { label: 'ID Column', id: 'idColumn', selected: 4, disabled: [ 1, 5 ] },\n     *              { label: 'Heatmap',   id: 'heatmap', selected: [ 2, 4 ], disabled: [ 0, 1 ], multiselect: true,\n     *                selectedText: 'Included', unselectedText: 'Excluded' }\n     *          ],\n     *          renameColumns       : true,\n     *          hideCommentRows     : true,\n     *          includePrompts      : true,\n     *          topLeftContent      : 'Data sample:'\n     *      }).on( 'peek-column-selector.change', function( ev, selection ){\n     *          console.info( 'new selection:', selection );\n     *          //{ yColumn: 2 }\n     *      }).on( 'peek-column-selector.rename', function( ev, names ){\n     *          console.info( 'column names', names );\n     *          //[ 'Bler', 'Start', 'Base', '', '', 'Qual' ]\n     *      });\n     *\n     *  An event is fired when column selection is changed and the event\n     *      is passed an object in the form: { the row id : the new selection value }.\n     *  An event is also fired when the table headers are re-named and\n     *      is passed the new array of column names.\n     */\n\n/** option defaults */\nvar defaults = {\n    /** does this control allow renaming headers? */\n    renameColumns: false,\n    /** does this control allow renaming headers? */\n    columnNames: [],\n    /** the comment character used by the peek's datatype */\n    commentChar: \"#\",\n    /** should comment rows be shown or hidden in the peek */\n    hideCommentRows: false,\n    /** should a column of row control prompts be used */\n    includePrompts: true,\n    /** what is the content of the top left cell (often a title) */\n    topLeftContent: \"Columns:\"\n};\n\nvar /** class added to the pre.peek element (to allow css on just the control) */\nPEEKCONTROL_CLASS = \"peek-column-selector\";\n\nvar /** the string of the event fired when a control row changes */\nCHANGE_EVENT = \"peek-column-selector.change\";\n\nvar /** the string of the event fired when a column is renamed */\nRENAME_EVENT = \"peek-column-selector.rename\";\n\nvar /** class added to the control rows */\nROW_CLASS = \"control\";\n\nvar /** class added to the left-hand cells that serve as row prompts */\nPROMPT_CLASS = \"control-prompt\";\n\nvar /** class added to selected _cells_/tds */\nSELECTED_CLASS = \"selected\";\n\nvar /** class added to disabled/un-clickable cells/tds */\nDISABLED_CLASS = \"disabled\";\n\nvar /** class added to the clickable surface within a cell to select it */\nBUTTON_CLASS = \"button\";\n\nvar /** class added to peek table header (th) cells to indicate they can be clicked and are renamable */\nRENAMABLE_HEADER_CLASS = \"renamable-header\";\n\nvar /** the data key used for each cell to store the column index ('data-...') */\nCOLUMN_INDEX_DATA_KEY = \"column-index\";\n\nvar /** renamable header data key used to store the column name (w/o the number and dot: '1.Bler') */\nCOLUMN_NAME_DATA_KEY = \"column-name\";\n\n//TODO: not happy with pure functional here - rows should polymorph (multi, single, etc.)\n//TODO: needs clean up, move handlers to outer scope\n\n// ........................................................................\n/** validate the control data sent in for each row */\nfunction validateControl(control) {\n    if (control.disabled && jQuery.type(control.disabled) !== \"array\") {\n        throw new Error(`\"disabled\" must be defined as an array of indeces: ${JSON.stringify(control)}`);\n    }\n    if (control.multiselect && control.selected && jQuery.type(control.selected) !== \"array\") {\n        throw new Error(`Mulitselect rows need an array for \"selected\": ${JSON.stringify(control)}`);\n    }\n    if (!control.label || !control.id) {\n        throw new Error(`Peek controls need a label and id for each control row: ${JSON.stringify(control)}`);\n    }\n    if (control.disabled && control.disabled.indexOf(control.selected) !== -1) {\n        throw new Error(`Selected column is in the list of disabled columns: ${JSON.stringify(control)}`);\n    }\n    return control;\n}\n\n/** build the inner control surface (i.e. button-like) */\nfunction buildButton(control, columnIndex) {\n    return $(\"<div/>\")\n        .addClass(BUTTON_CLASS)\n        .text(control.label);\n}\n\n/** build the basic (shared) cell structure */\nfunction buildControlCell(control, columnIndex) {\n    var $td = $(\"<td/>\")\n        .html(buildButton(control, columnIndex))\n        .attr(`data-${COLUMN_INDEX_DATA_KEY}`, columnIndex);\n\n    // disable if index in disabled array\n    if (control.disabled && control.disabled.indexOf(columnIndex) !== -1) {\n        $td.addClass(DISABLED_CLASS);\n    }\n    return $td;\n}\n\n/** set the text of the control based on selected/un */\nfunction setSelectedText($cell, control, columnIndex) {\n    var $button = $cell.children(`.${BUTTON_CLASS}`);\n    if ($cell.hasClass(SELECTED_CLASS)) {\n        $button.html(control.selectedText !== undefined ? control.selectedText : control.label);\n    } else {\n        $button.html(control.unselectedText !== undefined ? control.unselectedText : control.label);\n    }\n}\n\n/** build a cell for a row that only allows one selection */\nfunction buildSingleSelectCell(control, columnIndex) {\n    // only one selection - selected is single index\n    var $cell = buildControlCell(control, columnIndex);\n    if (control.selected === columnIndex) {\n        $cell.addClass(SELECTED_CLASS);\n    }\n    setSelectedText($cell, control, columnIndex);\n\n    // only add the handler to non-disabled controls\n    if (!$cell.hasClass(DISABLED_CLASS)) {\n        $cell.click(function selectClick(ev) {\n            var $cell = $(this);\n            // don't re-select or fire event if already selected\n            if (!$cell.hasClass(SELECTED_CLASS)) {\n                // only one can be selected - remove selected on all others, add it here\n                var $otherSelected = $cell\n                    .parent()\n                    .children(`.${SELECTED_CLASS}`)\n                    .removeClass(SELECTED_CLASS);\n                $otherSelected.each(function() {\n                    setSelectedText($(this), control, columnIndex);\n                });\n\n                $cell.addClass(SELECTED_CLASS);\n                setSelectedText($cell, control, columnIndex);\n\n                // fire the event from the table itself, passing the id and index of selected\n                var eventData = {};\n\n                var key = $cell.parent().attr(\"id\");\n                var val = $cell.data(COLUMN_INDEX_DATA_KEY);\n                eventData[key] = val;\n                $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n            }\n        });\n    }\n    return $cell;\n}\n\n/** build a cell for a row that allows multiple selections */\nfunction buildMultiSelectCell(control, columnIndex) {\n    var $cell = buildControlCell(control, columnIndex);\n    // multiple selection - selected is an array\n    if (control.selected && control.selected.indexOf(columnIndex) !== -1) {\n        $cell.addClass(SELECTED_CLASS);\n    }\n    setSelectedText($cell, control, columnIndex);\n\n    // only add the handler to non-disabled controls\n    if (!$cell.hasClass(DISABLED_CLASS)) {\n        $cell.click(function multiselectClick(ev) {\n            var $cell = $(this);\n            // can be more than one selected - toggle selected on this cell\n            $cell.toggleClass(SELECTED_CLASS);\n            setSelectedText($cell, control, columnIndex);\n            var selectedColumnIndeces = $cell\n                .parent()\n                .find(`.${SELECTED_CLASS}`)\n                .map((i, e) => $(e).data(COLUMN_INDEX_DATA_KEY));\n\n            // fire the event from the table itself, passing the id and index of selected\n            var eventData = {};\n\n            var key = $cell.parent().attr(\"id\");\n            var val = jQuery.makeArray(selectedColumnIndeces);\n            eventData[key] = val;\n            $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n        });\n    }\n    return $cell;\n}\n\n/** iterate over columns in peek and create a control for each */\nfunction buildControlCells(count, control) {\n    var $cells = [];\n    // build a control for each column - using a build fn based on control\n    for (var columnIndex = 0; columnIndex < count; columnIndex += 1) {\n        $cells.push(\n            control.multiselect\n                ? buildMultiSelectCell(control, columnIndex)\n                : buildSingleSelectCell(control, columnIndex)\n        );\n    }\n    return $cells;\n}\n\n/** build a row of controls for the peek */\nfunction buildControlRow(cellCount, control, includePrompts) {\n    var $controlRow = $(\"<tr/>\")\n        .attr(\"id\", control.id)\n        .addClass(ROW_CLASS);\n    if (includePrompts) {\n        var $promptCell = $(\"<td/>\")\n            .addClass(PROMPT_CLASS)\n            .text(`${control.label}:`);\n        $controlRow.append($promptCell);\n    }\n    $controlRow.append(buildControlCells(cellCount, control));\n    return $controlRow;\n}\n\n// ........................................................................\n/** add to the peek, using options for configuration, return the peek */\nfunction peekColumnSelector(options) {\n    options = jQuery.extend(true, {}, defaults, options);\n\n    var $peek = $(this).addClass(PEEKCONTROL_CLASS);\n    var $peektable = $peek.find(\"table\");\n\n    var // get the size of the tables - width and height, number of comment rows\n    columnCount = $peektable.find(\"th\").length;\n\n    var rowCount = $peektable.find(\"tr\").length;\n\n    var // get the rows containing text starting with the comment char (also make them grey)\n    $commentRows = $peektable.find(\"td[colspan]\").map(function(e, i) {\n        var $this = $(this);\n        if ($this.text() && $this.text().match(new RegExp(`^${options.commentChar}`))) {\n            return $(this)\n                .css(\"color\", \"grey\")\n                .parent()\n                .get(0);\n        }\n        return null;\n    });\n\n    // should comment rows in the peek be hidden?\n    if (options.hideCommentRows) {\n        $commentRows.hide();\n        rowCount -= $commentRows.length;\n    }\n    //console.debug( 'rowCount:', rowCount, 'columnCount:', columnCount, '$commentRows:', $commentRows );\n\n    // should a first column of control prompts be added?\n    if (options.includePrompts) {\n        var $topLeft = $(\"<th/>\")\n            .addClass(\"top-left\")\n            .text(options.topLeftContent)\n            .attr(\"rowspan\", rowCount);\n        $peektable\n            .find(\"tr\")\n            .first()\n            .prepend($topLeft);\n    }\n\n    // save either the options column name or the parsed text of each column header in html5 data attr and text\n    var $headers = $peektable.find(\"th:not(.top-left)\").each(function(i, e) {\n        var $this = $(this);\n\n        var // can be '1.name' or '1'\n        text = $this.text().replace(/^\\d+\\.*/, \"\");\n\n        var name = options.columnNames[i] || text;\n        $this.attr(`data-${COLUMN_NAME_DATA_KEY}`, name).text(i + 1 + (name ? `.${name}` : \"\"));\n    });\n\n    // allow renaming of columns when the header is clicked\n    if (options.renameColumns) {\n        $headers.addClass(RENAMABLE_HEADER_CLASS).click(function renameColumn() {\n            // prompt for new name\n            var $this = $(this);\n\n            var index = $this.index() + (options.includePrompts ? 0 : 1);\n            var prevName = $this.data(COLUMN_NAME_DATA_KEY);\n            var newColumnName = prompt(\"New column name:\", prevName);\n            if (newColumnName !== null && newColumnName !== prevName) {\n                // set the new text and data\n                $this\n                    .text(index + (newColumnName ? `.${newColumnName}` : \"\"))\n                    .data(COLUMN_NAME_DATA_KEY, newColumnName)\n                    .attr(\"data-\", COLUMN_NAME_DATA_KEY, newColumnName);\n                // fire event for new column names\n                var columnNames = jQuery.makeArray(\n                    $this\n                        .parent()\n                        .children(\"th:not(.top-left)\")\n                        .map(function() {\n                            return $(this).data(COLUMN_NAME_DATA_KEY);\n                        })\n                );\n                $this.parents(\".peek\").trigger(RENAME_EVENT, columnNames);\n            }\n        });\n    }\n\n    // build a row for each control\n    options.controls.forEach((control, i) => {\n        validateControl(control);\n        var $controlRow = buildControlRow(columnCount, control, options.includePrompts);\n        $peektable.find(\"tbody\").append($controlRow);\n    });\n    return this;\n}\n\n// ........................................................................\n// as jq plugin\njQuery.fn.extend({\n    peekColumnSelector: function $peekColumnSelector(options) {\n        return this.map(function() {\n            return peekColumnSelector.call(this, options);\n        });\n    }\n});\n"]}