{"version":3,"sources":["ui/filter-control.js"],"names":["dropDownSelect","options","selected","_","isEmpty","$select","$","join","length","find","append","map","option","selectThis","newSelection","click","event","$this","this","parents","text","trigger","filters","$element","element","FilterControl","currFilter","DATA_KEY","prototype","init","render","empty","_renderKeySelect","keys","key","_renderOpSelect","_renderValueInput","filterControl","_triggerChange","$keySelect","filter","addClass","on","selection","__renderOpSelect","ops","$opSelect","$valueSelect","values","$value","op","nonOptionsArgs","value","val","data","_jquery2","default","fn","extend","makeArray","arguments","slice","type","apply"],"mappings":"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","file":"../../scripts/ui/filter-control.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n//==============================================================================\n/**\n\t *  Template function that produces a bootstrap dropdown to replace the\n\t *  vanilla HTML select input. Pass in an array of options and an initial selection:\n\t *  $( '.my-div' ).append( dropDownSelect( [ 'option1', 'option2' ], 'option2' );\n\t *\n\t *  When the user changes the selected option a 'change.dropdown-select' event will\n\t *  fire with both the jq event and the new selection text as arguments.\n\t *\n\t *  Get the currently selected choice using:\n\t *  var userChoice = $( '.my-div .dropdown-select .dropdown-select-selected' ).text();\n\t *\n\t */\nfunction dropDownSelect(options, selected) {\n    // replacement for vanilla select element using bootstrap dropdowns instead\n    selected = selected || (!_.isEmpty(options) ? options[0] : \"\");\n    var $select = $(\n        [\n            '<div class=\"dropdown-select btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default\">',\n            `<span class=\"dropdown-select-selected\">${selected}</span>`,\n            \"</button>\",\n            \"</div>\"\n        ].join(\"\\n\")\n    );\n\n    // if there's only one option, do not style/create as buttons, dropdown - use simple span\n    // otherwise, a dropdown displaying the current selection\n    if (options && options.length > 1) {\n        $select\n            .find(\"button\")\n            .addClass(\"dropdown-toggle\")\n            .attr(\"data-toggle\", \"dropdown\")\n            .append(' <span class=\"caret\"></span>');\n        $select.append(\n            [\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                _.map(options, option => ['<li><a href=\"javascript:void(0)\">', option, \"</a></li>\"].join(\"\")).join(\n                    \"\\n\"\n                ),\n                \"</ul>\"\n            ].join(\"\\n\")\n        );\n    }\n\n    // trigger 'change.dropdown-select' when a new selection is made using the dropdown\n    function selectThis(event) {\n        var $this = $(this);\n        var $select = $this.parents(\".dropdown-select\");\n        var newSelection = $this.text();\n        $select.find(\".dropdown-select-selected\").text(newSelection);\n        $select.trigger(\"change.dropdown-select\", newSelection);\n    }\n\n    $select.find(\"a\").click(selectThis);\n    return $select;\n}\n\n//==============================================================================\n/**\n     *  Creates a three part bootstrap button group (key, op, value) meant to\n     *  allow the user control of filters (e.g. { key: 'name', op: 'contains', value: 'my_history' })\n     *\n     *  Each field uses a dropDownSelect (from ui.js) to allow selection\n     *  (with the 'value' field appearing as an input when set to do so).\n     *\n     *  Any change or update in any of the fields will trigger a 'change.filter-control'\n     *  event which will be passed an object containing those fields (as the example above).\n     *\n     *  Pass in an array of possible filter objects to control what the user can select.\n     *  Each filter object should have:\n     *      key : generally the attribute name on which to filter something\n     *      ops : an array of 1 or more filter operations (e.g. [ 'is', '<', 'contains', '!=' ])\n     *      values (optional) : an array of possible values for the filter (e.g. [ 'true', 'false' ])\n     *  @example:\n     *  $( '.my-div' ).filterControl({\n     *      filters : [\n     *          { key: 'name',    ops: [ 'is exactly', 'contains' ] }\n     *          { key: 'deleted', ops: [ 'is' ], values: [ 'true', 'false' ] }\n     *      ]\n     *  });\n     *  // after initialization, you can prog. get the current value using:\n     *  $( '.my-div' ).filterControl( 'val' )\n     *\n     */\nfunction FilterControl(element, options) {\n    return this.init(element, options);\n}\n/** the data key that this object will be stored under in the DOM element */\nFilterControl.prototype.DATA_KEY = \"filter-control\";\n\n/** parses options, sets up instance vars, and does initial render */\nFilterControl.prototype.init = function _init(element, options) {\n    options = options || { filters: [] };\n    this.$element = $(element).addClass(\"filter-control btn-group\");\n    this.options = jQuery.extend(true, {}, this.defaults, options);\n\n    this.currFilter = this.options.filters[0];\n    return this.render();\n};\n\n/** render (or re-render) the controls on the element */\nFilterControl.prototype.render = function _render() {\n    this.$element.empty().append([this._renderKeySelect(), this._renderOpSelect(), this._renderValueInput()]);\n    return this;\n};\n\n/** render the key dropDownSelect, bind a change event to it, and return it */\nFilterControl.prototype._renderKeySelect = function __renderKeySelect() {\n    var filterControl = this;\n    var keys = this.options.filters.map(filter => filter.key);\n    this.$keySelect = dropDownSelect(keys, this.currFilter.key)\n        .addClass(\"filter-control-key\")\n        .on(\"change.dropdown-select\", (event, selection) => {\n            filterControl.currFilter = _.findWhere(filterControl.options.filters, { key: selection });\n            // when the filter/key changes, re-render the control entirely\n            filterControl.render()._triggerChange();\n        });\n    return this.$keySelect;\n};\n\n/** render the op dropDownSelect, bind a change event to it, and return it */\nFilterControl.prototype._renderOpSelect = function __renderOpSelect() {\n    var filterControl = this;\n    var ops = this.currFilter.ops;\n    //TODO: search for currOp in avail. ops: use that for selected if there; otherwise: first op\n    this.$opSelect = dropDownSelect(ops, ops[0])\n        .addClass(\"filter-control-op\")\n        .on(\"change.dropdown-select\", (event, selection) => {\n            filterControl._triggerChange();\n        });\n    return this.$opSelect;\n};\n\n/** render the value control, bind a change event to it, and return it */\nFilterControl.prototype._renderValueInput = function __renderValueInput() {\n    var filterControl = this;\n    // if a values attribute is prov. on the filter - make this a dropdown; otherwise, use an input\n    if (this.currFilter.values) {\n        this.$valueSelect = dropDownSelect(\n            this.currFilter.values,\n            this.currFilter.values[0]\n        ).on(\"change.dropdown-select\", (event, selection) => {\n            filterControl._triggerChange();\n        });\n    } else {\n        //TODO: allow setting a value type (mainly for which html5 input to use: range, number, etc.)\n        this.$valueSelect = $(\"<input/>\")\n            .addClass(\"form-control\")\n            .on(\"change\", (event, value) => {\n                filterControl._triggerChange();\n            });\n    }\n    this.$valueSelect.addClass(\"filter-control-value\");\n    return this.$valueSelect;\n};\n\n/** return the current state/setting for the filter as a three key object: key, op, value */\nFilterControl.prototype.val = function _val() {\n    var key = this.$element.find(\".filter-control-key .dropdown-select-selected\").text();\n\n    var op = this.$element.find(\".filter-control-op .dropdown-select-selected\").text();\n\n    var // handle either a dropdown or plain input\n    $value = this.$element.find(\".filter-control-value\");\n\n    var value = $value.hasClass(\"dropdown-select\") ? $value.find(\".dropdown-select-selected\").text() : $value.val();\n\n    return { key: key, op: op, value: value };\n};\n\n// single point of change for change event\nFilterControl.prototype._triggerChange = function __triggerChange() {\n    this.$element.trigger(\"change.filter-control\", this.val());\n};\n\n// as jq plugin\njQuery.fn.extend({\n    filterControl: function $filterControl(options) {\n        var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n        return this.map(function() {\n            var $this = $(this);\n            var data = $this.data(FilterControl.prototype.DATA_KEY);\n\n            if (jQuery.type(options) === \"object\") {\n                data = new FilterControl($this, options);\n                $this.data(FilterControl.prototype.DATA_KEY, data);\n            }\n            if (data && jQuery.type(options) === \"string\") {\n                var fn = data[options];\n                if (jQuery.type(fn) === \"function\") {\n                    return fn.apply(data, nonOptionsArgs);\n                }\n            }\n            return this;\n        });\n    }\n});\n"]}