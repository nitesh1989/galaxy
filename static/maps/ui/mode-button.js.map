{"version":3,"sources":["ui/mode-button.js"],"names":["ModeButton","element","options","this","currModeIndex","_init","$","prototype","DATA_KEY","defaults","switchModesOnClick","$element","Error","modeButton","modes","html","_incModeIndex","length","_getModeIndex","modeKey","i","_setModeByIndex","index","newMode","currentMode","current","mode","getMode","reset","initialMode","callModeFn","modeFn","onclick","get","type","undefined","map","$this","data","button","fnName","$first","apply","makeArray","arguments","slice"],"mappings":"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","file":"../../scripts/ui/mode-button.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n\n/** Multi 'mode' button (or any element really) that changes the html\n     *      contents of itself when clicked. Pass in an ordered list of\n     *      objects with 'html' and (optional) onclick functions.\n     *\n     *      When clicked in a particular node, the onclick function will\n     *      be called (with the element as this) and the element will\n     *      switch to the next mode, replacing its html content with\n     *      that mode's html.\n     *\n     *      If there is no next mode, the element will switch back to\n     *      the first mode.\n     * @example:\n     *     $( '.myElement' ).modeButton({\n     *         modes : [\n     *             {\n     *                 mode: 'bler',\n     *                 html: '<h5>Bler</h5>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'red' );\n     *                 }\n     *             },\n     *             {\n     *                 mode: 'bloo',\n     *                 html: '<h4>Bloo</h4>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'blue' );\n     *                 }\n     *             },\n     *             {\n     *                 mode: 'blah',\n     *                 html: '<h3>Blah</h3>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'grey' );\n     *                 }\n     *             },\n     *         ]\n     *     });\n     *     $( '.myElement' ).modeButton( 'callModeFn', 'bler' );\n     */\n/** constructor */\nfunction ModeButton(element, options) {\n    this.currModeIndex = 0;\n    return this._init(element, options);\n}\n\n/** html5 data key to store this object inside an element */\nModeButton.prototype.DATA_KEY = \"mode-button\";\n/** default options */\nModeButton.prototype.defaults = {\n    switchModesOnClick: true\n};\n\n// ---- private interface\n/** set up options, intial mode, and the click handler */\nModeButton.prototype._init = function _init(element, options) {\n    //console.debug( 'ModeButton._init:', element, options );\n    options = options || {};\n    this.$element = $(element);\n    this.options = $.extend(true, {}, this.defaults, options);\n    if (!options.modes) {\n        throw new Error('ModeButton requires a \"modes\" array');\n    }\n\n    var modeButton = this;\n    this.$element.click(function _ModeButtonClick(event) {\n        // call the curr mode fn\n        modeButton.callModeFn();\n        // inc the curr mode index\n        if (modeButton.options.switchModesOnClick) {\n            modeButton._incModeIndex();\n        }\n        // set the element html\n        $(this).html(modeButton.options.modes[modeButton.currModeIndex].html);\n    });\n    return this.reset();\n};\n/** increment the mode index to the next in the array, looping back to zero if at the last */\nModeButton.prototype._incModeIndex = function _incModeIndex() {\n    this.currModeIndex += 1;\n    if (this.currModeIndex >= this.options.modes.length) {\n        this.currModeIndex = 0;\n    }\n    return this;\n};\n/** get the mode index in the modes array for the given key (mode name) */\nModeButton.prototype._getModeIndex = function _getModeIndex(modeKey) {\n    for (var i = 0; i < this.options.modes.length; i += 1) {\n        if (this.options.modes[i].mode === modeKey) {\n            return i;\n        }\n    }\n    throw new Error(`mode not found: ${modeKey}`);\n};\n/** set the current mode to the one with the given index and set button html */\nModeButton.prototype._setModeByIndex = function _setModeByIndex(index) {\n    var newMode = this.options.modes[index];\n    if (!newMode) {\n        throw new Error(`mode index not found: ${index}`);\n    }\n    this.currModeIndex = index;\n    if (newMode.html) {\n        this.$element.html(newMode.html);\n    }\n    return this;\n};\n\n// ---- public interface\n/** get the current mode object (not just the mode name) */\nModeButton.prototype.currentMode = function currentMode() {\n    return this.options.modes[this.currModeIndex];\n};\n/** return the mode key of the current mode */\nModeButton.prototype.current = function current() {\n    // sugar for returning mode name\n    return this.currentMode().mode;\n};\n/** get the mode with the given modeKey or the current mode if modeKey is undefined */\nModeButton.prototype.getMode = function getMode(modeKey) {\n    if (!modeKey) {\n        return this.currentMode();\n    }\n    return this.options.modes[this._getModeIndex(modeKey)];\n};\n/** T/F if the button has the given mode */\nModeButton.prototype.hasMode = function hasMode(modeKey) {\n    try {\n        return !!this.getMode(modeKey);\n    } catch (err) {}\n    return false;\n};\n/** set the current mode to the mode with the given name */\nModeButton.prototype.setMode = function setMode(modeKey) {\n    return this._setModeByIndex(this._getModeIndex(modeKey));\n};\n/** reset to the initial mode */\nModeButton.prototype.reset = function reset() {\n    this.currModeIndex = 0;\n    if (this.options.initialMode) {\n        this.currModeIndex = this._getModeIndex(this.options.initialMode);\n    }\n    return this._setModeByIndex(this.currModeIndex);\n};\n/** manually call the click handler of the given mode */\nModeButton.prototype.callModeFn = function callModeFn(modeKey) {\n    var modeFn = this.getMode(modeKey).onclick;\n    if (modeFn && $.type(modeFn === \"function\")) {\n        // call with the element as context (std jquery pattern)\n        return modeFn.call(this.$element.get(0));\n    }\n    return undefined;\n};\n\n// as jq plugin\n$.fn.modeButton = function $modeButton(options) {\n    if (!this.length) {\n        return this;\n    }\n\n    //TODO: does map still work with jq multi selection (i.e. $( '.class-for-many-btns' ).modeButton)?\n    if ($.type(options) === \"object\") {\n        return this.map(function() {\n            var $this = $(this);\n            $this.data(\"mode-button\", new ModeButton($this, options));\n            return this;\n        });\n    }\n\n    var $first = $(this[0]);\n    var button = $first.data(\"mode-button\");\n\n    if (!button) {\n        throw new Error(\"modeButton needs an options object or string name of a function\");\n    }\n\n    if (button && $.type(options) === \"string\") {\n        var fnName = options;\n        if (button && $.type(button[fnName]) === \"function\") {\n            return button[fnName].apply(button, $.makeArray(arguments).slice(1));\n        }\n    }\n    return button;\n};\n"]}