{"version":3,"sources":["ui/popupmenu.js"],"names":["make_popupmenu","button_element","initial_options","$","data","element_menu_exists","bind","e","setTimeout","attr","options","_","size","appendTo","menu_element","each","k","v","action","append","url","html","addClass","x","pageX","wrapper","width","Math","window","min","document","css","top","close_popup","el","remove","length","frame_id","frames","make_popup_menus","parent","menu","this","find","link","link_dom","confirmtext","href","getAttribute","target","text","event","confirm","open","click","preventDefault","box","stopPropagation"],"mappings":"sEAaA,SAASA,EAAeC,EAAgBC,GAVxC,IAAIC,EAAJF,EAAAG,KAAA,gBAeIH,EAAeG,KAAK,eAAgBF,GAXxCG,GAkBIJ,EAAeK,KAAK,mBAAoB,SAAAC,GAgEpC,OA5ERJ,EAAA,oBAAwBF,SAiBhBO,WAAW,WAZfP,IAAAA,EAAoBE,EAAAA,iCAApBF,EAAAQ,KAAA,MAAoB,gBAeRC,EAAUT,EAAeG,KAAK,gBAb1CO,EAAAC,KAAAF,IAAA,GACIL,EAAAA,wBAAqBQ,SAAAC,GAExBX,EAAAY,KAAAL,EAAA,SAAAM,EAAAC,GAeW,GAAIA,EAAG,CAZf,IAAAC,EAAAD,EAAAC,QAAAD,EACEH,EAAFK,OAegBhB,EAAE,aAAagB,OAb/BhB,EAAA,OACWM,KAAM,OAAAQ,EAAAG,KACbC,KAAAL,GACIF,MAAeX,UAIlBW,EAAAK,OACMT,EAAAA,aACIY,SAAA,QACHH,OAAAhB,EAAA,oBAAAkB,KAAAL,OAWAF,IAAAA,EAAAA,EAAAA,uFAKHK,OAAAL,GAlBLD,SAAA,QAwBIU,EAAIhB,EAAEiB,MAAQC,EAAQC,QAAU,EAApCH,EAAAI,KAAIJ,IAAIhB,EAAEiB,EAAAA,UAAQC,aAAlBtB,EAAAyB,QAAAF,QAAAvB,EAAAsB,GAAAC,QAAA,GACAH,EAAAA,KAAII,IAAKE,EAAL1B,EAAA2B,UAAcA,aAAF,GAGhBL,EAAQM,KAARN,IAAAA,EAAAA,MACIO,KAAAA,KADQ,IAMhBxB,WAAW,WAEP,IAAAyB,EAAA,SAAAC,GACA/B,EAAA+B,GAAID,KAAAA,oBAAAA,WACA9B,EAAE+B,oBAASC,SACPhC,EAAAA,OAAE,wBAGT8B,EALD9B,EAAAyB,OAAAE,WAMAG,EAAAA,EAAAA,OAAcL,IAAOE,WACrBG,IAAAA,IAAAA,EAAcL,OAAOI,IAAIF,OAAzBM,OAAqCC,KAGjCJ,EADA9B,EAAAyB,OAAAI,IAAAM,OAAAD,GAAAP,YAGH,KAGE,yDAtFX3B,uDAAAA,mBAoKAoC,eAAAA,EAFWA,iBA7Df,SAA0BC,GAEtBA,EAAAA,GAAAV,SACAU,EAAAA,GACArC,KAAEqC,kBAGMzB,KAAA,WACA,IAAI0B,KAAAA,EAAOtC,EAAEuC,MAITD,EAAAE,KAAIC,KAAOzC,KAAE,WACb,IAAI0C,EAAAA,EAAAA,MACAC,EAAAA,EAAcD,IAAAA,GACdE,EAAOF,EAASG,aAApB,WACIC,EAAAA,EAASJ,aAASG,QAAlBC,EAASJ,EAASG,aAAa,UAO3B5B,EAAAA,EADmB8B,QAFvBxC,GAIIQ,IAAAA,EACIA,OAAA,SAAAiC,GAEI,IAAAL,GAAAM,QAAAN,GAAA,CAGIlB,GAAAA,EADJ,OAEIA,OAAOyB,KAAPN,EAAAE,IACG,EAGNL,EAAAU,aAGJH,EAAAI,mBAjBN,OAuBX,IAAIC,EAAMrD,EAAEqC,GAAQG,KAAV,IAAmBF,EAAKhC,KAAK,cAKnCF,EAAAA,KAAEkD,KAAAA,KAAAA,QAAmB,SAAAlD,GADzB,OAEIA,EAAAkD,mBAFJ,IAOAD,EAAaA,EAAb9C,GACA+B,EAAAA,SAAA,SApDRA,EAAAN","file":"../../scripts/ui/popupmenu.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n\n// ============================================================================\n// TODO: unify popup menus and/or eliminate this\n/**\n * Sets up popupmenu rendering and binds options functions to the appropriate links.\n * initial_options is a dict with text describing the option pointing to either (a) a\n * function to perform; or (b) another dict with two required keys, 'url' and 'action' (the\n * function to perform. (b) is useful for exposing the underlying URL of the option.\n */\nfunction make_popupmenu(button_element, initial_options) {\n    /*  Use the $.data feature to store options with the link element.\n        This allows options to be changed at a later time\n    */\n    var element_menu_exists = button_element.data(\"menu_options\");\n    button_element.data(\"menu_options\", initial_options);\n\n    // If element already has menu, nothing else to do since HTML and actions are already set.\n    if (element_menu_exists) {\n        return;\n    }\n\n    button_element.bind(\"click.show_popup\", e => {\n        // Close existing visible menus\n        $(\".popmenu-wrapper\").remove();\n\n        // Need setTimeouts so clicks don't interfere with each other\n        setTimeout(() => {\n            // Dynamically generate the wrapper holding all the selectable options of the menu.\n            var menu_element = $(`<ul class='dropdown-menu' id='${button_element.attr(\"id\")}-menu'></ul>`);\n            var options = button_element.data(\"menu_options\");\n            if (_.size(options) <= 0) {\n                $(\"<li>No Options.</li>\").appendTo(menu_element);\n            }\n            $.each(options, (k, v) => {\n                if (v) {\n                    // Action can be either an anonymous function and a mapped dict.\n                    var action = v.action || v;\n                    menu_element.append(\n                        $(\"<li></li>\").append(\n                            $(\"<a>\")\n                                .attr(\"href\", v.url)\n                                .html(k)\n                                .click(action)\n                        )\n                    );\n                } else {\n                    menu_element.append(\n                        $(\"<li></li>\")\n                            .addClass(\"head\")\n                            .append($(\"<a href='#'></a>\").html(k))\n                    );\n                }\n            });\n            var wrapper = $(\"<div class='popmenu-wrapper' style='position: absolute;left: 0; top: -1000;'></div>\")\n                .append(menu_element)\n                .appendTo(\"body\");\n\n            var x = e.pageX - wrapper.width() / 2;\n            x = Math.min(x, $(document).scrollLeft() + $(window).width() - $(wrapper).width() - 5);\n            x = Math.max(x, $(document).scrollLeft() + 5);\n\n            wrapper.css({\n                top: e.pageY,\n                left: x\n            });\n        }, 10);\n\n        setTimeout(() => {\n            // Bind click event to current window and all frames to remove any visible menus\n            // Bind to document object instead of window object for IE compat\n            var close_popup = el => {\n                $(el).bind(\"click.close_popup\", () => {\n                    $(\".popmenu-wrapper\").remove();\n                    el.unbind(\"click.close_popup\");\n                });\n            };\n            close_popup($(window.document)); // Current frame\n            close_popup($(window.top.document)); // Parent frame\n            for (var frame_id = window.top.frames.length; frame_id--; ) {\n                // Sibling frames\n                var frame = $(window.top.frames[frame_id].document);\n                close_popup(frame);\n            }\n        }, 50);\n\n        return false;\n    });\n}\n\n/**\n *  Convert two seperate (often adjacent) divs into galaxy popupmenu\n *  - div 1 contains a number of anchors which become the menu options\n *  - div 1 should have a 'popupmenu' attribute\n *  - this popupmenu attribute contains the id of div 2\n *  - div 2 becomes the 'face' of the popupmenu\n *\n *  NOTE: make_popup_menus finds and operates on all divs with a popupmenu attr (no need to point it at something)\n *          but (since that selector searches the dom on the page), you can send a parent in\n *  NOTE: make_popup_menus, and make_popupmenu are horrible names\n */\nfunction make_popup_menus(parent) {\n    // find all popupmenu menu divs (divs that contains anchors to be converted to menu options)\n    //  either in the parent or the document if no parent passed\n    parent = parent || document;\n    $(parent)\n        .find(\"div[popupmenu]\")\n        .each(function() {\n            var options = {};\n            var menu = $(this);\n\n            // find each anchor in the menu, convert them into an options map: { a.text : click_function }\n            menu.find(\"a\").each(function() {\n                var link = $(this);\n                var link_dom = link.get(0);\n                var confirmtext = link_dom.getAttribute(\"confirm\");\n                var href = link_dom.getAttribute(\"href\");\n                var target = link_dom.getAttribute(\"target\");\n\n                // no href - no function (gen. a label)\n                if (!href) {\n                    options[link.text()] = null;\n                } else {\n                    options[link.text()] = {\n                        url: href,\n                        action: function(event) {\n                            // if theres confirm text, send the dialog\n                            if (!confirmtext || confirm(confirmtext)) {\n                                // link.click() doesn't use target for some reason,\n                                // so manually do it here.\n                                if (target) {\n                                    window.open(href, target);\n                                    return false;\n                                } else {\n                                    // For all other links, do the default action.\n                                    link.click();\n                                }\n                            } else {\n                                event.preventDefault();\n                            }\n                        }\n                    };\n                }\n            });\n            // locate the element with the id corresponding to the menu's popupmenu attr\n            var box = $(parent).find(`#${menu.attr(\"popupmenu\")}`);\n\n            // For menus with clickable link text, make clicking on the link go through instead\n            // of activating the popup menu\n            box.find(\"a\").bind(\"click\", e => {\n                e.stopPropagation(); // Stop bubbling so clicking on the link goes through\n                return true;\n            });\n\n            // attach the click events and menu box building to the box element\n            make_popupmenu(box, options);\n            box.addClass(\"popup\");\n            menu.remove();\n        });\n}\n\n// ============================================================================\nexport default {\n    make_popupmenu: make_popupmenu,\n    make_popup_menus: make_popup_menus\n};\n"]}