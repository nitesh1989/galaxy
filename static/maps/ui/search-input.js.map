{"version":3,"sources":["ui/search-input.js"],"names":["searchInput","parentNode","options","placeholder","event","$","this","onclear","onfirstsearch","minSearchLen","escWillClear","oninit","search","clearSearchInput","searchTerms","$input","val","trigger","firstSearch","onsearch","name","classes","join","KEYCODE_ESC","KEYCODE_RETURN","$parentNode","defaults","initialVal","inputVal","_jquery2","default","type","find","toggle","extend","addClass","prepend","inputTemplate","keyup","preventDefault","which","length","call","_l","hide","tooltip","placement","window","s","fn","each"],"mappings":"6DAIuB,SAAvBA,EAAAC,EAAAC,GAqBQC,SAAAA,EAAaC,GACJC,EAJEC,MAKXC,SACAC,SAAAA,SAEAC,IAAAA,IACAC,QAAAA,qBACAC,OAVWT,EAAfK,UAeA,SAAAK,EAASC,EAAAA,GACL,IAAAC,EAGAC,OACKC,IAIRX,EAAAC,MAAAW,QAAA,gBAAAH,GAQwC,mBAA1BZ,EAAQM,eAAgCU,GANvDA,GAAA,EACAhB,EAASU,cAAcE,IAEfZ,EAAAiB,SAAON,GAKPX,SAAAA,IAEAA,OACH,4BACJA,EAAAkB,KAQO,kBANRlB,EAAAC,YACA,KACI,uBACAD,EACImB,QAUP,KAFO,MAIRC,KAAA,IA7DA,IAAIC,EAAc,GAXtBC,EAAA,GAaQC,EAAcpB,EAAEJ,GAXxBiB,GAAA,EAcQQ,GACAC,WAAY,GACZP,KAAM,SACNjB,YAAa,SACbkB,QAAS,GACTd,QAAS,aAXjBC,cAASR,KACLmB,SAAII,SAAcK,KAClBnB,aAAIe,EACJd,cAAIe,EACJd,OAAIO,cA6II,MAAOlB,WAAP6B,EAAAC,QAAAC,KAAA7B,IADJ,mBAECA,IAPRuB,EAAAO,KAAA,mBAAAC,SAlBOR,EAAYO,KAAK,iBAAiBC,UAS3BR,IAIkB,WAAzBI,EAAAC,QAAOC,KAAK7B,KACZA,EAAU2B,EAAAC,QAAOI,QAAO,KAAUR,EAAUxB,IAGzCuB,EAAYU,SAAS,gBAAgBC,SArE/B/B,EAJLgC,KAMKC,MAAM,SAASlC,GACZA,EAAMmC,MAAAA,WAGND,MAAA,SAAAlC,GAKI,GAJAA,EAAMoC,iBACN3B,EAAAA,kBAGAT,EAAAoC,QAAAjB,GAAArB,EAAAQ,aAEIN,EAAgBoB,KAAAA,KAAAA,OAGhBZ,CACH,IAAAE,EAAAT,EAAAC,MAAAU,OAKpBZ,EAAAoC,QAAAhB,GARwBtB,EAAQO,cAAgBK,EAAY2B,QAAUvC,EAAQO,eAW/EG,EAAA8B,KAAApC,KAAAF,EAAAU,MAEIE,IAAAd,EAAAyB,YAmBHtB,GAlBQ,iDAAkD,UAAWsC,EAAG,sBAAuB,aAAarB,KAoB7G,KAGIG,SAAAA,UAAiB,WACjBA,MAAAA,SAAArB,GACHS,EAAA6B,KAAApC,KAAAF,KAOIC,GACD,sDAAA,UAAAsC,EAAA,cAAA,aAAArB,KAAA,KAjBKsB,OAoBTC,SAAAC,UAAA,yEAlJAzC,EAAAA,EAAAA,QACAsC,EAAKI,OAAOJ,IAAO,SAAAK,GAAA,OAAKA,GA0J5BnB,EAAAC,QAAOmB,GAAGf,QACNlC,YAAa,SAAsBE,GAC/B,OAAOI,KAAK4C,KAAK,WACb,OAAOlD,EAAYM,KAAMJ","file":"../../scripts/ui/search-input.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\nvar _l = window._l || (s => s);\n\n//TODO: consolidate with tool menu functionality, use there\n\n/** searchInput: (jQuery plugin)\n     *      Creates a search input, a clear button, and loading indicator\n     *      within the selected node.\n     *\n     *      When the user either presses return or enters some minimal number\n     *      of characters, a callback is called. Pressing ESC when the input\n     *      is focused will clear the input and call a separate callback.\n     */\nfunction searchInput(parentNode, options) {\n    var KEYCODE_ESC = 27;\n    var KEYCODE_RETURN = 13;\n    var $parentNode = $(parentNode);\n    var firstSearch = true;\n\n    var defaults = {\n        initialVal: \"\",\n        name: \"search\",\n        placeholder: \"search\",\n        classes: \"\",\n        onclear: function() {},\n        onfirstsearch: null,\n        onsearch: function(inputVal) {},\n        minSearchLen: 0,\n        escWillClear: true,\n        oninit: function() {}\n    };\n\n    // .................................................................... input rendering and events\n    // visually clear the search, trigger an event, and call the callback\n    function clearSearchInput(event) {\n        var $input = $(this)\n            .parent()\n            .children(\"input\");\n        $input\n            .val(\"\")\n            .trigger(\"searchInput.clear\")\n            .blur();\n        options.onclear();\n    }\n\n    // search for searchTerms, trigger an event, call the appropo callback (based on whether this is the first)\n    function search(event, searchTerms) {\n        if (!searchTerms) {\n            return clearSearchInput();\n        }\n        $(this).trigger(\"search.search\", searchTerms);\n        if (typeof options.onfirstsearch === \"function\" && firstSearch) {\n            firstSearch = false;\n            options.onfirstsearch(searchTerms);\n        } else {\n            options.onsearch(searchTerms);\n        }\n    }\n\n    // .................................................................... input rendering and events\n    function inputTemplate() {\n        // class search-query is bootstrap 2.3 style that now lives in base.less\n        return [\n            '<input type=\"text\" name=\"',\n            options.name,\n            '\" placeholder=\"',\n            options.placeholder,\n            '\" ',\n            'class=\"search-query ',\n            options.classes,\n            '\" ',\n            \"/>\"\n        ].join(\"\");\n    }\n\n    // the search input that responds to keyboard events and displays the search value\n    function $input() {\n        return (\n            $(inputTemplate())\n                // select all text on a focus\n                .focus(function(event) {\n                    $(this).select();\n                })\n                // attach behaviors to esc, return if desired, search on some min len string\n                .keyup(function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    // esc key will clear if desired\n                    if (event.which === KEYCODE_ESC && options.escWillClear) {\n                        clearSearchInput.call(this, event);\n                    } else {\n                        var searchTerms = $(this).val();\n                        // return key or the search string len > minSearchLen (if not 0) triggers search\n                        if (\n                            event.which === KEYCODE_RETURN ||\n                            (options.minSearchLen && searchTerms.length >= options.minSearchLen)\n                        ) {\n                            search.call(this, event, searchTerms);\n                        }\n                    }\n                })\n                .val(options.initialVal)\n        );\n    }\n\n    // .................................................................... clear button rendering and events\n    // a button for clearing the search bar, placed on the right hand side\n    function $clearBtn() {\n        return $(\n            ['<span class=\"search-clear fa fa-times-circle\" ', 'title=\"', _l(\"clear search (esc)\"), '\"></span>'].join(\n                \"\"\n            )\n        )\n            .tooltip({ placement: \"bottom\" })\n            .click(function(event) {\n                clearSearchInput.call(this, event);\n            });\n    }\n\n    // .................................................................... loadingIndicator rendering\n    // a button for clearing the search bar, placed on the right hand side\n    function $loadingIndicator() {\n        return $(\n            ['<span class=\"search-loading fa fa-spinner fa-spin\" ', 'title=\"', _l(\"loading...\"), '\"></span>'].join(\"\")\n        )\n            .hide()\n            .tooltip({ placement: \"bottom\" });\n    }\n\n    // .................................................................... commands\n    // visually swap the load, clear buttons\n    function toggleLoadingIndicator() {\n        $parentNode.find(\".search-loading\").toggle();\n        $parentNode.find(\".search-clear\").toggle();\n    }\n\n    // .................................................................... init\n    // string command (not constructor)\n    if (jQuery.type(options) === \"string\") {\n        if (options === \"toggle-loading\") {\n            toggleLoadingIndicator();\n        }\n        return $parentNode;\n    }\n\n    // initial render\n    if (jQuery.type(options) === \"object\") {\n        options = jQuery.extend(true, {}, defaults, options);\n    }\n    //NOTE: prepended\n    return $parentNode.addClass(\"search-input\").prepend([$input(), $clearBtn(), $loadingIndicator()]);\n}\n\n// as jq plugin\njQuery.fn.extend({\n    searchInput: function $searchInput(options) {\n        return this.each(function() {\n            return searchInput(this, options);\n        });\n    }\n});\n"]}