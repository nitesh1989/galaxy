{"version":3,"sources":["ui/pagination.js"],"names":["Pagination","element","options","this","numPages","currPage","init","_make$Li","contents","$","join","prototype","DATA_KEY","defaults","startingPage","perPage","totalDataSize","$element","currDataSize","extend","Math","ceil","_init","_render","_renderPages","_scrollToActivePage","_renderPrevNext","pagination","$prev","$next","$paginationContainer","addClass","click","append","$scrollingContainer","__renderPages","i","$pageLi","page$LiClick","ev","data","html","$container","find","length","$activePage","midpoint","width","scrollLeft","position","left","page","goToPage","trigger","prevPage","nextPage","nonOptionsArgs","_jquery2","default","makeArray","arguments","slice","type","map","previousControl","$firstElement","fn"],"mappings":"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","file":"../../scripts/ui/pagination.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n/** Builds (twitter bootstrap styled) pagination controls.\n     *  If the totalDataSize is not null, a horizontal list of page buttons is displayed.\n     *  If totalDataSize is null, two links ('Prev' and 'Next) are displayed.\n     *  When pages are changed, a 'pagination.page-change' event is fired\n     *      sending the event and the (0-based) page requested.\n     */\nfunction Pagination(element, options) {\n    /** the total number of pages */\n    this.numPages = null;\n    /** the current, active page */\n    this.currPage = 0;\n    return this.init(element, options);\n}\n\n/** data key under which this object will be stored in the element */\nPagination.prototype.DATA_KEY = \"pagination\";\n/** default options */\nPagination.prototype.defaults = {\n    /** which page to begin at */\n    startingPage: 0,\n    /** number of data per page */\n    perPage: 20,\n    /** the total number of data (null == unknown) */\n    totalDataSize: null,\n    /** size of current data on current page */\n    currDataSize: null\n};\n\n/** init the control, calc numPages if possible, and render\n     *  @param {jQuery} the element that will contain the pagination control\n     *  @param {Object} options a map containing overrides to the pagination default options\n     */\nPagination.prototype.init = function _init($element, options) {\n    options = options || {};\n    this.$element = $element;\n    this.options = jQuery.extend(true, {}, this.defaults, options);\n\n    this.currPage = this.options.startingPage;\n    if (this.options.totalDataSize !== null) {\n        this.numPages = Math.ceil(this.options.totalDataSize / this.options.perPage);\n        // limit currPage by numPages\n        if (this.currPage >= this.numPages) {\n            this.currPage = this.numPages - 1;\n        }\n    }\n    //console.debug( 'Pagination.prototype.init:', this.$element, this.currPage );\n    //console.debug( JSON.stringify( this.options ) );\n\n    // bind to data of element\n    this.$element.data(Pagination.prototype.DATA_KEY, this);\n\n    this._render();\n    return this;\n};\n\n/** helper to create a simple li + a combo */\nfunction _make$Li(contents) {\n    return $(['<li><a href=\"javascript:void(0);\">', contents, \"</a></li>\"].join(\"\"));\n}\n\n/** render previous and next pagination buttons */\nPagination.prototype._render = function __render() {\n    // no data - no pagination\n    if (this.options.totalDataSize === 0) {\n        return this;\n    }\n    // only one page\n    if (this.numPages === 1) {\n        return this;\n    }\n\n    // when the number of pages are known, render each page as a link\n    if (this.numPages > 0) {\n        this._renderPages();\n        this._scrollToActivePage();\n\n        // when the number of pages is not known, render previous or next\n    } else {\n        this._renderPrevNext();\n    }\n    return this;\n};\n\n/** render previous and next pagination buttons */\nPagination.prototype._renderPrevNext = function __renderPrevNext() {\n    var pagination = this;\n    var $prev = _make$Li(\"Prev\");\n    var $next = _make$Li(\"Next\");\n\n    var $paginationContainer = $(\"<ul/>\").addClass(\"pagination pagination-prev-next\");\n\n    // disable if it either end\n    if (this.currPage === 0) {\n        $prev.addClass(\"disabled\");\n    } else {\n        $prev.click(() => {\n            pagination.prevPage();\n        });\n    }\n    if (\n        (this.numPages && this.currPage === this.numPages - 1) ||\n        (this.options.currDataSize && this.options.currDataSize < this.options.perPage)\n    ) {\n        $next.addClass(\"disabled\");\n    } else {\n        $next.click(() => {\n            pagination.nextPage();\n        });\n    }\n\n    this.$element.html($paginationContainer.append([$prev, $next]));\n    //console.debug( this.$element, this.$element.html() );\n    return this.$element;\n};\n\n/** render page links for each possible page (if we can) */\nPagination.prototype._renderPages = function __renderPages() {\n    // it's better to scroll the control and let the user see all pages\n    //  than to force her/him to change pages in order to find the one they want (as traditional << >> does)\n    var pagination = this;\n\n    var $scrollingContainer = $(\"<div>\").addClass(\"pagination-scroll-container\");\n\n    var $paginationContainer = $(\"<ul/>\").addClass(\"pagination pagination-page-list\");\n\n    var page$LiClick = function(ev) {\n        pagination.goToPage($(this).data(\"page\"));\n    };\n\n    for (var i = 0; i < this.numPages; i += 1) {\n        // add html5 data tag 'page' for later click event handler use\n        var $pageLi = _make$Li(i + 1)\n            .attr(\"data-page\", i)\n            .click(page$LiClick);\n        // highlight the current page\n        if (i === this.currPage) {\n            $pageLi.addClass(\"active\");\n        }\n        //console.debug( '\\t', $pageLi );\n        $paginationContainer.append($pageLi);\n    }\n    return this.$element.html($scrollingContainer.html($paginationContainer));\n};\n\n/** scroll scroll-container (if any) to show the active page */\nPagination.prototype._scrollToActivePage = function __scrollToActivePage() {\n    // scroll to show active page in center of scrollable area\n    var $container = this.$element.find(\".pagination-scroll-container\");\n    // no scroll container : don't scroll\n    if (!$container.length) {\n        return this;\n    }\n\n    var $activePage = this.$element.find(\"li.active\");\n    var midpoint = $container.width() / 2;\n    //console.debug( $container, $activePage, midpoint );\n    $container.scrollLeft($container.scrollLeft() + $activePage.position().left - midpoint);\n    return this;\n};\n\n/** go to a certain page */\nPagination.prototype.goToPage = function goToPage(page) {\n    if (page <= 0) {\n        page = 0;\n    }\n    if (this.numPages && page >= this.numPages) {\n        page = this.numPages - 1;\n    }\n    if (page === this.currPage) {\n        return this;\n    }\n\n    //console.debug( '\\t going to page ' + page )\n    this.currPage = page;\n    this.$element.trigger(\"pagination.page-change\", this.currPage);\n    //console.info( 'pagination:page-change', this.currPage );\n    this._render();\n    return this;\n};\n\n/** go to the previous page */\nPagination.prototype.prevPage = function prevPage() {\n    return this.goToPage(this.currPage - 1);\n};\n\n/** go to the next page */\nPagination.prototype.nextPage = function nextPage() {\n    return this.goToPage(this.currPage + 1);\n};\n\n/** return the current page */\nPagination.prototype.page = function page() {\n    return this.currPage;\n};\n\n// alternate constructor invocation\nPagination.create = function _create($element, options) {\n    return new Pagination($element, options);\n};\n\n// as jq plugin\njQuery.fn.extend({\n    pagination: function $pagination(options) {\n        var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n\n        // if passed an object - use that as an options map to create pagination for each selected\n        if (jQuery.type(options) === \"object\") {\n            return this.map(function() {\n                Pagination.create($(this), options);\n                return this;\n            });\n        }\n\n        // (other invocations only work on the first element in selected)\n        var $firstElement = $(this[0]);\n\n        var previousControl = $firstElement.data(Pagination.prototype.DATA_KEY);\n        // if a pagination control was found for this element, either...\n        if (previousControl) {\n            // invoke a function on the pagination object if passed a string (the function name)\n            if (jQuery.type(options) === \"string\") {\n                var fn = previousControl[options];\n                if (jQuery.type(fn) === \"function\") {\n                    return fn.apply(previousControl, nonOptionsArgs);\n                }\n\n                // if passed nothing, return the previously set control\n            } else {\n                return previousControl;\n            }\n        }\n        // if there is no control already set, return undefined\n        return undefined;\n    }\n});\n"]}