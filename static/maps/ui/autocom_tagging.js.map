{"version":3,"sources":["ui/autocom_tagging.js"],"names":["init_tag_click_function","tag_elt","click_func","$","find","this","click","tag_name_and_value","text","split","_jquery2","default","fn","autocomplete_tagging","options","init_delete_tag_image","delete_img","mouseenter","attr","settings","delete_tag_img_rollover","mouseleave","delete_tag_img","tag_name","tag_button","parent","eq","prev","remove","tags","new_text","toggle_link","ajax","data","error","tag_value","prev_button","hasClass","get_toggle_link_text_fn","tag_area","prepend","success","build_tag_button","tag_str","addClass","tag_name_elt","append","defaults","num_tags","tag_click_fn","editable","in_form","use_toggle_link","add_tag_img","ajax_autocomplete_tag_url","ajax_retag_url","extend","ajax_delete_tag_url","ajax_add_tag_url","this_obj","tag_input_field","add_tag_button","after_toggle_fn","is","length","blur","hide","e","trigger","keyCode","value","new_value","substring","new_tag_button","tag_buttons","children","slice","after","last_tag_button","zz","url","alert","cacheFlush","autocomplete_options","selectFirst","formatItem","key","row_position","num_rows","search_term","autoFill","highlight","autocomplete_verheul","bind","_","size","show","removeClass","target","is_active","focus","check_click"],"mappings":"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","file":"../../scripts/ui/autocom_tagging.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n\n// ============================================================================\n/**\n* JQuery extension for tagging with autocomplete.\n* @author: Jeremy Goecks\n* @require: jquery.autocomplete plugin\n*/\n//\n// Initialize \"tag click functions\" for tags.\n//\nfunction init_tag_click_function(tag_elt, click_func) {\n    $(tag_elt)\n        .find(\".tag-name\")\n        .each(function() {\n            $(this).click(function() {\n                var tag_str = $(this).text();\n                var tag_name_and_value = tag_str.split(\":\");\n                click_func(tag_name_and_value[0], tag_name_and_value[1]);\n                return true;\n            });\n        });\n}\n\njQuery.fn.autocomplete_tagging = function(options) {\n    var defaults = {\n        get_toggle_link_text_fn: function(tags) {\n            var text = \"\";\n            var num_tags = _.size(tags);\n            if (num_tags > 0) {\n                text = num_tags + (num_tags > 1 ? \" Tags\" : \" Tag\");\n            } else {\n                text = \"Add tags\";\n            }\n            return text;\n        },\n        tag_click_fn: function(name, value) {},\n        editable: true,\n        input_size: 20,\n        in_form: false,\n        tags: {},\n        use_toggle_link: true,\n        item_id: \"\",\n        add_tag_img: \"\",\n        add_tag_img_rollover: \"\",\n        delete_tag_img: \"\",\n        ajax_autocomplete_tag_url: \"\",\n        ajax_retag_url: \"\",\n        ajax_delete_tag_url: \"\",\n        ajax_add_tag_url: \"\"\n    };\n\n    var settings = jQuery.extend(defaults, options);\n\n    //\n    // Initalize object's elements.\n    //\n\n    // Get elements for this object. For this_obj, assume the last element with the id is the \"this\"; this is somewhat of a hack to address the problem\n    // that there may be two tagging elements for a single item if there are both community and individual tags for an element.\n    var this_obj = $(this);\n    var tag_area = this_obj.find(\".tag-area\");\n    var toggle_link = this_obj.find(\".toggle-link\");\n    var tag_input_field = this_obj.find(\".tag-input\");\n    var add_tag_button = this_obj.find(\".add-tag-button\");\n\n    // Initialize toggle link.\n    toggle_link.click(function() {\n        // Take special actions depending on whether toggle is showing or hiding link.\n        var after_toggle_fn;\n        if (tag_area.is(\":hidden\")) {\n            after_toggle_fn = function() {\n                // If there are no tags, go right to editing mode by generating a click on the area.\n                var num_tags = $(this).find(\".tag-button\").length;\n                if (num_tags === 0) {\n                    tag_area.click();\n                }\n            };\n        } else {\n            after_toggle_fn = () => {\n                tag_area.blur();\n            };\n        }\n        tag_area.slideToggle(\"fast\", after_toggle_fn);\n        return $(this);\n    });\n\n    // Initialize tag input field.\n    if (settings.editable) {\n        tag_input_field.hide();\n    }\n    tag_input_field.keyup(function(e) {\n        if (e.keyCode === 27) {\n            // Escape key\n            $(this).trigger(\"blur\");\n        } else if (\n            e.keyCode === 13 || // Return Key\n            e.keyCode === 188 || // Comma\n            e.keyCode === 32 // Space\n        ) {\n            //\n            // Check input.\n            //\n\n            var new_value = this.value;\n\n            // Suppress space after a \":\"\n            if (new_value.indexOf(\": \", new_value.length - 2) !== -1) {\n                this.value = new_value.substring(0, new_value.length - 1);\n                return false;\n            }\n\n            // Remove trigger keys from input.\n            if (e.keyCode === 188 || e.keyCode === 32) {\n                new_value = new_value.substring(0, new_value.length - 1);\n            }\n\n            // Trim whitespace.\n            new_value = $.trim(new_value);\n\n            // Too short?\n            if (new_value.length < 2) {\n                return false;\n            }\n\n            //\n            // New tag OK - apply it.\n            //\n\n            this.value = \"\"; // Reset text field now that tag is being added\n\n            // Add button for tag after all other tag buttons.\n            var new_tag_button = build_tag_button(new_value);\n            var tag_buttons = tag_area.children(\".tag-button\");\n            if (tag_buttons.length !== 0) {\n                var last_tag_button = tag_buttons.slice(tag_buttons.length - 1);\n                last_tag_button.after(new_tag_button);\n            } else {\n                tag_area.prepend(new_tag_button);\n            }\n\n            // Add tag to internal list.\n            var tag_name_and_value = new_value.split(\":\");\n            settings.tags[tag_name_and_value[0]] = tag_name_and_value[1];\n\n            // Update toggle link text.\n            var new_text = settings.get_toggle_link_text_fn(settings.tags);\n            toggle_link.text(new_text);\n\n            // Commit tag to server.\n            var zz = $(this);\n            $.ajax({\n                url: settings.ajax_add_tag_url,\n                data: { new_tag: new_value },\n                error: function() {\n                    // Failed. Roll back changes and show alert.\n                    new_tag_button.remove();\n                    delete settings.tags[tag_name_and_value[0]];\n                    var new_text = settings.get_toggle_link_text_fn(settings.tags);\n                    toggle_link.text(new_text);\n                    alert(\"Add tag failed\");\n                },\n                success: function() {\n                    // Flush autocomplete cache because it's not out of date.\n                    // TODO: in the future, we could remove the particular item\n                    // that was chosen from the cache rather than flush it.\n                    zz.data(\"autocompleter\").cacheFlush();\n                }\n            });\n\n            return false;\n        }\n    });\n\n    // Add autocomplete to input.\n    var format_item_func = (key, row_position, num_rows, value, search_term) => {\n        var tag_name_and_value = value.split(\":\");\n        return tag_name_and_value.length === 1 ? tag_name_and_value[0] : tag_name_and_value[1];\n    };\n    var autocomplete_options = {\n        selectFirst: false,\n        formatItem: format_item_func,\n        autoFill: false,\n        highlight: false\n    };\n    tag_input_field.autocomplete_verheul(settings.ajax_autocomplete_tag_url, autocomplete_options);\n\n    // Initialize delete tag images for current tags.\n    this_obj.find(\".delete-tag-img\").each(function() {\n        init_delete_tag_image($(this));\n    });\n\n    // Initialize tag click function.\n    init_tag_click_function($(this), settings.tag_click_fn);\n\n    // Initialize \"add tag\" button.\n    add_tag_button.click(function() {\n        $(this).hide();\n\n        // Clicking on button is the same as clicking on the tag area.\n        tag_area.click();\n        return false;\n    });\n\n    //\n    // Set up tag area interactions; these are needed only if tags are editable.\n    //\n    if (settings.editable) {\n        // When the tag area blurs, go to \"view tag\" mode.\n        tag_area.bind(\"blur\", e => {\n            if (_.size(settings.tags) > 0) {\n                add_tag_button.show();\n                tag_input_field.hide();\n                tag_area.removeClass(\"active-tag-area\");\n                // tag_area.addClass(\"tooltip\");\n            } else {\n                // No tags, so do nothing to ensure that input is still visible.\n            }\n        });\n\n        // On click, enable user to add tags.\n        tag_area.click(function(e) {\n            var is_active = $(this).hasClass(\"active-tag-area\");\n\n            // If a \"delete image\" object was pressed and area is inactive, do nothing.\n            if ($(e.target).hasClass(\"delete-tag-img\") && !is_active) {\n                return false;\n            }\n\n            // If a \"tag name\" object was pressed and area is inactive, do nothing.\n            if ($(e.target).hasClass(\"tag-name\") && !is_active) {\n                return false;\n            }\n\n            // Remove tooltip.\n            // $(this).removeClass(\"tooltip\");\n\n            // Hide add tag button, show tag_input field. Change background to show\n            // area is active.\n            $(this).addClass(\"active-tag-area\");\n            add_tag_button.hide();\n            tag_input_field.show();\n            tag_input_field.focus();\n\n            // Add handler to document that will call blur when the tag area is blurred;\n            // a tag area is blurred when a user clicks on an element outside the area.\n            var handle_document_click = e => {\n                var check_click = function(tag_area, target) {\n                    var tag_area_id = tag_area.attr(\"id\");\n                    // Blur the tag area if the element clicked on is not in the tag area.\n                    if (target !== tag_area) {\n                        tag_area.blur();\n                        $(window).unbind(\"click.tagging_blur\");\n                        $(this).addClass(\"tooltip\");\n                    }\n                };\n                check_click(tag_area, $(e.target));\n            };\n            // TODO: we should attach the click handler to all frames in order to capture\n            // clicks outside the frame that this element is in.\n            //window.parent.document.onclick = handle_document_click;\n            //var temp = $(window.parent.document.body).contents().find(\"iframe\").html();\n            //alert(temp);\n            //$(document).parent().click(handle_document_click);\n            $(window).bind(\"click.tagging_blur\", handle_document_click);\n\n            return false;\n        });\n    }\n\n    // If using toggle link, hide the tag area. Otherwise, show the tag area.\n    if (settings.use_toggle_link) {\n        tag_area.hide();\n    }\n\n    //\n    // Helper functions.\n    //\n\n    //\n    // Collapse tag name + value into a single string.\n    //\n    function build_tag_str(tag_name, tag_value) {\n        return tag_name + (tag_value ? `:${tag_value}` : \"\");\n    }\n\n    // Initialize a \"delete tag image\": when click, delete tag from UI and send delete request to server.\n    function init_delete_tag_image(delete_img) {\n        $(delete_img).mouseenter(function() {\n            $(this).attr(\"src\", settings.delete_tag_img_rollover);\n        });\n        $(delete_img).mouseleave(function() {\n            $(this).attr(\"src\", settings.delete_tag_img);\n        });\n        $(delete_img).click(function() {\n            // Tag button is image's parent.\n            var tag_button = $(this).parent();\n\n            // Get tag name, value.\n            var tag_name_elt = tag_button.find(\".tag-name\").eq(0);\n            var tag_str = tag_name_elt.text();\n            var tag_name_and_value = tag_str.split(\":\");\n            var tag_name = tag_name_and_value[0];\n            var tag_value = tag_name_and_value[1];\n\n            var prev_button = tag_button.prev();\n            tag_button.remove();\n\n            // Remove tag from local list for consistency.\n            delete settings.tags[tag_name];\n\n            // Update toggle link text.\n            var new_text = settings.get_toggle_link_text_fn(settings.tags);\n            toggle_link.text(new_text);\n\n            // Delete tag.\n            $.ajax({\n                url: settings.ajax_delete_tag_url,\n                data: { tag_name: tag_name },\n                error: function() {\n                    // Failed. Roll back changes and show alert.\n                    settings.tags[tag_name] = tag_value;\n                    if (prev_button.hasClass(\"tag-button\")) {\n                        prev_button.after(tag_button);\n                    } else {\n                        tag_area.prepend(tag_button);\n                    }\n                    alert(\"Remove tag failed\");\n\n                    toggle_link.text(settings.get_toggle_link_text_fn(settings.tags));\n\n                    // TODO: no idea why it's necessary to set this up again.\n                    delete_img.mouseenter(function() {\n                        $(this).attr(\"src\", settings.delete_tag_img_rollover);\n                    });\n                    delete_img.mouseleave(function() {\n                        $(this).attr(\"src\", settings.delete_tag_img);\n                    });\n                },\n                success: function() {}\n            });\n\n            return true;\n        });\n    }\n\n    //\n    // Function that builds a tag button.\n    //\n    function build_tag_button(tag_str) {\n        // Build \"delete tag\" image.\n        var delete_img = $(\"<img/>\")\n            .attr(\"src\", settings.delete_tag_img)\n            .addClass(\"delete-tag-img\");\n        init_delete_tag_image(delete_img);\n\n        // Build tag button.\n        var tag_name_elt = $(\"<span>\")\n            .text(tag_str)\n            .addClass(\"tag-name\");\n        tag_name_elt.click(() => {\n            var tag_name_and_value = tag_str.split(\":\");\n            settings.tag_click_fn(tag_name_and_value[0], tag_name_and_value[1]);\n            return true;\n        });\n\n        var tag_button = $(\"<span></span>\").addClass(\"tag-button\");\n        tag_button.append(tag_name_elt);\n        // Allow delete only if element is editable.\n        if (settings.editable) {\n            tag_button.append(delete_img);\n        }\n\n        return tag_button;\n    }\n};\n\n// ============================================================================\nexport default init_tag_click_function;\n"]}