{"version":3,"sources":["galaxy.interactive_environments.js"],"names":["test_ie_availability","$","load_when_ready","children","remove","append_notebook","clear_main_area","galaxy_root","make_spin_state","type","ajax_timeout_init","ajax_timeout_max","sleep_init","sleep_max","sleep_step","log_attempts","ajax_timeout","ajax_timeout_step","sleep","count","console","log","console_msg","user_msg","clear","toastr","closeButton","timeOut","extendedTimeOut","tapToDismiss","spin_again","spin_state","setTimeout","spinner","window","xhrFields","success_callback","timeout_callback","error_callback","withCredentials","ajax_params","timeout","success","data","status","jqxhr","error","bool_response","url","display_spinner","wrapped_success","spin","message_once","spin_error","messages","timeout_error","wait_warn","spin_until","waiting","not_ready"],"mappings":"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","file":"../scripts/galaxy.interactive_environments.js","sourcesContent":["/**\n * Internal function to remove content from the main area and add the notebook.\n * Not idempotent\n * TODO: This isn't just internal, some notebooks are calling it?\n */\nexport function append_notebook(url) {\n    clear_main_area();\n    $(\"#main\").append(\n        `<iframe frameBorder=\"0\" seamless=\"seamless\" style=\"width: 100%; height: 100%; overflow:hidden;\" scrolling=\"no\" src=\"${url}\"></iframe>`\n    );\n}\n\nexport function clear_main_area() {\n    $(\"#spinner\").remove();\n    $(\"#main\")\n        .children()\n        .remove();\n}\n\nexport function display_spinner() {\n    $(\"#main\").append(\n        `<img id=\"spinner\" src=\"${galaxy_root}static/style/largespinner.gif\" style=\"position:absolute;margin:auto;top:0;left:0;right:0;bottom:0;\">`\n    );\n}\n\n/* Create a spin_state object used by spin() and spin_again() */\nexport function make_spin_state(\n    type,\n    ajax_timeout_init,\n    ajax_timeout_max,\n    ajax_timeout_step,\n    sleep_init,\n    sleep_max,\n    sleep_step,\n    log_attempts\n) {\n    var s = {\n        type: typeof type !== \"undefined\" ? type : \"GIE spin\",\n        ajax_timeout: typeof ajax_timeout_init !== \"undefined\" ? ajax_timeout_init : 2000,\n        ajax_timeout_max: typeof ajax_timeout_max !== \"undefined\" ? ajax_timeout_max : 16000,\n        ajax_timeout_step: typeof ajax_timeout_step !== \"undefined\" ? ajax_timeout_step : 500,\n        sleep: typeof sleep_init !== \"undefined\" ? sleep_init : 500,\n        sleep_max: typeof sleep_max !== \"undefined\" ? sleep_max : 8000,\n        sleep_step: typeof sleep_step !== \"undefined\" ? sleep_step : 100,\n        log_attempts: typeof log_attempts !== \"undefined\" ? log_attempts : true,\n        count: 0\n    };\n    return s;\n}\n\n/* Log/display an error when spinning fails. */\nexport function spin_error(console_msg, user_msg, clear) {\n    console.log(console_msg);\n    if (clear) clear_main_area();\n    if (typeof user_msg == \"string\") {\n        toastr.clear();\n        toastr.error(user_msg, \"Error\", {\n            closeButton: true,\n            timeOut: 0,\n            extendedTimeOut: 0,\n            tapToDismiss: false\n        });\n    }\n}\n\n/* Increase sleep time and spin again. */\nfunction spin_again(spin_state) {\n    if (spin_state.sleep < spin_state.sleep_max) {\n        spin_state.sleep += spin_state.sleep_step;\n    }\n    if (spin_state.log_attempts) {\n        console.log(\n            `${spin_state.type} request ${spin_state.count} request timeout ${spin_state.ajax_timeout}ms sleeping ${spin_state.sleep /\n                1000}s`\n        );\n    }\n    window.setTimeout(spin_state.spinner, spin_state.sleep);\n}\n\n/*\n * Spin on a URL as long as it times out, otherwise, call the provided success or error callback. If the callback\n * returns `true`, the condition is considered \"resolved\" and spinning stops. Otherwise, continue spinning, increasing\n * AJAX timeouts and/or sleep values as configured in the spin_state.\n */\nexport function spin(url, bool_response, success_callback, timeout_callback, error_callback, spin_state) {\n    var spinner = () => {\n        var ajax_params = {\n            url: url,\n            xhrFields: {\n                withCredentials: true\n            },\n            type: \"GET\",\n            timeout: spin_state.ajax_timeout,\n            success: function(data, status, jqxhr) {\n                if (!success_callback(data, status, jqxhr)) {\n                    spin_state.count++;\n                    spin_again(spin_state);\n                }\n            },\n            error: function(jqxhr, status, error) {\n                if (status == \"timeout\") {\n                    if (spin_state.ajax_timeout < spin_state.ajax_timeout_max) {\n                        spin_state.ajax_timeout += spin_state.ajax_timeout_step;\n                    }\n                    spin_state.count++;\n                    if (!timeout_callback(jqxhr, status, error)) spin_again(spin_state);\n                } else {\n                    spin_state.count++;\n                    if (!error_callback(jqxhr, status, error)) spin_again(spin_state);\n                }\n            }\n        };\n        if (bool_response) ajax_params[\"dataType\"] = \"json\";\n        $.ajax(ajax_params);\n    };\n    console.log(`Setting up new spinner for ${spin_state.type} on ${url}`);\n    spin_state.spinner = spinner;\n    window.setTimeout(spinner, spin_state.sleep);\n}\n\n/*\n * Spin on a URL forever until there is an acceptable response. \n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK).\n * @param {Boolean} bool_response: If set to `true`, do not stop spinning until the response is `true`. Otherwise, stop\n *     as soon as a successful response is received.\n */\nfunction spin_until(url, bool_response, messages, success_callback, spin_state) {\n    var warn_at = 40; // ~2 mins\n    var message_once = (message, spin_state) => {\n        if (spin_state.count == 1) {\n            display_spinner();\n            toastr.info(message, null, {\n                closeButton: true,\n                timeOut: 0,\n                extendedTimeOut: 0,\n                tapToDismiss: false\n            });\n        }\n    };\n    var wrapped_success = data => {\n        if (!bool_response || (bool_response && data == true)) {\n            console.log(messages[\"success\"]);\n            clear_main_area();\n            toastr.clear();\n            success_callback();\n        } else if (bool_response && data == false) {\n            message_once(messages[\"not_ready\"], spin_state);\n            return false; // keep spinning\n        } else {\n            spin_error(`Invalid response to ${spin_state.type} request`, messages[\"invalid_response\"], true);\n        }\n        return true; // stop spinning\n    };\n    var timeout_error = (jqxhr, status, error) => {\n        message_once(messages[\"waiting\"], spin_state);\n        if (spin_state.count == warn_at) {\n            toastr.warning(messages[\"wait_warn\"], \"Warning\", {\n                closeButton: true,\n                timeOut: 0,\n                extendedTimeOut: 0,\n                tapToDismiss: false\n            });\n        }\n        return false; // keep spinning\n    };\n    spin(url, bool_response, wrapped_success, timeout_error, timeout_error, spin_state);\n}\n\n/**\n * Test availability of a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test availability of. Must return a 200 (302->200 is OK).\n * @param {String} callback: function to call once successfully connected.\n *\n */\nexport function test_ie_availability(url, success_callback) {\n    var messages = {\n        success: \"IE connection succeeded, returning\",\n        waiting: \"Interactive environment container is running, attempting to connect to the IE. Please wait...\",\n        wait_warn:\n            \"It is taking an usually long time to connect to the interactive environment. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error:\n            \"An error was encountered while attempting to connect to the interactive environment, contact your administrator.\"\n    };\n    var spin_state = make_spin_state(\"IE availability\");\n    spin_until(url, false, messages, success_callback, spin_state);\n}\n\n/**\n * Test a boolean (json) response from a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK) and either `true` or `false`.\n * @param {String} callback: function to call once successfully connected.\n *\n */\nexport function load_when_ready(url, success_callback) {\n    var messages = {\n        success: \"Galaxy reports IE container ready, returning\",\n        not_ready: \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        unknown_response:\n            \"Galaxy failed to launch a container in which to run this interactive environment, contact a Galaxy administrator.\",\n        waiting: \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        wait_warn:\n            \"It is taking an usually long time to start a container. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error:\n            \"Galaxy encountered an error while attempting to determine the readiness of this interactive environment's container, contact a Galaxy administrator.\"\n    };\n    var spin_state = make_spin_state(\"IE container readiness\");\n    spin_until(url, true, messages, success_callback, spin_state);\n}\n"]}