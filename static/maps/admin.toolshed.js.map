{"version":3,"sources":["admin.toolshed.js"],"names":["AdminToolshedRouter","Backbone","Router","extend","initialize","this","routesHit","history","on","bind","trackPageview","routes","","sheds","queue","workflows","status/r/:repositories","category/s/:tool_shed/c/:cateory_id","repository/s/:tool_shed/r/:repository_id","back","status","trigger","replace","GalaxyAdminToolshedApp","View","app_config","known_views","Galaxy","admintoolshedapp","window","adminRepoQueueView","navigate","_repositoryQueueView2","default","RepoQueueView","adminShedListView","reDraw","_shedListView2","ShedListView","admin_toolshed_router","adminShedCategoriesView","_categoriesView2","CategoryView","tool_shed","category_id","adminShedCategoryView","Category","repository_id","adminRepositoryView","repositories","adminRepoStatusView","split","_repoStatusView2","RepoStatus","adminWorkflowsView","_workflowsView2","Workflows","GalaxyApp"],"mappings":"ocAOIA,EAAsBC,SAASC,OAAOC,QACtCC,WAAY,WACRC,KAAKC,UAAY,EAEjBL,SAASM,QAAQC,GACb,QACA,WACIH,KAAKC,aAETD,MAEJA,KAAKI,KAAK,QAASJ,KAAKK,gBAG5BC,QACIC,GAAI,YACJC,MAAO,YACPC,MAAO,QACPC,UAAW,YACXC,yBAA0B,SAnB9BhB,OAAAA,SACAI,0BAAY,aACRa,sCAAA,eACAC,2CAAA,cAaAL,KAAAA,WACAC,KAAAA,UAHI,EAIJC,OAAAA,QAAWI,OAEXC,KAAAA,SAAQ,KANJC,SAAA,EAAAC,SAAA,OA2BRC,EAAyBtB,SAASuB,KAAKrB,QAfvCsB,YAiBIC,aAAc,YAAa,QAAS,SAAU,aAAc,eAAgB,gBAGhFtB,WAAY,WACRuB,OAAOC,iBAAmBvB,KAf9Bc,KAAAA,sBAAiB,IAAAnB,EAET6B,KAAAA,sBAAArB,GAAA,cAAA,WADJmB,OAEOC,iBAAAE,mBACHH,OAAKI,iBAAgBV,mBAAeC,SAE3CK,OAAAC,iBAAAE,mBAAA,IAAAE,EAAAC,QAAAC,gBAGDX,KAAAA,sBAAyBtB,GAAAA,kBAAqB,WAC9CwB,OAAYG,iBAAAO,kBACRT,OAAAA,iBAA2BS,kBAAmBC,SAkBtCT,OAAOC,iBAAiBO,kBAAoB,IAAIE,EAAAJ,QAAmBK,eAb3EjC,KAAAkC,sBAAKA,GAAL,mBAAiCvC,SAAAA,GAiBzB2B,OAAOC,iBAAiBY,wBAfhCb,OAAKY,iBAAsB/B,wBAAkB4B,QACrCT,UAAOC,EAAAA,QAAiBE,MAAAA,SAGxBH,OAAAA,iBAAOC,wBAAsC,IAAIa,EAAAR,QAAAS,cACpDC,UAAAA,EAAArB,QAAA,MAAA,WAIGK,KAAAA,sBAAOC,GAAAA,qBAAiBO,SAAxBQ,EAAAC,GACHjB,OAAMC,iBAAAiB,sBACHlB,OAAAA,iBAAOC,sBAAPQ,QACHO,UAAAA,EAAArB,QAAA,MAAA,OALLsB,YAAAA,IASQjB,OAAAA,iBAAOC,sBAAiBY,IAAwBJ,EAAAA,QAAOU,UACnDH,UAAAA,EAAWA,QAAUrB,MAAQ,OADsBsB,YAAvDA,MAIuFvC,KAAAkC,sBAAvF/B,GAAA,mBAAA,SAAAmC,EAAAI,GAGHpB,OAAAC,iBAAAoB,oBATLrB,OAAAC,iBAAAoB,oBAAAZ,QAWKG,UAAAA,EAALjB,QAA8B,MAAA,OACtBK,cAAOC,IAGHgB,OAAAA,iBAAaA,oBAAAA,IAAAA,EAAAA,QAAAA,aAFoCD,UAArDA,EAAArB,QAAA,MAAA,OADJyB,cAKOA,MACgF1C,KAAAkC,sBAAnF/B,GAAA,eAAA,SAAAyC,GAIHtB,OAAAC,iBAAAsB,oBAXLvB,OAAAC,iBAAAsB,oBAAAd,QAaKG,aAAAA,EAAyBY,MAAA,OAGlBR,OAAAA,iBAAWA,oBAAyB,IADWS,EAAAnB,QAAAoB,YAE/CN,aAAAA,EAAeA,MAAAA,SAIfJ,KAAAA,sBAAWA,GAAAA,kBAAkB,WAC7BI,OAAAA,iBAAeA,mBAF+DpB,OAAlFC,iBAAA0B,mBAAAlB,SAPRT,OAAAC,iBAAA0B,mBAAA,IAAAC,EAAAtB,QAAAuB,YAgBYP,SAAAA,QAAAA,OAAAA,WAAcA,kBAGgEQ,UAAAlC","file":"../scripts/admin.toolshed.js","sourcesContent":["import mod_shed_list_view from \"mvc/toolshed/shed-list-view\";\nimport mod_categories_view from \"mvc/toolshed/categories-view\";\nimport mod_repositories_view from \"mvc/toolshed/repositories-view\";\nimport mod_repository_view from \"mvc/toolshed/repository-view\";\nimport mod_repoqueue_view from \"mvc/toolshed/repository-queue-view\";\nimport mod_repo_status_view from \"mvc/toolshed/repo-status-view\";\nimport mod_workflows_view from \"mvc/toolshed/workflows-view\";\nvar AdminToolshedRouter = Backbone.Router.extend({\n    initialize: function() {\n        this.routesHit = 0;\n        // keep count of number of routes handled by the application\n        Backbone.history.on(\n            \"route\",\n            function() {\n                this.routesHit++;\n            },\n            this\n        );\n        this.bind(\"route\", this.trackPageview);\n    },\n\n    routes: {\n        \"\": \"toolsheds\",\n        sheds: \"toolsheds\",\n        queue: \"queue\",\n        workflows: \"workflows\",\n        \"status/r/:repositories\": \"status\",\n        status: \"status\",\n        \"categories/s/:tool_shed\": \"categories\",\n        \"category/s/:tool_shed/c/:cateory_id\": \"repositories\",\n        \"repository/s/:tool_shed/r/:repository_id\": \"repository\"\n    },\n\n    /**\n        * If more than one route has been hit the user did not land on current\n        * page directly so we can go back safely. Otherwise go to the home page.\n        * Use replaceState if available so the navigation doesn't create an\n        * extra history entry\n        */\n    back: function() {\n        if (this.routesHit > 1) {\n            window.history.back();\n        } else {\n            this.navigate(\"#\", { trigger: true, replace: true });\n        }\n    }\n});\n\nvar GalaxyAdminToolshedApp = Backbone.View.extend({\n    app_config: {\n        known_views: [\"toolsheds\", \"queue\", \"status\", \"categories\", \"repositories\", \"repoository\"]\n    },\n\n    initialize: function() {\n        Galaxy.admintoolshedapp = this;\n        this.admin_toolshed_router = new AdminToolshedRouter();\n\n        this.admin_toolshed_router.on(\"route:queue\", () => {\n            if (Galaxy.admintoolshedapp.adminRepoQueueView) {\n                Galaxy.admintoolshedapp.adminRepoQueueView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminRepoQueueView = new mod_repoqueue_view.RepoQueueView();\n            }\n        });\n        this.admin_toolshed_router.on(\"route:toolsheds\", () => {\n            if (Galaxy.admintoolshedapp.adminShedListView) {\n                Galaxy.admintoolshedapp.adminShedListView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminShedListView = new mod_shed_list_view.ShedListView();\n            }\n        });\n        this.admin_toolshed_router.on(\"route:categories\", tool_shed => {\n            if (Galaxy.admintoolshedapp.adminShedCategoriesView) {\n                Galaxy.admintoolshedapp.adminShedCategoriesView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\")\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminShedCategoriesView = new mod_categories_view.CategoryView({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\")\n                });\n            }\n        });\n        this.admin_toolshed_router.on(\"route:repositories\", (tool_shed, category_id) => {\n            if (Galaxy.admintoolshedapp.adminShedCategoryView) {\n                Galaxy.admintoolshedapp.adminShedCategoryView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    category_id: category_id\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminShedCategoryView = new mod_repositories_view.Category({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    category_id: category_id\n                });\n            }\n        });\n        this.admin_toolshed_router.on(\"route:repository\", (tool_shed, repository_id) => {\n            if (Galaxy.admintoolshedapp.adminRepositoryView) {\n                Galaxy.admintoolshedapp.adminRepositoryView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    repository_id: repository_id\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminRepositoryView = new mod_repository_view.RepoDetails({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    repository_id: repository_id\n                });\n            }\n        });\n        this.admin_toolshed_router.on(\"route:status\", repositories => {\n            if (Galaxy.admintoolshedapp.adminRepoStatusView) {\n                Galaxy.admintoolshedapp.adminRepoStatusView.reDraw({\n                    repositories: repositories.split(\"|\")\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminRepoStatusView = new mod_repo_status_view.RepoStatus({\n                    repositories: repositories.split(\"|\")\n                });\n            }\n        });\n        this.admin_toolshed_router.on(\"route:workflows\", () => {\n            if (Galaxy.admintoolshedapp.adminWorkflowsView) {\n                Galaxy.admintoolshedapp.adminWorkflowsView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminWorkflowsView = new mod_workflows_view.Workflows();\n            }\n        });\n\n        Backbone.history.start({ pushState: false });\n    }\n});\n\nexport default {\n    GalaxyApp: GalaxyAdminToolshedApp\n};\n"]}