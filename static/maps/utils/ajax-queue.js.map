{"version":3,"sources":["utils/ajax-queue.js"],"names":["AjaxQueue","initialFunctions","self","this","deferred","jQuery","Deferred","queue","responses","start","NamedAjaxQueue","names","call","init","forEach","fn","add","index","length","numToProcess","push","xhr","done","notify","fnIndex","response","total","shift","stop","prototype","running","causeFail","msg","resolve","fail","always","progress","create","constructor","obj","Error","JSON","stringify","name","hasOwnProperty","clear"],"mappings":"+DAUA,SAASA,EAAUC,GAEf,IAAIC,EAAOC,KASX,OAPAD,EAAKE,SAAWC,OAAOC,WAJ3BJ,EAAAK,SAEIL,EAAAM,aAEAN,EAAAA,aAAgBG,EAEhBH,EAAAA,SAAA,EAEAA,EAAAA,KAAKM,OACLN,EAAAO,QAEAP,EAkHJ,SAASQ,EAAeT,GACpB,IAAIC,EAAOC,KAGX,OAFAD,EAAKS,SACLX,EAAUY,KAAKT,KAAMF,GACdC,mDAlHPA,EAAAA,UAAAW,KAAA,SAAAZ,GAOA,IAAIC,EAAOC,KALXF,EAAAa,QAAA,SAAAC,GACHb,EAAAc,IAAAD,MAKGd,EAAAA,UAAAA,IAAiBa,SAAQC,GAExB,IAAAb,EAFDC,KAUIc,EAAQd,KAAKI,MAAMW,OAmBXhB,OAxBhBC,KAAAgB,cAAA,EAEIhB,KAAAI,MAAAa,KAAA,WACA,IAAIlB,EAAOe,EAOHI,EAAMN,IAJdM,EAAAC,KAAKH,SAAAA,GAOGjB,EAAKE,SAASmB,QALjBhB,KAAMa,EACHI,MAAAA,EAAUP,aACVI,SAAJI,MAKQC,EAAAA,OAAAA,SAAAA,GACAD,EAAAA,UAAAA,KAAUA,GAHOvB,EAArBK,MAAAW,OADJhB,EAAAK,MAAAoB,OAAAzB,GAQAA,EAAA0B,WAIQ1B,MAIPF,EAAA6B,UAPDpB,MAAA,WAYR,OAJKN,KArBDI,MAAAW,SAsBAf,KAAA2B,SAAA,EA7BJ3B,KAAAI,MAAAoB,OAAAxB,IAgCAA,MAOCH,EAND6B,UAAAD,KAAA,SAAAG,EAAAC,GAkBQ,OAVR7B,KAAA2B,SAAA,EAOI3B,KAAKI,SACDwB,EAJR/B,KAAAA,SAAU6B,OAAVG,GAEI7B,KAAK2B,SAALG,QAAA9B,KAAAK,WAEAL,KAAAgB,aAAe,EACXhB,KAAAC,SAAAC,OAAAC,WACAH,MAKJH,EAAA6B,UAAKzB,KAAWC,SAAhBU,GACA,OAAAZ,KAAOC,SAAPkB,KAAAP,IAGJf,EAAA6B,UAAAK,KAAA,SAAAnB,GACA,OAAAZ,KAAAC,SAAA8B,KAAAnB,IAGCf,EAFD6B,UAAAM,OAAA,SAAApB,GAGA,OAAAZ,KAAAC,SAAA+B,OAAApB,IAGCf,EAFD6B,UAAAO,SAAA,SAAArB,GAGA,OAAAZ,KAAAC,SAAAgC,SAAArB,IAMIf,EAAAqC,OAAO,SAAcD,GACxB,OAFD,IAAApC,EAAAC,GAAAG,WAsBAM,EAASA,UAAT,IAAwBT,GACpBqC,YAAA5B,EAGAA,EAAOR,UAAPc,IAAA,SAAAuB,GAGJ7B,IAAAA,EAAAA,eAAyB4B,UAAzBC,EAAuC7B,eAAvC,MAOQ,MAAM,IAAI8B,MAAJ,oEAA8EC,KAAKC,UAAUH,IAJ3G7B,IAAAA,KAAAA,MAAemB,eAAfU,EAA+BI,MAM3B,OAFIxC,KAAAQ,MAAA4B,EAAMI,OAAA,EAEV3C,EAASW,UAAMiC,IAAAA,KAAeL,KAA1BA,EAAqCxB,KAKzCL,EAAAmB,UAAAgB,MAAA,WAEA,OADA1C,KAAAQ,SACAR,MAMAO,EAAO2B,OAAP,SAAApC,GACH,OAHD,IAAAS,EAAAT,GAAAG,qBAQAM,UAAAA,EACIA,eAAWA","file":"../../scripts/utils/ajax-queue.js","sourcesContent":["//ASSUMES: jquery\n//=============================================================================\n/** @class AjaxQueue\n *  Class that allows queueing functions that return jQuery promises (such\n *  as ajax calls). Each function waits for the previous to complete before\n *  being called\n *\n *  @constructor accepts a list of functions and automatically begins\n *      processing them\n */\nfunction AjaxQueue(initialFunctions) {\n    //TODO: possibly rename to DeferredQueue\n    var self = this;\n    /** the main deferred for the entire queue - note: also sends notifications of progress */\n    self.deferred = jQuery.Deferred();\n    /** the queue array of functions */\n    self.queue = [];\n    /** cache the response from each deferred call - error or success */\n    self.responses = [];\n    /** total number of fn's to process */\n    self.numToProcess = 0;\n    /** is the queue processing/waiting for any calls to return? */\n    self.running = false;\n\n    self.init(initialFunctions || []);\n    self.start();\n\n    return self;\n}\n\n/** add all fns in initialFunctions (if any) to the queue */\nAjaxQueue.prototype.init = function init(initialFunctions) {\n    var self = this;\n    initialFunctions.forEach(fn => {\n        self.add(fn);\n    });\n};\n\n/** add a fn to the queue */\nAjaxQueue.prototype.add = function add(fn) {\n    //console.debug( 'AjaxQueue.prototype.add:', fn );\n    var self = this;\n\n    var index = this.queue.length;\n    this.numToProcess += 1;\n\n    this.queue.push(() => {\n        var fnIndex = index;\n        var xhr = fn();\n        // if successful, notify using the deferred to allow tracking progress\n        xhr.done(response => {\n            self.deferred.notify({\n                curr: fnIndex,\n                total: self.numToProcess,\n                response: response\n            });\n        });\n        // (regardless of previous error or success) if not last ajax call, shift and call the next\n        //  if last fn, resolve deferred\n        xhr.always(response => {\n            self.responses.push(response);\n            if (self.queue.length) {\n                self.queue.shift()();\n            } else {\n                self.stop();\n            }\n        });\n    });\n    return this;\n};\n\n/** start processing the queue */\nAjaxQueue.prototype.start = function start() {\n    if (this.queue.length) {\n        this.running = true;\n        this.queue.shift()();\n    }\n    return this;\n};\n\n/** stop the queue\n *  @param {boolean} causeFail  cause an error/fail on the main deferred\n *  @param {String} msg         message to send when rejecting the main deferred\n */\nAjaxQueue.prototype.stop = function stop(causeFail, msg) {\n    //TODO: doesn't abort current call\n    this.running = false;\n    this.queue = [];\n    if (causeFail) {\n        //TODO: spliced args instead\n        this.deferred.reject(msg);\n    } else {\n        this.deferred.resolve(this.responses);\n    }\n    this.numToProcess = 0;\n    this.deferred = jQuery.Deferred();\n    return this;\n};\n\n// only a handful of the deferred interface for now - possible YAGNI\n/** implement done from the jq deferred interface */\nAjaxQueue.prototype.done = function done(fn) {\n    return this.deferred.done(fn);\n};\n/** implement fail from the jq deferred interface */\nAjaxQueue.prototype.fail = function fail(fn) {\n    return this.deferred.fail(fn);\n};\n/** implement always from the jq deferred interface */\nAjaxQueue.prototype.always = function always(fn) {\n    return this.deferred.always(fn);\n};\n/** implement progress from the jq deferred interface */\nAjaxQueue.prototype.progress = function progress(fn) {\n    return this.deferred.progress(fn);\n};\n\n/** shortcut constructor / fire and forget\n *  @returns {Deferred} the queue's main deferred\n */\nAjaxQueue.create = function create(initialFunctions) {\n    return new AjaxQueue(initialFunctions).deferred;\n};\n\n//=============================================================================\n/** @class NamedAjaxQueue\n *  @augments AjaxQueue\n *  Allows associating a name with a deferring fn and prevents adding deferring\n *  fns if the name has already been used. Useful to prevent build up of duplicate\n *  async calls.\n *  Both the array initialFunctions sent to constructor and any added later with\n *  add() should be objects (NOT functions) of the form:\n *  { name: some unique id,\n *    fn:   the deferring fn or ajax call }\n */\nfunction NamedAjaxQueue(initialFunctions) {\n    var self = this;\n    self.names = {};\n    AjaxQueue.call(this, initialFunctions);\n    return self;\n}\nNamedAjaxQueue.prototype = new AjaxQueue();\nNamedAjaxQueue.prototype.constructor = NamedAjaxQueue;\n\n/** add the obj.fn to the queue if obj.name hasn't been used before */\nNamedAjaxQueue.prototype.add = function add(obj) {\n    //console.debug( 'NamedAjaxQueue.adding:', obj )\n    //console.debug( 'NamedAjaxQueue.prototype.add:', obj );\n    if (!(obj.hasOwnProperty(\"name\") && obj.hasOwnProperty(\"fn\"))) {\n        throw new Error(`NamedAjaxQueue.add requires an object with both \"name\" and \"fn\": ${JSON.stringify(obj)}`);\n    }\n    if (this.names.hasOwnProperty(obj.name)) {\n        //console.warn( 'name has been used:', obj.name );\n        return;\n    }\n    this.names[obj.name] = true;\n    //console.debug( '\\t names: ', this.names )\n    return AjaxQueue.prototype.add.call(this, obj.fn);\n    //console.debug( '\\t queue: ', this.queue.length );\n};\n\n/** override to remove names */\nNamedAjaxQueue.prototype.clear = function clear() {\n    this.names = {};\n    return this;\n};\n\n/** shortcut constructor / fire and forget\n *  @returns {Deferred} the queue's main deferred\n */\nNamedAjaxQueue.create = function create(initialFunctions) {\n    return new NamedAjaxQueue(initialFunctions).deferred;\n};\n\n//=============================================================================\nexport default {\n    AjaxQueue: AjaxQueue,\n    NamedAjaxQueue: NamedAjaxQueue\n};\n"]}