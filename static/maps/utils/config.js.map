{"version":3,"sources":["utils/config.js"],"names":["_","ConfigSetting","Backbone","Model","extend","initialize","options","key","this","get","set","defaults","find","label","type","default_value","mode","hidden","undefined","_util2","default","get_random_color","set_value","value","parseFloat","parseInt","model","to_key_value_dict","rval","setting","get_value","s","set_default_value","from_models_and_saved_values","models","saved_values","m","ConfigSettingCollection","ConfigSettingCollectionView","View","render","container","$el","collection","param","row","$","appendTo","append","text","attr","id","select","each","option","container_div","input","val","css","tip","click","e","left","removeClass","siblings","addClass","position","width","top","height","stopPropagation","document","bind","hide","unbind","callback","color","tooltip","fixed_farb_obj","farbtastic","tip_inner","new_color_icon","setColor","farb_obj","cancel_fn","modal","window","self","update_from_form","help","render_in_modal","title","Galaxy","ok_fn","show","body","keyCode","which","children","buttons","Cancel","OK","index","is"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get(\"key\");\n        this.set(\"id\", key);\n\n        // Set defaults based on key.\n        var defaults = _.find(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"color\",\n                    label: \"Color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 32,\n                    hidden: true\n                },\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                }\n            ],\n            s => s.key === key\n        );\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (this.get(\"value\") === undefined && this.get(\"default_value\") !== undefined) {\n            // Use default to set value (if present).\n            this.set_value(this.get(\"default_value\"));\n\n            // If no default value for color config, set random color.\n            if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                // For color setting, set random color.\n                this.set(\"value\", util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get(\"type\");\n\n        if (type === \"float\") {\n            value = parseFloat(value);\n        } else if (type === \"int\") {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({ value: value }, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend(\n    {\n        model: ConfigSetting,\n\n        /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n        to_key_value_dict: function() {\n            var rval = {};\n            this.each(setting => {\n                rval[setting.get(\"key\")] = setting.get(\"value\");\n            });\n\n            return rval;\n        },\n\n        /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n        get_value: function(key) {\n            var s = this.get(key);\n            if (s) {\n                return s.get(\"value\");\n            }\n\n            return undefined;\n        },\n\n        /**\n     * Set value for a setting.\n     */\n        set_value: function(key, value, options) {\n            var s = this.get(key);\n            if (s) {\n                return s.set_value(value, options);\n            }\n\n            return undefined;\n        },\n\n        /**\n      * Set default value for a setting.\n      */\n        set_default_value: function(key, default_value) {\n            var s = this.get(key);\n            if (s) {\n                return s.set(\"default_value\", default_value);\n            }\n\n            return undefined;\n        }\n    },\n    {\n        /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n        from_models_and_saved_values: function(models, saved_values) {\n            // If there are saved values, copy models and update with saved values.\n            if (saved_values) {\n                models = _.map(models, m => _.extend({}, m, { value: saved_values[m.key] }));\n            }\n\n            return new ConfigSettingCollection(models);\n        }\n    }\n);\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: \"config-settings-view\",\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each((param, index) => {\n            // Hidden params have no representation in the form\n            if (param.get(\"hidden\")) {\n                return;\n            }\n\n            // Build row for param.\n            var id = `param_${index}`;\n\n            var type = param.get(\"type\");\n            var value = param.get(\"value\");\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append(\n                $(\"<label />\")\n                    .attr(\"for\", id)\n                    .text(`${param.get(\"label\")}:`)\n            );\n            // Draw parameter as checkbox\n            if (type === \"bool\") {\n                row.append(\n                    $('<input type=\"checkbox\" />')\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .attr(\"checked\", value)\n                );\n            } else if (type === \"text\") {\n                // Draw parameter as textbox\n                row.append(\n                    $('<input type=\"text\"/>')\n                        .attr(\"id\", id)\n                        .val(value)\n                        .click(function() {\n                            $(this).select();\n                        })\n                );\n            } else if (type === \"select\") {\n                // Draw parameter as select area\n                var select = $(\"<select />\").attr(\"id\", id);\n                _.each(param.get(\"options\"), option => {\n                    $(\"<option/>\")\n                        .text(option.label)\n                        .attr(\"value\", option.value)\n                        .appendTo(select);\n                });\n                select.val(value);\n                row.append(select);\n            } else if (type === \"color\") {\n                // Draw parameter as color picker\n                var container_div = $(\"<div/>\").appendTo(row);\n\n                var input = $(\"<input />\")\n                    .attr(\"id\", id)\n                    .attr(\"name\", id)\n                    .val(value)\n                    .css(\"float\", \"left\")\n                    .appendTo(container_div)\n                    .click(function(e) {\n                        // Hide other pickers.\n                        $(\".tooltip\").removeClass(\"in\");\n\n                        // Show input's color picker.\n                        var tip = $(this)\n                            .siblings(\".tooltip\")\n                            .addClass(\"in\");\n                        tip\n                            .css({\n                                // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                // top: $(this).position().top + $(this.height)\n                                left: $(this).position().left + $(this).width() + 5,\n                                top: $(this).position().top - $(tip).height() / 2 + $(this).height() / 2\n                            })\n                            .show();\n\n                        // Click management:\n\n                        // Keep showing tip if clicking in tip.\n                        tip.click(e => {\n                            e.stopPropagation();\n                        });\n\n                        // Hide tip if clicking outside of tip.\n                        $(document).bind(\"click.color-picker\", () => {\n                            tip.hide();\n                            $(document).unbind(\"click.color-picker\");\n                        });\n\n                        // No propagation to avoid triggering document click (and tip hiding) above.\n                        e.stopPropagation();\n                    });\n\n                var // Icon for setting a new random color; behavior set below.\n                new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                    .addClass(\"icon-button arrow-circle\")\n                    .appendTo(container_div)\n                    .attr(\"title\", \"Set new random color\")\n                    .tooltip();\n\n                var // Color picker in tool tip style.\n                tip = $(\"<div class='tooltip right' style='position: absolute;' />\")\n                    .appendTo(container_div)\n                    .hide();\n\n                var // Inner div for padding purposes\n                tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip);\n\n                var tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(tip);\n\n                var farb_obj = $.farbtastic(tip_inner, {\n                    width: 100,\n                    height: 100,\n                    callback: input,\n                    color: value\n                });\n\n                // Clear floating.\n                container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (fixed_farb_obj => {\n                    new_color_icon.click(() => {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n            } else {\n                row.append(\n                    $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                );\n            }\n            // Help text\n            if (param.help) {\n                row.append($(\"<div class='help'/>\").text(param.help));\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this;\n\n        var cancel_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n        };\n\n        var ok_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n            self.update_from_form();\n        };\n\n        var check_enter_esc = e => {\n            if ((e.keyCode || e.which) === 27) {\n                // Escape key\n                cancel_fn();\n            } else if ((e.keyCode || e.which) === 13) {\n                // Enter key\n                ok_fn();\n            }\n        };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                Cancel: cancel_fn,\n                OK: ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each((setting, index) => {\n            if (!setting.get(\"hidden\")) {\n                // Set value from view.\n                var id = `param_${index}`;\n                var value = self.$el.find(`#${id}`).val();\n                if (setting.get(\"type\") === \"bool\") {\n                    value = self.$el.find(`#${id}`).is(\":checked\");\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n});\n\nexport default {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n"]}