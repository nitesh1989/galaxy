{"version":3,"sources":["utils/add-logging.js"],"names":["LOGGING_FNS","obj","namespace","undefined","prototype","addTo","_logNamespace","forEach","logFn","this","logger","emit","arguments"],"mappings":"iHACA,IAAIA,GAAe,MAAO,QAAS,OAAQ,OAAQ,QAAS,oBAD5D,SAAAC,EAAAC,GACA,IAAIF,OAAsBG,IAAtBH,EAAAA,UAAcC,EAAyBG,UAAzBH,EA2BF,YA1BhBE,IAAAD,IAOQG,EAAMC,cAAgBJ,GAE1BF,EAAAO,QAAA,SAAAC,GACAH,EAAAG,GAAA,WACA,GAAAC,KAAAC,OAGA,OAAAD,KAAAC,OAAAC,KACYJ,KAAQG,OAAAC,KAAAH,EAASC,KAAAH,cAAAM,WAErBH,KAAKC,OAAKA,GAIND,KAAOC,OAAKA,GAAOC,MAAKH,KAAOE,OAAKJ,gBAJxC,KASIL","file":"../../scripts/utils/add-logging.js","sourcesContent":["//==============================================================================\nvar LOGGING_FNS = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"];\n/** adds logging functions to an obj.prototype (or obj directly) adding a namespace for filtering\n *  @param {Object} obj\n *  @param {String} namespace\n */\nfunction addLogging(obj, namespace) {\n    var addTo = obj.prototype !== undefined ? obj.prototype : obj;\n    if (namespace !== undefined) {\n        addTo._logNamespace = namespace;\n    }\n    //yagni?: without this, may not capture Galaxy.config.debug and add Galaxy.logger properly\n    // if( window.Galaxy && window.Galaxy.config && window.Galaxy.config.debug ){\n    //     addTo.logger = window.Galaxy.logger;\n    // }\n\n    // give the object each\n    LOGGING_FNS.forEach(logFn => {\n        addTo[logFn] = function() {\n            if (!this.logger) {\n                return undefined;\n            }\n            if (this.logger.emit) {\n                return this.logger.emit(logFn, this._logNamespace, arguments);\n            }\n            if (this.logger[logFn]) {\n                //TODO:! there has to be a way to get the lineno/file into this\n                // http://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n                // http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\n                return this.logger[logFn].apply(this.logger, arguments);\n            }\n            return undefined;\n        };\n    });\n    return obj;\n}\n\n//==============================================================================\nexport default addLogging;\n"]}