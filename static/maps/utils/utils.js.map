{"version":3,"sources":["utils/utils.js"],"names":["deepeach","dict","callback","i","d","_","isObject","new_dict","request","options","ajaxConfig","contentType","type","data","url","indexOf","$","param","dataType","isEmptyObject","done","response","JSON","stringify","jQuery","parseJSON","e","console","debug","success","response_text","responseText","error","status","complete","roundToDecimalPlaces","number","numPlaces","placesMultiplier","Math","kb","mb","gb","tb","uid","length","Galaxy","root","appendTo","time","classname","name","el","value","css","remove","top","__utils__get__","cache_key","cache","window","sanitize","optionsDefault","defaults","textify","src","isEmpty","size","normal_font","numberPlaces","undefined","unit","bytesToString","rounded","__utils__uid__","isJSON","Date","hours","getHours","minutes","getMinutes","getDate","getMonth","getFullYear","clone","linkify","content","text","html","appendScriptStyle","lst","isArray","pos","toString","replace","lastIndexOf","substr","getQueryString","Array","setWindowTitle","replacedText","test","parse","obj","inputText","replacePattern1","replacePattern2","replacePattern3","script","styles","key","decodeURIComponent","RegExp","encodeURIComponent","document","title","config","brand","_localization2","default","cssGetAttribute"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\nimport _l from \"utils/localization\";\n/** Builds a basic iframe */\nfunction iframe(src) {\n    return `<iframe src=\"${src}\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>`;\n}\n\n/** Traverse through json */\nfunction deepeach(dict, callback) {\n    for (var i in dict) {\n        var d = dict[i];\n        if (_.isObject(d)) {\n            var new_dict = callback(d);\n            new_dict && (dict[i] = new_dict);\n            deepeach(d, callback);\n        }\n    }\n}\n\n/** Identifies urls and replaces them with anchors */\nfunction linkify(inputText) {\n    var replacedText;\n    var replacePattern1;\n    var replacePattern2;\n    var replacePattern3;\n\n    // URLs starting with http://, https://, or ftp://\n    replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n    replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n    // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n    replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n    // Change email addresses to mailto:: links.\n    replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n    replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n\n    return replacedText;\n}\n\n/** Clone */\nfunction clone(obj) {\n    return JSON.parse(JSON.stringify(obj) || null);\n}\n\n/**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\nfunction isJSON(text) {\n    return /^[\\],:{}\\s]*$/.test(\n        text\n            .replace(/\\\\[\"\\\\\\/bfnrtu]/g, \"@\")\n            .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, \"]\")\n            .replace(/(?:^|:|,)(?:\\s*\\[)+/g, \"\")\n    );\n}\n\n/**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\nfunction sanitize(content) {\n    return $(\"<div/>\")\n        .text(content)\n        .html();\n}\n\n/**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\nfunction isEmpty(value) {\n    if (!(value instanceof Array)) {\n        value = [value];\n    }\n    if (value.length === 0) {\n        return true;\n    }\n    for (var i in value) {\n        if ([\"__null__\", \"__undefined__\", null, undefined].indexOf(value[i]) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\nfunction textify(lst) {\n    if ($.isArray(lst)) {\n        var lst = lst.toString().replace(/,/g, \", \");\n        var pos = lst.lastIndexOf(\", \");\n        if (pos != -1) {\n            lst = `${lst.substr(0, pos)} or ${lst.substr(pos + 2)}`;\n        }\n        return lst;\n    }\n    return \"\";\n}\n\n/**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\nfunction get(options) {\n    top.__utils__get__ = top.__utils__get__ || {};\n    var cache_key = JSON.stringify(options);\n    if (options.cache && top.__utils__get__[cache_key]) {\n        options.success && options.success(top.__utils__get__[cache_key]);\n        window.console.debug(`utils.js::get() - Fetching from cache [${options.url}].`);\n    } else {\n        request({\n            url: options.url,\n            data: options.data,\n            success: function(response) {\n                top.__utils__get__[cache_key] = response;\n                options.success && options.success(response);\n            },\n            error: function(response, status) {\n                options.error && options.error(response, status);\n            }\n        });\n    }\n}\n\n/**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\nfunction request(options) {\n    // prepare ajax\n    var ajaxConfig = {\n        contentType: \"application/json\",\n        type: options.type || \"GET\",\n        data: options.data || {},\n        url: options.url\n    };\n    // encode data into url\n    if (ajaxConfig.type == \"GET\" || ajaxConfig.type == \"DELETE\") {\n        if (!$.isEmptyObject(ajaxConfig.data)) {\n            ajaxConfig.url += ajaxConfig.url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            ajaxConfig.url += $.param(ajaxConfig.data, true);\n        }\n        ajaxConfig.data = null;\n    } else {\n        ajaxConfig.dataType = \"json\";\n        ajaxConfig.url = ajaxConfig.url;\n        ajaxConfig.data = JSON.stringify(ajaxConfig.data);\n    }\n\n    // make request\n    $.ajax(ajaxConfig)\n        .done(response => {\n            if (typeof response === \"string\") {\n                try {\n                    response = response.replace(\"Infinity,\", '\"Infinity\",');\n                    response = jQuery.parseJSON(response);\n                } catch (e) {\n                    console.debug(e);\n                }\n            }\n            options.success && options.success(response);\n        })\n        .fail(response => {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON(response.responseText);\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error(response_text, response.status);\n        })\n        .always(() => {\n            options.complete && options.complete();\n        });\n}\n\n/**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\nfunction cssGetAttribute(classname, name) {\n    var el = $(`<div class=\"${classname}\"></div>`);\n    el.appendTo(\":eq(0)\");\n    var value = el.css(name);\n    el.remove();\n    return value;\n}\n\n/**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\nfunction cssLoadFile(url) {\n    if (!$(`link[href^=\"${url}\"]`).length) {\n        $(`<link href=\"${Galaxy.root}${url}\" rel=\"stylesheet\">`).appendTo(\"head\");\n    }\n}\n\n/**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\nfunction merge(options, optionsDefault) {\n    if (options) {\n        return _.defaults(options, optionsDefault);\n    } else {\n        return optionsDefault;\n    }\n}\n\n/**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\nfunction roundToDecimalPlaces(number, numPlaces) {\n    var placesMultiplier = 1;\n    for (var i = 0; i < numPlaces; i++) {\n        placesMultiplier *= 10;\n    }\n    return Math.round(number * placesMultiplier) / placesMultiplier;\n}\n\n// calculate on import\nvar kb = 1024;\n\nvar mb = kb * kb;\nvar gb = mb * kb;\nvar tb = gb * kb;\n/**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\nfunction bytesToString(size, normal_font, numberPlaces) {\n    numberPlaces = numberPlaces !== undefined ? numberPlaces : 1;\n    // identify unit\n    var unit = \"\";\n    if (size >= tb) {\n        size = size / tb;\n        unit = \"TB\";\n    } else if (size >= gb) {\n        size = size / gb;\n        unit = \"GB\";\n    } else if (size >= mb) {\n        size = size / mb;\n        unit = \"MB\";\n    } else if (size >= kb) {\n        size = size / kb;\n        unit = \"KB\";\n    } else if (size > 0) {\n        unit = \"b\";\n    } else {\n        return normal_font ? \"0 b\" : \"<strong>-</strong>\";\n    }\n    // return formatted string\n    var rounded = unit == \"b\" ? size : roundToDecimalPlaces(size, numberPlaces);\n    if (normal_font) {\n        return `${rounded} ${unit}`;\n    } else {\n        return `<strong>${rounded}</strong> ${unit}`;\n    }\n}\n\n/** Create a unique id */\nfunction uid() {\n    top.__utils__uid__ = top.__utils__uid__ || 0;\n    return `uid-${top.__utils__uid__++}`;\n}\n\n/** Create a time stamp */\nfunction time() {\n    var d = new Date();\n    var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n    var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes();\n    return `${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()}, ${hours}:${minutes}`;\n}\n\n/** Append script and style tags to Galaxy main application */\nfunction appendScriptStyle(data) {\n    // create a script tag inside head tag\n    if (data.script && data.script !== \"\") {\n        $(\"<script/>\", { type: \"text/javascript\" })\n            .text(data.script)\n            .appendTo(\"head\");\n    }\n    // create a style tag inside head tag\n    if (data.styles && data.styles !== \"\") {\n        $(\"<style/>\", { type: \"text/css\" })\n            .text(data.styles)\n            .appendTo(\"head\");\n    }\n}\n\n/** Get querystrings from url */\nfunction getQueryString(key) {\n    return decodeURIComponent(\n        window.location.search.replace(\n            new RegExp(`^(?:.*[&\\\\?]${encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\")}(?:\\\\=([^&]*))?)?.*$`, \"i\"),\n            \"$1\"\n        )\n    );\n}\n\nfunction setWindowTitle(title) {\n    if (title) {\n        window.document.title = `Galaxy ${window.Galaxy.config.brand ? ` | ${window.Galaxy.config.brand}` : \"\"} | ${_l(\n            title\n        )}`;\n    } else {\n        window.document.title = `Galaxy ${window.Galaxy.config.brand ? ` | ${window.Galaxy.config.brand}` : \"\"}`;\n    }\n}\n\nexport default {\n    cssLoadFile: cssLoadFile,\n    cssGetAttribute: cssGetAttribute,\n    get: get,\n    merge: merge,\n    iframe: iframe,\n    bytesToString: bytesToString,\n    uid: uid,\n    time: time,\n    request: request,\n    sanitize: sanitize,\n    textify: textify,\n    isEmpty: isEmpty,\n    deepeach: deepeach,\n    isJSON: isJSON,\n    clone: clone,\n    linkify: linkify,\n    appendScriptStyle: appendScriptStyle,\n    getQueryString: getQueryString,\n    setWindowTitle: setWindowTitle\n};\n"]}