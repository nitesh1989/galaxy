{"version":3,"sources":["layout/page.js"],"names":["View","Backbone","extend","el","className","_panelids","initialize","options","self","this","config","_","defaults","message_box_visible","message_box_content","message_box_class","show_inactivity_warning","inactivity_box_content","Galaxy","modal","_uiModal2","default","view","title","setWindowTitle","allow_title_display","Router","$el","attr","_template","replaceWith","display","masthead","$","center","append","$messagebox","$inactivebox","each","panel_id","router","panel_class","panel_class_name","panel_instance","toString","_panel2","SidePanel","id","html","render","history","root","pushState","remove","renderMessageBox","renderInactivityBox","renderPanels","_checkCommunicationServerOnline","content","level","addClass","hide","verificationLink","text","toggle","show","panel","panels","css","join","host","preferences","communication_server_host","port","window","communication_server_port","user","attributes","url","indexOf","communication_server","ajax","$chat_icon_element","success","data","error"],"mappings":"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","file":"../../scripts/layout/page.js","sourcesContent":["import Masthead from \"layout/masthead\";\nimport Panel from \"layout/panel\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Utils from \"utils/utils\";\nvar View = Backbone.View.extend({\n    el: \"body\",\n    className: \"full-content\",\n    _panelids: [\"left\", \"right\"],\n\n    initialize: function(options) {\n        var self = this;\n        this.config = _.defaults(options.config || {}, {\n            message_box_visible: false,\n            message_box_content: \"\",\n            message_box_class: \"info\",\n            show_inactivity_warning: false,\n            inactivity_box_content: \"\"\n        });\n\n        // attach global objects, build mastheads\n        Galaxy.modal = this.modal = new Modal.View();\n        Galaxy.display = this.display = view => {\n            if (view.title) {\n                Utils.setWindowTitle(view.title);\n                view.allow_title_display = false;\n            } else {\n                Utils.setWindowTitle();\n                view.allow_title_display = true;\n            }\n            self.center.display(view);\n        };\n        Galaxy.router = this.router = options.Router && new options.Router(self, options);\n        this.masthead = new Masthead.View(this.config);\n        this.center = new Panel.CenterPanel();\n\n        // build page template\n        this.$el.attr(\"scroll\", \"no\");\n        this.$el.html(this._template());\n        this.$(\"#masthead\").replaceWith(this.masthead.$el);\n        this.$(\"#center\").append(this.center.$el);\n        this.$el.append(this.masthead.frame.$el);\n        this.$el.append(this.modal.$el);\n        this.$messagebox = this.$(\"#messagebox\");\n        this.$inactivebox = this.$(\"#inactivebox\");\n\n        // build panels\n        this.panels = {};\n        _.each(this._panelids, panel_id => {\n            var panel_class_name = panel_id.charAt(0).toUpperCase() + panel_id.slice(1);\n            var panel_class = options[panel_class_name];\n            if (panel_class) {\n                var panel_instance = new panel_class(self, options);\n                self[panel_instance.toString()] = panel_instance;\n                self.panels[panel_id] = new Panel.SidePanel({\n                    id: panel_id,\n                    el: self.$(`#${panel_id}`),\n                    view: panel_instance\n                });\n            }\n        });\n        this.render();\n\n        // start the router\n        this.router &&\n            Backbone.history.start({\n                root: Galaxy.root,\n                pushState: true\n            });\n    },\n\n    render: function() {\n        // TODO: Remove this line after select2 update\n        $(\".select2-hidden-accessible\").remove();\n        this.masthead.render();\n        this.renderMessageBox();\n        this.renderInactivityBox();\n        this.renderPanels();\n        this._checkCommunicationServerOnline();\n        return this;\n    },\n\n    /** Render message box */\n    renderMessageBox: function() {\n        if (this.config.message_box_visible) {\n            var content = this.config.message_box_content || \"\";\n            var level = this.config.message_box_class || \"info\";\n            this.$el.addClass(\"has-message-box\");\n            this.$messagebox\n                .attr(\"class\", `panel-${level}-message`)\n                .html(content)\n                .toggle(!!content)\n                .show();\n        } else {\n            this.$el.removeClass(\"has-message-box\");\n            this.$messagebox.hide();\n        }\n        return this;\n    },\n\n    /** Render inactivity warning */\n    renderInactivityBox: function() {\n        if (this.config.show_inactivity_warning) {\n            var content = this.config.inactivity_box_content || \"\";\n            var verificationLink = $(\"<a/>\")\n                .attr(\"href\", `${Galaxy.root}user/resend_verification`)\n                .text(\"Resend verification\");\n            this.$el.addClass(\"has-inactivity-box\");\n            this.$inactivebox\n                .html(`${content} `)\n                .append(verificationLink)\n                .toggle(!!content)\n                .show();\n        } else {\n            this.$el.removeClass(\"has-inactivity-box\");\n            this.$inactivebox.hide();\n        }\n        return this;\n    },\n\n    /** Render panels */\n    renderPanels: function() {\n        var self = this;\n        _.each(this._panelids, panel_id => {\n            var panel = self.panels[panel_id];\n            if (panel) {\n                panel.render();\n            } else {\n                self.$(\"#center\").css(panel_id, 0);\n                self.$(`#${panel_id}`).hide();\n            }\n        });\n        return this;\n    },\n\n    /** body template */\n    _template: function() {\n        return [\n            '<div id=\"everything\">',\n            '<div id=\"background\"/>',\n            '<div id=\"masthead\"/>',\n            '<div id=\"messagebox\"/>',\n            '<div id=\"inactivebox\" class=\"panel-warning-message\" />',\n            '<div id=\"left\" />',\n            '<div id=\"center\" />',\n            '<div id=\"right\" />',\n            \"</div>\",\n            '<div id=\"dd-helper\" />'\n        ].join(\"\");\n    },\n\n    toString: function() {\n        return \"PageLayoutView\";\n    },\n\n    /** Check if the communication server is online and show the icon otherwise hide the icon */\n    _checkCommunicationServerOnline: function() {\n        var host = window.Galaxy.config.communication_server_host;\n        var port = window.Galaxy.config.communication_server_port;\n        var preferences = window.Galaxy.user.attributes.preferences;\n        var $chat_icon_element = $(\"#show-chat-online\");\n        /** Check if the user has deactivated the communication in it's personal settings */\n        if (preferences && [\"1\", \"true\"].indexOf(preferences.communication_server) != -1) {\n            // See if the configured communication server is available\n            $.ajax({\n                url: `${host}:${port}`\n            })\n                .success(data => {\n                    // enable communication only when a user is logged in\n                    if (window.Galaxy.user.id !== null) {\n                        if ($chat_icon_element.css(\"visibility\") === \"hidden\") {\n                            $chat_icon_element.css(\"visibility\", \"visible\");\n                        }\n                    }\n                })\n                .error(data => {\n                    // hide the communication icon if the communication server is not available\n                    $chat_icon_element.css(\"visibility\", \"hidden\");\n                });\n        } else {\n            $chat_icon_element.css(\"visibility\", \"hidden\");\n        }\n    }\n});\n\nexport default { View: View };\n"]}