{"version":3,"sources":["mvc/job/job-model.js"],"names":["searchableMixin","_baseMvc2","default","SearchableModelMixin","Job","Backbone","Model","extend","LoggableMixin","mixin","_logNamespace","defaults","model_class","tool_id","exit_code","logNamespace","outputs","create_time","state","_states2","NEW","response","options","params","this","parseParams","inputs","update_time","value","key","newParams","JSON","parse","initialize","attributes","debug","get","silent","outputCollection","_historyContents2","HistoryContents","_setUpListeners","on","newState","log","inReadyState","trigger","currModel","previous","_","contains","READY_STATES","hasDetails","urlRoot","Galaxy","root","toString","join","JobCollection","Collection","model","url","intialize","models","console","ids","item","filter","job","haveDetails","all","queueDetailFetching","collection","queue","_ajaxQueue2","AjaxQueue","map","fetch","notReady","done","matches","matchesWhat","length","fromHistory","historyId","data","history_id","window"],"mappings":"yTAOIA,QAAkBC,EAAAC,QAASC,sBAG3BC,EAAMC,SAASC,MAAMC,OAAON,EAAAC,QAASM,eAAeD,OACpDN,EAAAC,QAASO,MACLT,GAEIU,cATO,OAYPC,UACIC,YAAa,MAEbC,QAAS,KACTC,UAAW,KAhBvBC,UACJC,WACIhB,UAoBYiB,YAAa,KAjBnBZ,YAAeE,KAGjBW,MAAAC,EAAAjB,QAAAkB,KAIIT,MAAU,SAAAU,EAAAC,GAkBN,OAjBAV,EAAaW,OADPC,KAAAC,YAAAJ,EAAAE,QAkBCF,GAZPK,YANM,SAAAH,GAONP,IAAAA,KAIAW,OAHAJ,EAAAA,KARMA,EAAA,SAAAK,EAAAC,GAyBFC,EAAUD,GAAOE,KAAKC,MAAMJ,KAdhCD,GAIJM,WAAA,SAAAC,EAAAZ,GACOE,KAAAW,MAASd,KAAT,mBAA4Ba,EAAAZ,GAE/BE,KAAOH,IAAAA,SAAPG,KAAAC,YAAAD,KAAAY,IAAA,YAtBoBC,QAAA,IA0BxBZ,KAAaa,iBAAAJ,EAAiBI,kBAAA,IAAAC,EAAArC,QAAAsC,oBACtBV,KAAAA,mBAsBRW,gBAAiB,WAdjBR,KAAYS,GAAA,eAASR,SAAAA,EAATS,GACHR,KAASS,IAAdpB,KAAKW,sBAAiCD,EAAtCS,GAiBQnB,KAAKqB,gBAfJrB,KAATsB,QAAwBrB,cAAYsB,EAASJ,EAAYnB,KAAAwB,SAAA,aAyB7DH,aAAc,WACV,OAAOI,EAAEC,SAAS/B,EAAAjB,QAAOiD,aAAc3B,KAAKY,IAAI,WAZ5CgB,WAAA,WAEI,OAAAH,EAAKH,QAAQtB,KAAAY,IAAA,aAKzBiB,QAAAC,OAAAC,KAAA,WA3DwBC,SAAA,WAwFpB,OAAQ,OAAQhC,KAAKY,IAAI,MAAO,IAAKZ,KAAKY,IAAI,WAAY,KAAKqB,KAAK,QAPxEC,EAAArD,SAAAsD,WAAApD,OAAAN,EAAAC,QAAAM,eAAAD,QAEAG,cA3FO,OA6FPkD,MAAAxD,EAGIiD,QAAQC,OAADC,KAAP,WACHM,IAAA,WA5Fb,OAAArC,KAAA6B,SAkGAS,UAAA,SAAAC,EAAAzC,GAeY0C,QAAQ7B,MAAM4B,EAAQzC,IAP1B2C,IAAA,WACAZ,OAAYC,KAAOC,IAAnB,SAAAW,GAAA,OAAAA,EANkC9B,IAAA,SAY9B4B,SAAAA,WAZ8B,OAAAxC,KAAA2C,OAAA,SAAAC,GAAA,OAAAA,EAAAvB,kBA+BlCwB,YAAa,WACT,OAAO7C,KAAK8C,IAAI,SAAAF,GAAA,OAAOA,EAAIhB,gBAX9BmB,oBArBiC,WAsC9B,IAAIC,EAAahD,KAEbiD,EAAQ,IAAIC,EAAAxE,QAAWyE,UAAUnD,KAAKoD,IAAI,SAAAR,GAAA,OAAO,WAAA,OAAMA,EAAIS,OAAQxC,QAAQ,QAb5D,OADvByC,EAAUC,KAAA,WACNP,EAAYL,QAAO,oBAAnBM,GA2BJO,QAAS,SAASC,GAnBlB,OAAAzD,KAAA2C,OAAA,SAAAC,GAAA,OAAAA,EAAAY,QAAAC,MAKIzB,SAAIiB,WAA0C,OAAA,iBAAOjD,KAAA0D,OAAA,KAAAzB,KAAA,OAIpD0B,YAFD,SAAAC,GAGApB,QAAOS,MAAPjD,MA7C8B,IAuE1BgD,EAAa,IAvEahD,SA2E9B,OA3BJgD,EAAAK,OAAAQ,MAAAC,WAAAF,KAAAL,KAAA,WACAQ,OAAAd,MAAAD,EAAAD,wBA0BWC,gBAnBVpE,IAxDiCA,EAmFtCsD,cAAeA","file":"../../../scripts/mvc/job/job-model.js","sourcesContent":["import HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport STATES from \"mvc/dataset/states\";\nimport AJAX_QUEUE from \"utils/ajax-queue\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nvar logNamespace = \"jobs\";\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class Represents a job running or ran on the server job handlers.\n */\nvar Job = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n    BASE_MVC.mixin(\n        searchableMixin,\n        /** @lends Job.prototype */ {\n            _logNamespace: logNamespace,\n\n            /** default attributes for a model */\n            defaults: {\n                model_class: \"Job\",\n\n                tool_id: null,\n                exit_code: null,\n\n                inputs: {},\n                outputs: {},\n                params: {},\n\n                create_time: null,\n                update_time: null,\n                state: STATES.NEW\n            },\n\n            /** override to parse params on incomming */\n            parse: function(response, options) {\n                response.params = this.parseParams(response.params);\n                return response;\n            },\n\n            /** override to treat param values as json */\n            parseParams: function(params) {\n                var newParams = {};\n                _.each(params, (value, key) => {\n                    newParams[key] = JSON.parse(value);\n                });\n                return newParams;\n            },\n\n            /** instance vars and listeners */\n            initialize: function(attributes, options) {\n                this.debug(`${this}(Job).initialize`, attributes, options);\n\n                this.set(\"params\", this.parseParams(this.get(\"params\")), {\n                    silent: true\n                });\n\n                this.outputCollection = attributes.outputCollection || new HISTORY_CONTENTS.HistoryContents([]);\n                this._setUpListeners();\n            },\n\n            /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n            _setUpListeners: function() {\n                // if the state has changed and the new state is a ready state, fire an event\n                this.on(\"change:state\", function(currModel, newState) {\n                    this.log(`${this} has changed state:`, currModel, newState);\n                    if (this.inReadyState()) {\n                        this.trigger(\"state:ready\", currModel, newState, this.previous(\"state\"));\n                    }\n                });\n            },\n\n            // ........................................................................ common queries\n            /** Is this job in a 'ready' state; where 'Ready' states are states where no\n     *      processing is left to do on the server.\n     */\n            inReadyState: function() {\n                return _.contains(STATES.READY_STATES, this.get(\"state\"));\n            },\n\n            /** Does this model already contain detailed data (as opposed to just summary level data)? */\n            hasDetails: function() {\n                //?? this may not be reliable\n                return !_.isEmpty(this.get(\"outputs\"));\n            },\n\n            // ........................................................................ ajax\n            /** root api url */\n            urlRoot: `${Galaxy.root}api/jobs`,\n            //url : function(){ return this.urlRoot; },\n\n            // ........................................................................ searching\n            // see base-mvc, SearchableModelMixin\n            /** what attributes of an Job will be used in a text search */\n            //searchAttributes : [\n            //    'tool'\n            //],\n\n            // ........................................................................ misc\n            /** String representation */\n            toString: function() {\n                return [\"Job(\", this.get(\"id\"), \":\", this.get(\"tool_id\"), \")\"].join(\"\");\n            }\n        }\n    )\n);\n\n//==============================================================================\n/** @class Backbone collection for Jobs.\n */\nvar JobCollection = Backbone.Collection.extend(BASE_MVC.LoggableMixin).extend(\n    /** @lends JobCollection.prototype */ {\n        _logNamespace: logNamespace,\n\n        model: Job,\n\n        /** root api url */\n        urlRoot: `${Galaxy.root}api/jobs`,\n        url: function() {\n            return this.urlRoot;\n        },\n\n        intialize: function(models, options) {\n            console.debug(models, options);\n        },\n\n        // ........................................................................ common queries\n        /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n        ids: function() {\n            return this.map(item => item.get(\"id\"));\n        },\n\n        /** Get jobs that are not ready\n     *  @returns array of content models\n     */\n        notReady: function() {\n            return this.filter(job => !job.inReadyState());\n        },\n\n        /** return true if any jobs don't have details */\n        haveDetails: function() {\n            return this.all(job => job.hasDetails());\n        },\n\n        // ........................................................................ ajax\n        /** fetches all details for each job in the collection using a queue */\n        queueDetailFetching: function() {\n            var collection = this;\n\n            var queue = new AJAX_QUEUE.AjaxQueue(this.map(job => () => job.fetch({ silent: true })));\n\n            queue.done(() => {\n                collection.trigger(\"details-loaded\");\n            });\n            return queue;\n        },\n\n        //toDAG : function(){\n        //    return new JobDAG( this.toJSON() );\n        //},\n\n        // ........................................................................ sorting/filtering\n        /** return a new collection of jobs whose attributes contain the substring matchesWhat */\n        matches: function(matchesWhat) {\n            return this.filter(job => job.matches(matchesWhat));\n        },\n\n        // ........................................................................ misc\n        /** String representation. */\n        toString: function() {\n            return [\"JobCollection(\", this.length, \")\"].join(\"\");\n        }\n\n        //----------------------------------------------------------------------------- class vars\n    },\n    {\n        /** class level fn for fetching the job details for all jobs in a history */\n        fromHistory: function(historyId) {\n            console.debug(this);\n            var Collection = this;\n            var collection = new Collection([]);\n            collection.fetch({ data: { history_id: historyId } }).done(() => {\n                window.queue = collection.queueDetailFetching();\n            });\n            return collection;\n        }\n    }\n);\n\n//=============================================================================\nexport default {\n    Job: Job,\n    JobCollection: JobCollection\n};\n"]}