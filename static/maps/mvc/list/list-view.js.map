{"version":3,"sources":["mvc/list/list-view.js"],"names":["ListPanel","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","viewClass","_listItem2","ListItemView","collectionClass","Collection","tagName","className","fxSpeed","emptyMsg","_localization2","noneFoundMsg","initialize","attributes","options","logger","this","log","_","has","filters","undefined","selecting","lastSelected","searchFor","collection","_createDefaultCollection","$scrollContainer","title","subtitle","views","_setUpListeners","loading","off","on","error","msg","details","_showLoadingIndicator","loading-done","_hideLoadingIndicator","_setUpCollectionListeners","_setUpViewListeners","stopListening","listenTo","model","xhr","trigger","changes","renderAll","added","length","removed","renderItems","addItemView","first","removeItemView","view:selected","view","ev","lastSelectedView","selectRange","altKey","showSelectors","selected","push","id","view:de-selected","without","render","speed","$newRender","_setUpBehaviors","_queueNewRender","_buildNewRender","debug","$","templates","el","_renderControls","_renderTitle","_renderSubtitle","_renderSearch","$controls","controls","replaceWith","$where","panel","queue","$el","fadeOut","next","_swapNewRender","fadeIn","attr","children","find","tooltip","_renderMultiselectActionMenu","$menu","actions","multiselectActions","$newMenu","$actions","html","join","map","action","func","append","parent","$list","$messages","$whereTo","freeViews","shownModels","_filterCollection","itemModel","_renderEmptyMessage","_attachItems","toggle","_filterItem","filter","_createItemView","ViewClass","_getItemViewClass","_getItemViewOptions","self","forEach","_destroyItemViews","v","contains","expanded","_setUpItemViewListeners","draggable","dragItems","args","Array","prototype","slice","call","arguments","json","apply","dataTransfer","getSelectedModels","toJSON","setData","JSON","stringify","_renderItemView$el","text","$emptyMessage","expandAll","each","expand","collapseAll","collapse","modelIndex","is","_attachView","useFx","isUndefined","show","splice","_insertIntoListAt","hide","slideDown","index","$what","prepend","after","remove","viewFromModelId","viewFromModel","viewsWhereModel","properties","indexA","indexB","isMatch","viewRange","viewB","viewA","indexOf","placeholder","searchPlaceholder","searchInput","searchItems","initialVal","onfirstsearch","bind","_firstSearch","onsearch","clearSearch","force","$search","val","THROTTLE_SELECTOR_FX_AT","hideSelectors","slideUp","hideSelector","toggleSelectors","selectAll","event","select","deselectAll","range","deselect","getSelectedViews","indicator","constructor","callback","_loadingIndicator2","scrollPosition","scrollTop","scrollTo","pos","scrollToItem","animate","scrollToTop","scrollToId","events","click .select-all","click .deselect-all","toString","wrapTemplate","ModelListPanel","modelCollectionKey","setModel","freeModel","oldModelId","get","unshift","_setUpModelListeners","controlsTemplate","info","clone"],"mappings":"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","file":"../../../scripts/mvc/list/list-view.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport LoadingIndicator from \"ui/loading-indicator\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/search-input\";\n\nvar logNamespace = \"list\";\n/* ============================================================================\nTODO:\n\n============================================================================ */\n/** @class View for a list/collection of models and the sub-views of those models.\n *      Sub-views must (at least have the interface if not) inherit from ListItemView.\n *      (For a list panel that also includes some 'container' model (History->HistoryContents)\n *      use ModelWithListPanel)\n *\n *  Allows for:\n *      searching collection/sub-views\n *      selecting/multi-selecting sub-views\n *\n *  Currently used:\n *      for dataset/dataset-choice\n *      as superclass of ModelListPanel\n */\nvar ListPanel = Backbone.View.extend(BASE_MVC.LoggableMixin).extend(\n    /** @lends ListPanel.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** class to use for constructing the sub-views */\n        viewClass: LIST_ITEM.ListItemView,\n        /** class to used for constructing collection of sub-view models */\n        collectionClass: Backbone.Collection,\n\n        tagName: \"div\",\n        className: \"list-panel\",\n\n        /** (in ms) that jquery effects will use */\n        fxSpeed: \"fast\",\n\n        /** string to display when the collection has no contents */\n        emptyMsg: _l(\"This list is empty\"),\n        /** displayed when no items match the search terms */\n        noneFoundMsg: _l(\"No matching items found\"),\n        /** string used for search placeholder */\n        searchPlaceholder: _l(\"search\"),\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the list\n     */\n        initialize: function(attributes, options) {\n            attributes = attributes || {};\n            // set the logger if requested\n            if (attributes.logger) {\n                this.logger = attributes.logger;\n            }\n            this.log(`${this}.initialize:`, attributes);\n\n            // ---- instance vars\n            /** how quickly should jquery fx run? */\n            this.fxSpeed = _.has(attributes, \"fxSpeed\") ? attributes.fxSpeed : this.fxSpeed;\n\n            /** filters for displaying subviews */\n            this.filters = [];\n            /** current search terms */\n            this.searchFor = attributes.searchFor || \"\";\n\n            /** loading indicator */\n            // this.indicator = new LoadingIndicator( this.$el );\n\n            /** currently showing selectors on items? */\n            this.selecting = attributes.selecting !== undefined ? attributes.selecting : true;\n            //this.selecting = false;\n\n            /** cached selected item.model.ids to persist btwn renders */\n            this.selected = attributes.selected || [];\n            /** the last selected item.model.id */\n            this.lastSelected = null;\n\n            /** are sub-views draggable */\n            this.dragItems = attributes.dragItems || false;\n\n            /** list item view class (when passed models) */\n            this.viewClass = attributes.viewClass || this.viewClass;\n\n            /** list item views */\n            this.views = [];\n            /** list item models */\n            this.collection = attributes.collection || this._createDefaultCollection();\n\n            /** filter fns run over collection items to see if they should show in the list */\n            this.filters = attributes.filters || [];\n\n            /** override $scrollContainer fn via attributes - fn should return jq for elem to call scrollTo on */\n            this.$scrollContainer = attributes.$scrollContainer || this.$scrollContainer;\n\n            /** @type {String} generic title */\n            this.title = attributes.title || \"\";\n            /** @type {String} generic subtitle */\n            this.subtitle = attributes.subtitle || \"\";\n\n            this._setUpListeners();\n        },\n\n        // ------------------------------------------------------------------------ listeners\n        /** create any event listeners for the list */\n        _setUpListeners: function() {\n            this.off();\n\n            //TODO: move errorHandler down into list-view from history-view or\n            //  pass to global error handler (Galaxy)\n            this.on({\n                error: function(model, xhr, options, msg, details) {\n                    //this.errorHandler( model, xhr, options, msg, details );\n                    console.error(model, xhr, options, msg, details);\n                },\n                // show hide the loading indicator\n                loading: function() {\n                    this._showLoadingIndicator(\"loading...\", 40);\n                },\n                \"loading-done\": function() {\n                    this._hideLoadingIndicator(40);\n                }\n            });\n\n            // throw the first render up as a diff namespace using once (for outside consumption)\n            this.once(\"rendered\", function() {\n                this.trigger(\"rendered:initial\", this);\n            });\n\n            this._setUpCollectionListeners();\n            this._setUpViewListeners();\n            return this;\n        },\n\n        /** create and return a collection for when none is initially passed */\n        _createDefaultCollection: function() {\n            // override\n            return new this.collectionClass([]);\n        },\n\n        /** listening for collection events */\n        _setUpCollectionListeners: function() {\n            this.log(`${this}._setUpCollectionListeners`, this.collection);\n            this.stopListening(this.collection);\n\n            // bubble up error events\n            this.listenTo(this.collection, {\n                error: function(model, xhr, options, msg, details) {\n                    this.trigger(\"error\", model, xhr, options, msg, details);\n                },\n                update: function(collection, options) {\n                    var changes = options.changes;\n                    // console.info( collection + ', update:', changes, '\\noptions:', options );\n                    // more than one: render everything\n                    if (options.renderAll || changes.added.length + changes.removed.length > 1) {\n                        return this.renderItems();\n                    }\n                    // otherwise, let the single add/remove handlers do it\n                    if (changes.added.length === 1) {\n                        return this.addItemView(_.first(changes.added), collection, options);\n                    }\n                    if (changes.removed.length === 1) {\n                        return this.removeItemView(_.first(changes.removed), collection, options);\n                    }\n                }\n            });\n            return this;\n        },\n\n        /** listening for sub-view events that bubble up with the 'view:' prefix */\n        _setUpViewListeners: function() {\n            this.log(`${this}._setUpViewListeners`);\n\n            // shift to select a range\n            this.on({\n                \"view:selected\": function(view, ev) {\n                    if (ev && ev.shiftKey && this.lastSelected) {\n                        var lastSelectedView = this.viewFromModelId(this.lastSelected);\n                        if (lastSelectedView) {\n                            this.selectRange(view, lastSelectedView);\n                        }\n                    } else if (ev && ev.altKey && !this.selecting) {\n                        this.showSelectors();\n                    }\n                    this.selected.push(view.model.id);\n                    this.lastSelected = view.model.id;\n                },\n\n                \"view:de-selected\": function(view, ev) {\n                    this.selected = _.without(this.selected, view.model.id);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ rendering\n        /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n        render: function(speed) {\n            this.log(`${this}.render`, speed);\n            var $newRender = this._buildNewRender();\n            this._setUpBehaviors($newRender);\n            this._queueNewRender($newRender, speed);\n            return this;\n        },\n\n        /** Build a temp div containing the new children for the view's $el. */\n        _buildNewRender: function() {\n            this.debug(`${this}(ListPanel)._buildNewRender`);\n            var $newRender = $(this.templates.el({}, this));\n            this._renderControls($newRender);\n            this._renderTitle($newRender);\n            this._renderSubtitle($newRender);\n            this._renderSearch($newRender);\n            this.renderItems($newRender);\n            return $newRender;\n        },\n\n        /** Build a temp div containing the new children for the view's $el. */\n        _renderControls: function($newRender) {\n            this.debug(`${this}(ListPanel)._renderControls`);\n            var $controls = $(this.templates.controls({}, this));\n            $newRender.find(\".controls\").replaceWith($controls);\n            return $controls;\n        },\n\n        /** return a jQuery object containing the title DOM */\n        _renderTitle: function($where) {\n            //$where = $where || this.$el;\n            //$where.find( '.title' ).replaceWith( ... )\n        },\n\n        /** return a jQuery object containing the subtitle DOM (if any) */\n        _renderSubtitle: function($where) {\n            //$where = $where || this.$el;\n            //$where.find( '.title' ).replaceWith( ... )\n        },\n\n        /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n        _queueNewRender: function($newRender, speed) {\n            speed = speed === undefined ? this.fxSpeed : speed;\n            var panel = this;\n            panel.log(\"_queueNewRender:\", $newRender, speed);\n\n            $(panel).queue(\"fx\", [\n                next => {\n                    panel.$el.fadeOut(speed, next);\n                },\n                next => {\n                    panel._swapNewRender($newRender);\n                    next();\n                },\n                next => {\n                    panel.$el.fadeIn(speed, next);\n                },\n                next => {\n                    panel.trigger(\"rendered\", panel);\n                    next();\n                }\n            ]);\n        },\n\n        /** empty out the current el, move the $newRender's children in */\n        _swapNewRender: function($newRender) {\n            this.$el\n                .empty()\n                .attr(\"class\", this.className)\n                .append($newRender.children());\n            if (this.selecting) {\n                this.showSelectors(0);\n            }\n            return this;\n        },\n\n        /** Set up any behaviors, handlers (ep. plugins) that need to be called when the entire view has been built but\n     *  not attached to the page yet.\n     */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            this.$controls($where)\n                .find(\"[title]\")\n                .tooltip();\n            // set up the pupup for actions available when multi selecting\n            this._renderMultiselectActionMenu($where);\n            return this;\n        },\n\n        /** render a menu containing the actions available to sets of selected items */\n        _renderMultiselectActionMenu: function($where) {\n            $where = $where || this.$el;\n            var $menu = $where.find(\".list-action-menu\");\n            var actions = this.multiselectActions();\n            if (!actions.length) {\n                return $menu.empty();\n            }\n\n            var $newMenu = $(\n                [\n                    '<div class=\"list-action-menu btn-group\">',\n                    '<button class=\"list-action-menu-btn btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                    _l(\"For all selected\"),\n                    \"...\",\n                    \"</button>\",\n                    '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n                    \"</ul>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n            var $actions = actions.map(action => {\n                var html = ['<li><a href=\"javascript:void(0);\">', action.html, \"</a></li>\"].join(\"\");\n                return $(html).click(ev => {\n                    ev.preventDefault();\n                    return action.func(ev);\n                });\n            });\n            $newMenu.find(\"ul\").append($actions);\n            $menu.replaceWith($newMenu);\n            return $newMenu;\n        },\n\n        /** return a list of plain objects used to render multiselect actions menu. Each object should have:\n     *      html: an html string used as the anchor contents\n     *      func: a function called when the anchor is clicked (passed the click event)\n     */\n        multiselectActions: function() {\n            return [];\n        },\n\n        // ------------------------------------------------------------------------ sub-$element shortcuts\n        /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n        $scrollContainer: function($where) {\n            // override or set via attributes.$scrollContainer\n            return ($where || this.$el).parent().parent();\n        },\n        /** convenience selector for the section that displays the list controls */\n        $controls: function($where) {\n            return ($where || this.$el).find(\"> .controls\");\n        },\n        /** list-items: where the subviews are contained in the view's dom */\n        $list: function($where) {\n            return ($where || this.$el).find(\"> .list-items\");\n        },\n        /** container where list messages are attached */\n        $messages: function($where) {\n            //TODO: controls isn't really correct here (only for ModelListPanel)\n            return ($where || this.$el).find(\"> .controls .messages\");\n        },\n        /** the message displayed when no views can be shown (no views, none matching search) */\n        $emptyMessage: function($where) {\n            return ($where || this.$el).find(\"> .empty-message\");\n        },\n\n        // ------------------------------------------------------------------------ hda sub-views\n        /** render the subviews for the list's collection */\n        renderItems: function($whereTo) {\n            $whereTo = $whereTo || this.$el;\n            var panel = this;\n            panel.log(`${this}.renderItems`, $whereTo);\n\n            var $list = panel.$list($whereTo);\n            panel.freeViews();\n            // console.log( 'views freed' );\n            //TODO:? cache and re-use views?\n            var shownModels = panel._filterCollection();\n            // console.log( 'models filtered:', shownModels );\n\n            panel.views = shownModels.map(itemModel => {\n                var view = panel._createItemView(itemModel);\n                return view;\n            });\n\n            $list.empty();\n            // console.log( 'list emptied' );\n            if (panel.views.length) {\n                panel._attachItems($whereTo);\n                // console.log( 'items attached' );\n            }\n            panel._renderEmptyMessage($whereTo).toggle(!panel.views.length);\n            panel.trigger(\"views:ready\", panel.views);\n\n            // console.log( '------------------------------------------- rendering items' );\n            return panel.views;\n        },\n\n        /** Filter the collection to only those models that should be currently viewed */\n        _filterCollection: function() {\n            // override this\n            var panel = this;\n            return panel.collection.filter(_.bind(panel._filterItem, panel));\n        },\n\n        /** Should the model be viewable in the current state?\n     *     Checks against this.filters and this.searchFor\n     */\n        _filterItem: function(model) {\n            // override this\n            var panel = this;\n            return (\n                _.every(panel.filters.map(fn => fn.call(model))) &&\n                (!panel.searchFor || model.matchesAll(panel.searchFor))\n            );\n        },\n\n        /** Create a view for a model and set up it's listeners */\n        _createItemView: function(model) {\n            var ViewClass = this._getItemViewClass(model);\n            var options = _.extend(this._getItemViewOptions(model), {\n                model: model\n            });\n            var view = new ViewClass(options);\n            this._setUpItemViewListeners(view);\n            return view;\n        },\n\n        /** Free a view for a model. Note: does not remove it from the DOM */\n        _destroyItemView: function(view) {\n            this.stopListening(view);\n            this.views = _.without(this.views, view);\n        },\n\n        _destroyItemViews: function(view) {\n            var self = this;\n            self.views.forEach(v => {\n                self.stopListening(v);\n            });\n            self.views = [];\n            return self;\n        },\n\n        /** free any sub-views the list has */\n        freeViews: function() {\n            return this._destroyItemViews();\n        },\n\n        /** Get the bbone view class based on the model */\n        _getItemViewClass: function(model) {\n            // override this\n            return this.viewClass;\n        },\n\n        /** Get the options passed to the new view based on the model */\n        _getItemViewOptions: function(model) {\n            // override this\n            return {\n                //logger      : this.logger,\n                fxSpeed: this.fxSpeed,\n                expanded: false,\n                selectable: this.selecting,\n                selected: _.contains(this.selected, model.id),\n                draggable: this.dragItems\n            };\n        },\n\n        /** Set up listeners for new models */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            // send all events to the panel, re-namspaceing them with the view prefix\n            this.listenTo(view, \"all\", function() {\n                var args = Array.prototype.slice.call(arguments, 0);\n                args[0] = `view:${args[0]}`;\n                panel.trigger.apply(panel, args);\n            });\n\n            // drag multiple - hijack ev.setData to add all selected items\n            this.listenTo(\n                view,\n                \"draggable:dragstart\",\n                function(ev, v) {\n                    //TODO: set multiple drag data here\n                    var json = {};\n\n                    var selected = this.getSelectedModels();\n                    if (selected.length) {\n                        json = selected.toJSON();\n                    } else {\n                        json = [v.model.toJSON()];\n                    }\n                    ev.dataTransfer.setData(\"text\", JSON.stringify(json));\n                    //ev.dataTransfer.setDragImage( v.el, 60, 60 );\n                },\n                this\n            );\n\n            return panel;\n        },\n\n        /** Attach views in this.views to the model based on $whereTo */\n        _attachItems: function($whereTo) {\n            var self = this;\n            // console.log( '_attachItems:', $whereTo, this.$list( $whereTo ) );\n            //ASSUMES: $list has been emptied\n            this.$list($whereTo).append(this.views.map(view => self._renderItemView$el(view)));\n            return this;\n        },\n\n        /** get a given subview's $el (or whatever may wrap it) and return it */\n        _renderItemView$el: function(view) {\n            // useful to wrap and override\n            return view.render(0).$el;\n        },\n\n        /** render the empty/none-found message */\n        _renderEmptyMessage: function($whereTo) {\n            this.debug(\"_renderEmptyMessage\", $whereTo, this.searchFor);\n            var text = this.searchFor ? this.noneFoundMsg : this.emptyMsg;\n            return this.$emptyMessage($whereTo).text(text);\n        },\n\n        /** expand all item views */\n        expandAll: function() {\n            _.each(this.views, view => {\n                view.expand();\n            });\n        },\n\n        /** collapse all item views */\n        collapseAll: function() {\n            _.each(this.views, view => {\n                view.collapse();\n            });\n        },\n\n        // ------------------------------------------------------------------------ collection/views syncing\n        /** Add a view (if the model should be viewable) to the panel */\n        addItemView: function(model, collection, options) {\n            // console.log( this + '.addItemView:', model );\n            var panel = this;\n            // get the index of the model in the list of filtered models shown by this list\n            // in order to insert the view in the proper place\n            //TODO:? potentially expensive\n            var modelIndex = panel._filterCollection().indexOf(model);\n            if (modelIndex === -1) {\n                return undefined;\n            }\n            var view = panel._createItemView(model);\n            // console.log( 'adding and rendering:', modelIndex, view.toString() );\n\n            $(view).queue(\"fx\", [\n                next => {\n                    // hide the empty message first if only view\n                    if (panel.$emptyMessage().is(\":visible\")) {\n                        panel.$emptyMessage().fadeOut(panel.fxSpeed, next);\n                    } else {\n                        next();\n                    }\n                },\n                next => {\n                    panel._attachView(view, modelIndex);\n                    next();\n                }\n            ]);\n            return view;\n        },\n\n        /** internal fn to add view (to both panel.views and panel.$list) */\n        _attachView: function(view, modelIndex, useFx) {\n            // console.log( this + '._attachView:', view, modelIndex, useFx );\n            useFx = _.isUndefined(useFx) ? true : useFx;\n            modelIndex = modelIndex || 0;\n            var panel = this;\n\n            // use the modelIndex to splice into views and insert at the proper index in the DOM\n            panel.views.splice(modelIndex, 0, view);\n            panel._insertIntoListAt(modelIndex, panel._renderItemView$el(view).hide());\n\n            panel.trigger(\"view:attached\", view);\n            if (useFx) {\n                view.$el.slideDown(panel.fxSpeed, () => {\n                    panel.trigger(\"view:attached:rendered\");\n                });\n            } else {\n                view.$el.show();\n                panel.trigger(\"view:attached:rendered\");\n            }\n            return view;\n        },\n\n        /** insert a jq object as a child of list-items at the specified *DOM index* */\n        _insertIntoListAt: function(index, $what) {\n            // console.log( this + '._insertIntoListAt:', index, $what );\n            var $list = this.$list();\n            if (index === 0) {\n                $list.prepend($what);\n            } else {\n                $list\n                    .children()\n                    .eq(index - 1)\n                    .after($what);\n            }\n            return $what;\n        },\n\n        /** Remove a view from the panel (if found) */\n        removeItemView: function(model, collection, options) {\n            var panel = this;\n            var view = _.find(panel.views, v => v.model === model);\n            if (!view) {\n                return undefined;\n            }\n            panel.views = _.without(panel.views, view);\n            panel.trigger(\"view:removed\", view);\n\n            // potentially show the empty message if no views left\n            // use anonymous queue here - since remove can happen multiple times\n            $({}).queue(\"fx\", [\n                next => {\n                    view.$el.fadeOut(panel.fxSpeed, next);\n                },\n                next => {\n                    view.remove();\n                    panel.trigger(\"view:removed:rendered\");\n                    if (!panel.views.length) {\n                        panel._renderEmptyMessage().fadeIn(panel.fxSpeed, next);\n                    } else {\n                        next();\n                    }\n                }\n            ]);\n            return view;\n        },\n\n        /** get views based on model.id */\n        viewFromModelId: function(id) {\n            return _.find(this.views, v => v.model.id === id);\n        },\n\n        /** get views based on model */\n        viewFromModel: function(model) {\n            return model ? this.viewFromModelId(model.id) : undefined;\n        },\n\n        /** get views based on model properties */\n        viewsWhereModel: function(properties) {\n            return this.views.filter(view => _.isMatch(view.model.attributes, properties));\n        },\n\n        /** A range of views between (and including) viewA and viewB */\n        viewRange: function(viewA, viewB) {\n            if (viewA === viewB) {\n                return viewA ? [viewA] : [];\n            }\n\n            var indexA = this.views.indexOf(viewA);\n            var indexB = this.views.indexOf(viewB);\n\n            // handle not found\n            if (indexA === -1 || indexB === -1) {\n                if (indexA === indexB) {\n                    return [];\n                }\n                return indexA === -1 ? [viewB] : [viewA];\n            }\n            // reverse if indeces are\n            //note: end inclusive\n            return indexA < indexB ? this.views.slice(indexA, indexB + 1) : this.views.slice(indexB, indexA + 1);\n        },\n\n        // ------------------------------------------------------------------------ searching\n        /** render a search input for filtering datasets shown\n     *      (see SearchableMixin in base-mvc for implementation of the actual searching)\n     *      return will start the search\n     *      esc will clear the search\n     *      clicking the clear button will clear the search\n     *      uses searchInput in ui.js\n     */\n        _renderSearch: function($where) {\n            $where.find(\".controls .search-input\").searchInput({\n                placeholder: this.searchPlaceholder,\n                initialVal: this.searchFor,\n                onfirstsearch: _.bind(this._firstSearch, this),\n                onsearch: _.bind(this.searchItems, this),\n                onclear: _.bind(this.clearSearch, this)\n            });\n            return $where;\n        },\n\n        /** What to do on the first search entered */\n        _firstSearch: function(searchFor) {\n            // override to load model details if necc.\n            this.log(\"onFirstSearch\", searchFor);\n            return this.searchItems(searchFor);\n        },\n\n        /** filter view list to those that contain the searchFor terms */\n        searchItems: function(searchFor, force) {\n            this.log(\"searchItems\", searchFor, this.searchFor, force);\n            if (!force && this.searchFor === searchFor) {\n                return this;\n            }\n            this.searchFor = searchFor;\n            this.renderItems();\n            this.trigger(\"search:searching\", searchFor, this);\n            var $search = this.$(\"> .controls .search-query\");\n            if ($search.val() !== searchFor) {\n                $search.val(searchFor);\n            }\n            return this;\n        },\n\n        /** clear the search filters and show all views that are normally shown */\n        clearSearch: function(searchFor) {\n            //this.log( 'onSearchClear', this );\n            this.searchFor = \"\";\n            this.trigger(\"search:clear\", this);\n            this.$(\"> .controls .search-query\").val(\"\");\n            this.renderItems();\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ selection\n        /** @type Integer when the number of list item views is >= to this, don't animate selectors */\n        THROTTLE_SELECTOR_FX_AT: 20,\n\n        /** show selectors on all visible itemViews and associated controls */\n        showSelectors: function(speed) {\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            this.selecting = true;\n            this.$(\".list-actions\").slideDown(speed);\n            speed = this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n            _.each(this.views, view => {\n                view.showSelector(speed);\n            });\n            //this.selected = [];\n            //this.lastSelected = null;\n        },\n\n        /** hide selectors on all visible itemViews and associated controls */\n        hideSelectors: function(speed) {\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            this.selecting = false;\n            this.$(\".list-actions\").slideUp(speed);\n            speed = this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n            _.each(this.views, view => {\n                view.hideSelector(speed);\n            });\n            this.selected = [];\n            this.lastSelected = null;\n        },\n\n        /** show or hide selectors on all visible itemViews and associated controls */\n        toggleSelectors: function() {\n            if (!this.selecting) {\n                this.showSelectors();\n            } else {\n                this.hideSelectors();\n            }\n        },\n\n        /** select all visible items */\n        selectAll: function(event) {\n            _.each(this.views, view => {\n                view.select(event);\n            });\n        },\n\n        /** deselect all visible items */\n        deselectAll: function(event) {\n            this.lastSelected = null;\n            _.each(this.views, view => {\n                view.deselect(event);\n            });\n        },\n\n        /** select a range of datasets between A and B */\n        selectRange: function(viewA, viewB) {\n            var range = this.viewRange(viewA, viewB);\n            _.each(range, view => {\n                view.select();\n            });\n            return range;\n        },\n\n        /** return an array of all currently selected itemViews */\n        getSelectedViews: function() {\n            return _.filter(this.views, v => v.selected);\n        },\n\n        /** return a collection of the models of all currenly selected items */\n        getSelectedModels: function() {\n            // console.log( '(getSelectedModels)' );\n            return new this.collection.constructor(_.map(this.getSelectedViews(), view => view.model));\n        },\n\n        // ------------------------------------------------------------------------ loading indicator\n        /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n        _showLoadingIndicator: function(msg, speed, callback) {\n            this.debug(\"_showLoadingIndicator\", this.indicator, msg, speed, callback);\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            if (!this.indicator) {\n                this.indicator = new LoadingIndicator(this.$el);\n                this.debug(\"\\t created\", this.indicator);\n            }\n            if (!this.$el.is(\":visible\")) {\n                this.indicator.show(0, callback);\n            } else {\n                this.$el.fadeOut(speed);\n                this.indicator.show(msg, speed, callback);\n            }\n        },\n\n        /** hide the loading indicator */\n        _hideLoadingIndicator: function(speed, callback) {\n            this.debug(\"_hideLoadingIndicator\", this.indicator, speed, callback);\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            if (this.indicator) {\n                this.indicator.hide(speed, callback);\n            }\n        },\n\n        // ------------------------------------------------------------------------ scrolling\n        /** get the current scroll position of the panel in its parent */\n        scrollPosition: function() {\n            return this.$scrollContainer().scrollTop();\n        },\n\n        /** set the current scroll position of the panel in its parent */\n        scrollTo: function(pos, speed) {\n            speed = speed || 0;\n            this.$scrollContainer().animate({ scrollTop: pos }, speed);\n            return this;\n        },\n\n        /** Scrolls the panel to the top. */\n        scrollToTop: function(speed) {\n            return this.scrollTo(0, speed);\n        },\n\n        /** scroll to the given view in list-items */\n        scrollToItem: function(view, speed) {\n            if (!view) {\n                return this;\n            }\n            return this;\n        },\n\n        /** Scrolls the panel to show the content with the given id. */\n        scrollToId: function(id, speed) {\n            return this.scrollToItem(this.viewFromModelId(id), speed);\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: {\n            \"click .select-all\": \"selectAll\",\n            \"click .deselect-all\": \"deselectAll\"\n        },\n\n        // ------------------------------------------------------------------------ misc\n        /** Return a string rep of the panel */\n        toString: function() {\n            return `ListPanel(${this.collection})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nListPanel.prototype.templates = (() => {\n    var elTemplate = BASE_MVC.wrapTemplate([\n        // temp container\n        \"<div>\",\n        '<div class=\"controls\"></div>',\n        '<div class=\"list-items\"></div>',\n        '<div class=\"empty-message infomessagesmall\"></div>',\n        \"</div>\"\n    ]);\n\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n        '<div class=\"title\">',\n        '<div class=\"name\"><%- view.title %></div>',\n        \"</div>\",\n        '<div class=\"subtitle\"><%- view.subtitle %></div>',\n        // buttons, controls go here\n        '<div class=\"actions\"></div>',\n        // deleted msg, etc.\n        '<div class=\"messages\"></div>',\n\n        '<div class=\"search\">',\n        '<div class=\"search-input\"></div>',\n        \"</div>\",\n\n        // show when selectors are shown\n        '<div class=\"list-actions\">',\n        '<div class=\"btn-group\">',\n        '<button class=\"select-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"All\"),\n        \"</button>\",\n        '<button class=\"deselect-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"None\"),\n        \"</button>\",\n        \"</div>\",\n        '<div class=\"list-action-menu btn-group\">',\n        \"</div>\",\n        \"</div>\",\n        \"</div>\"\n    ]);\n\n    return {\n        el: elTemplate,\n        controls: controlsTemplate\n    };\n})();\n\n//=============================================================================\n/** View for a model that has a sub-collection (e.g. History, DatasetCollection)\n *  Allows:\n *      the model to be reset\n *      auto assign panel.collection to panel.model[ panel.modelCollectionKey ]\n *\n */\nvar ModelListPanel = ListPanel.extend({\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey: \"contents\",\n\n    initialize: function(attributes) {\n        ListPanel.prototype.initialize.call(this, attributes);\n        this.selecting = attributes.selecting !== undefined ? attributes.selecting : false;\n\n        this.setModel(this.model, attributes);\n    },\n\n    /** release/free/shutdown old models and set up panel for new models\n     *  @fires new-model with the panel as parameter\n     */\n    setModel: function(model, attributes) {\n        attributes = attributes || {};\n        this.debug(`${this}.setModel:`, model, attributes);\n\n        this.freeModel();\n        this.freeViews();\n\n        if (model) {\n            var oldModelId = this.model ? this.model.get(\"id\") : null;\n\n            // set up the new model with user, logger, storage, events\n            this.model = model;\n            if (this.logger) {\n                this.model.logger = this.logger;\n            }\n            this._setUpModelListeners();\n\n            //TODO: relation btwn model, collection becoming tangled here\n            // free the collection, and assign the new collection to either\n            //  the model[ modelCollectionKey ], attributes.collection, or an empty vanilla collection\n            this.stopListening(this.collection);\n            this.collection =\n                this.model[this.modelCollectionKey] || attributes.collection || this._createDefaultCollection();\n            this._setUpCollectionListeners();\n\n            if (oldModelId && model.get(\"id\") !== oldModelId) {\n                this.trigger(\"new-model\", this);\n            }\n        }\n        return this;\n    },\n\n    /** free the current model and all listeners for it, free any views for the model */\n    freeModel: function() {\n        // stop/release the previous model, and clear cache to sub-views\n        if (this.model) {\n            this.stopListening(this.model);\n            //TODO: see base-mvc\n            //this.model.free();\n            //this.model = null;\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ listening\n    /** listening for model events */\n    _setUpModelListeners: function() {\n        // override\n        this.log(`${this}._setUpModelListeners`, this.model);\n        // bounce model errors up to the panel\n        this.listenTo(\n            this.model,\n            \"error\",\n            function() {\n                var args = Array.prototype.slice.call(arguments, 0);\n                //args.unshift( 'model:error' );\n                args.unshift(\"error\");\n                this.trigger.apply(this, args);\n            },\n            this\n        );\n\n        // debugging\n        if (this.logger) {\n            this.listenTo(this.model, \"all\", function(event) {\n                this.info(`${this}(model)`, event, arguments);\n            });\n        }\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el.\n     */\n    _renderControls: function($newRender) {\n        this.debug(`${this}(ModelListPanel)._renderControls`);\n        var json = this.model ? this.model.toJSON() : {};\n        var $controls = $(this.templates.controls(json, this));\n        $newRender.find(\".controls\").replaceWith($controls);\n        return $controls;\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** Return a string rep of the panel */\n    toString: function() {\n        return `ModelListPanel(${this.model})`;\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nModelListPanel.prototype.templates = (() => {\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n        '<div class=\"title\">',\n        //TODO: this is really the only difference - consider factoring titlebar out\n        '<div class=\"name\"><%- model.name %></div>',\n        \"</div>\",\n        '<div class=\"subtitle\"><%- view.subtitle %></div>',\n        '<div class=\"actions\"></div>',\n        '<div class=\"messages\"></div>',\n\n        '<div class=\"search\">',\n        '<div class=\"search-input\"></div>',\n        \"</div>\",\n\n        '<div class=\"list-actions\">',\n        '<div class=\"btn-group\">',\n        '<button class=\"select-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"All\"),\n        \"</button>\",\n        '<button class=\"deselect-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"None\"),\n        \"</button>\",\n        \"</div>\",\n        '<div class=\"list-action-menu btn-group\">',\n        \"</div>\",\n        \"</div>\",\n        \"</div>\"\n    ]);\n\n    return _.extend(_.clone(ListPanel.prototype.templates), {\n        controls: controlsTemplate\n    });\n})();\n\n//=============================================================================\nexport default {\n    ListPanel: ListPanel,\n    ModelListPanel: ModelListPanel\n};\n"]}