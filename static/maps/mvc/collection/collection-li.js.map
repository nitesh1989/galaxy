{"version":3,"sources":["mvc/collection/collection-li.js"],"names":["FoldoutListItemView","_listItem2","default","ListItemView","DCListItemView","extend","className","prototype","id","this","model","get","join","initialize","attributes","linkTarget","hasUser","_setUpListeners","call","listenTo","options","_","has","changed","render","replaceWith","_renderSubtitle","templates","subtitle","toJSON","_getFoldoutPanelOptions","$selector","toString","warnings","error","_baseMvc2","$","_localization2","purged","wrapTemplate","deleted","titleBarTemplate","titleBar","DCEListItemView","modelString","subtitleTemplate","logger","log","DatasetListItemView","_fetchModelDetails","inReadyState","DatasetDCEListItemView","_datasetLi2","NestedDCDCEListItemView","view","addClass","hasDetails","fetch","silent","jQuery","when","_swapNewRender","$newRender","state","$el"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-li.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport DATASET_LI from \"mvc/dataset/dataset-li\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar FoldoutListItemView = LIST_ITEM.FoldoutListItemView;\n\nvar ListItemView = LIST_ITEM.ListItemView;\n/** @class Read only view for DatasetCollection.\n */\nvar DCListItemView = FoldoutListItemView.extend(\n    /** @lends DCListItemView.prototype */ {\n        className: `${FoldoutListItemView.prototype.className} dataset-collection`,\n        id: function() {\n            return [\"dataset_collection\", this.model.get(\"id\")].join(\"-\");\n        },\n\n        /** override to add linkTarget */\n        initialize: function(attributes) {\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n            this.hasUser = attributes.hasUser;\n            FoldoutListItemView.prototype.initialize.call(this, attributes);\n        },\n\n        /** event listeners */\n        _setUpListeners: function() {\n            FoldoutListItemView.prototype._setUpListeners.call(this);\n            this.listenTo(this.model, \"change\", function(model, options) {\n                // if the model has changed deletion status render it entirely\n                if (_.has(model.changed, \"deleted\")) {\n                    this.render();\n\n                    // if the model has been decorated after the fact with the element count,\n                    // render the subtitle where the count is displayed\n                } else if (_.has(model.changed, \"element_count\")) {\n                    this.$(\"> .title-bar .subtitle\").replaceWith(this._renderSubtitle());\n                }\n            });\n        },\n\n        // ......................................................................... rendering\n        /** render a subtitle to show the user what sort of collection this is */\n        _renderSubtitle: function() {\n            return $(this.templates.subtitle(this.model.toJSON(), this));\n        },\n\n        // ......................................................................... foldout\n        /** override to add linktarget to sub-panel */\n        _getFoldoutPanelOptions: function() {\n            var options = FoldoutListItemView.prototype._getFoldoutPanelOptions.call(this);\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                hasUser: this.hasUser\n            });\n        },\n\n        /** override to not catch sub-panel selectors */\n        $selector: function() {\n            return this.$(\"> .selector\");\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DCListItemView(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCListItemView.prototype.templates = (() => {\n    var warnings = _.extend({}, FoldoutListItemView.prototype.templates.warnings, {\n        error: BASE_MVC.wrapTemplate([\n            // error during index fetch - show error on dataset\n            \"<% if( model.error ){ %>\",\n            '<div class=\"errormessagesmall\">',\n            _l(\"There was an error getting the data for this collection\"),\n            \": <%- model.error %>\",\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        purged: BASE_MVC.wrapTemplate([\n            \"<% if( model.purged ){ %>\",\n            '<div class=\"purged-msg warningmessagesmall\">',\n            _l(\"This collection has been deleted and removed from disk\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        deleted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.deleted && !model.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This collection has been deleted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n    });\n\n    // use element identifier\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- collection.element_identifier || collection.name %></span>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            \"</div>\"\n        ],\n        \"collection\"\n    );\n\n    // use element identifier\n    var subtitleTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"subtitle\">',\n            '<% var countText = collection.element_count? ( collection.element_count + \" \" ) : \"\"; %>',\n            '<%        if( collection.collection_type === \"list\" ){ %>',\n            _l(\"a list of <%- countText %>datasets\"),\n            '<% } else if( collection.collection_type === \"paired\" ){ %>',\n            _l(\"a pair of datasets\"),\n            '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n            _l(\"a list of <%- countText %>dataset pairs\"),\n            '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n            _l(\"a list of <%- countText %>dataset lists\"),\n            \"<% } %>\",\n            \"</div>\"\n        ],\n        \"collection\"\n    );\n\n    return _.extend({}, FoldoutListItemView.prototype.templates, {\n        warnings: warnings,\n        titleBar: titleBarTemplate,\n        subtitle: subtitleTemplate\n    });\n})();\n\n//==============================================================================\n/** @class Read only view for DatasetCollectionElement.\n */\nvar DCEListItemView = ListItemView.extend(\n    /** @lends DCEListItemView.prototype */ {\n        /** add the DCE class to the list item */\n        className: `${ListItemView.prototype.className} dataset-collection-element`,\n\n        /** set up */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(\"DCEListItemView.initialize:\", attributes);\n            ListItemView.prototype.initialize.call(this, attributes);\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DCEListItemView(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCEListItemView.prototype.templates = (() => {\n    // use the element identifier here - since that will persist and the user will need it\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- element.element_identifier %></span>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            \"</div>\"\n        ],\n        \"element\"\n    );\n\n    return _.extend({}, ListItemView.prototype.templates, {\n        titleBar: titleBarTemplate\n    });\n})();\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\nvar DatasetDCEListItemView = DATASET_LI.DatasetListItemView.extend(\n    /** @lends DatasetDCEListItemView.prototype */ {\n        className: `${DATASET_LI.DatasetListItemView.prototype.className} dataset-collection-element`,\n\n        /** set up */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(\"DatasetDCEListItemView.initialize:\", attributes);\n            DATASET_LI.DatasetListItemView.prototype.initialize.call(this, attributes);\n        },\n\n        /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n        _fetchModelDetails: function() {\n            var view = this;\n            if (view.model.inReadyState() && !view.model.hasDetails()) {\n                return view.model.fetch({ silent: true });\n            }\n            return jQuery.when();\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DatasetDCEListItemView(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetDCEListItemView.prototype.templates = (() => {\n    // use the element identifier here and not the dataset name\n    //TODO:?? can we steal the DCE titlebar?\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- element.element_identifier %></span>',\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"element\"\n    );\n\n    return _.extend({}, DATASET_LI.DatasetListItemView.prototype.templates, {\n        titleBar: titleBarTemplate\n    });\n})();\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\nvar NestedDCDCEListItemView = DCListItemView.extend(\n    /** @lends NestedDCDCEListItemView.prototype */ {\n        className: `${DCListItemView.prototype.className} dataset-collection-element`,\n\n        /** In this override, add the state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            DCListItemView.prototype._swapNewRender.call(this, $newRender);\n            var state = this.model.get(\"state\") || \"ok\";\n            this.$el.addClass(`state-${state}`);\n            return this.$el;\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `NestedDCDCEListItemView(${modelString})`;\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    DCListItemView: DCListItemView,\n    DCEListItemView: DCEListItemView,\n    DatasetDCEListItemView: DatasetDCEListItemView,\n    NestedDCDCEListItemView: NestedDCDCEListItemView\n};\n"]}