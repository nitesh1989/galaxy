{"version":3,"sources":["mvc/collection/collection-view.js"],"names":["_super","_listView2","default","ModelListPanel","CollectionView","extend","_logNamespace","className","prototype","DatasetDCEViewClass","_collectionLi2","DatasetDCEListItemView","NestedDCDCEViewClass","NestedDCDCEListItemView","modelCollectionKey","initialize","attributes","call","this","logNamespace","linkTarget","panelStack","parentName","foldoutStyle","model","url","_queueNewRender","$newRender","speed","undefined","fxSpeed","panel","_swapNewRender","_filterCollection","downloadUrl","getVisibleContents","get","trigger","TypeError","_getItemViewOptions","options","_","_getItemViewClass","hasUser","_setUpItemViewListeners","view","drilldown","v","_collapseDrilldownPanel","push","$","add","$list","$el","append","_expandDrilldownPanel","pop","render","events","click .navigation .back","close","event","remove","toString","templates","_baseMvc2","wrapTemplate","_localization2","controlsTemplate","controls","ListCollectionView","clone","PairCollectionView","ListOfPairsCollectionView","ListOfListsCollectionView","foldoutPanelClass"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-view.js","sourcesContent":["import LIST_VIEW from \"mvc/list/list-view\";\nimport DC_MODEL from \"mvc/collection/collection-model\";\nimport DC_LI from \"mvc/collection/collection-li\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"collections\";\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class non-editable, read-only View/Controller for a dataset collection.\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar CollectionView = _super.extend(\n    /** @lends CollectionView.prototype */ {\n        //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n        _logNamespace: logNamespace,\n\n        className: `${_super.prototype.className} dataset-collection-panel`,\n\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_LI.DatasetDCEListItemView,\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_LI.NestedDCDCEListItemView,\n        /** key of attribute in model to assign to this.collection */\n        modelCollectionKey: \"elements\",\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n\n            this.hasUser = attributes.hasUser;\n            /** A stack of panels that currently cover or hide this panel */\n            this.panelStack = [];\n            /** The text of the link to go back to the panel containing this one */\n            this.parentName = attributes.parentName;\n            /** foldout or drilldown */\n            this.foldoutStyle = attributes.foldoutStyle || \"foldout\";\n            this.downloadUrl = `${this.model.attributes.url}/download`;\n        },\n\n        _queueNewRender: function($newRender, speed) {\n            speed = speed === undefined ? this.fxSpeed : speed;\n            var panel = this;\n            panel.log(\"_queueNewRender:\", $newRender, speed);\n\n            // TODO: jquery@1.12 doesn't change display when the elem has display: flex\n            // this causes display: block for those elems after the use of show/hide animations\n            // animations are removed from this view for now until fixed\n            panel._swapNewRender($newRender);\n            panel.trigger(\"rendered\", panel);\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** In this override, use model.getVisibleContents */\n        _filterCollection: function() {\n            //TODO: should *not* be model.getVisibleContents - visibility is not model related\n            return this.model.getVisibleContents();\n        },\n\n        /** override to return proper view class based on element_type */\n        _getItemViewClass: function(model) {\n            //this.debug( this + '._getItemViewClass:', model );\n            //TODO: subclasses use DCEViewClass - but are currently unused - decide\n            switch (model.get(\"element_type\")) {\n                case \"hda\":\n                    return this.DatasetDCEViewClass;\n                case \"dataset_collection\":\n                    return this.NestedDCDCEViewClass;\n            }\n            throw new TypeError(\"Unknown element type:\", model.get(\"element_type\"));\n        },\n\n        /** override to add link target and anon */\n        _getItemViewOptions: function(model) {\n            var options = _super.prototype._getItemViewOptions.call(this, model);\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                hasUser: this.hasUser,\n                //TODO: could move to only nested: list:paired\n                foldoutStyle: this.foldoutStyle\n            });\n        },\n\n        // ------------------------------------------------------------------------ collection sub-views\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n\n            // use pub-sub to: handle drilldown expansion and collapse\n            panel.listenTo(view, {\n                \"expanded:drilldown\": function(v, drilldown) {\n                    this._expandDrilldownPanel(drilldown);\n                },\n                \"collapsed:drilldown\": function(v, drilldown) {\n                    this._collapseDrilldownPanel(drilldown);\n                }\n            });\n            return this;\n        },\n\n        /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n        _expandDrilldownPanel: function(drilldown) {\n            this.panelStack.push(drilldown);\n            // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n            this.$(\"> .controls\")\n                .add(this.$list())\n                .hide();\n            drilldown.parentName = this.model.get(\"name\");\n            this.$el.append(drilldown.render().$el);\n        },\n\n        /** Handle drilldown close by freeing the panel and re-rendering this panel */\n        _collapseDrilldownPanel: function(drilldown) {\n            this.panelStack.pop();\n            this.render();\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: {\n            \"click .navigation .back\": \"close\"\n        },\n\n        /** close/remove this collection panel */\n        close: function(event) {\n            this.remove();\n            this.trigger(\"close\");\n        },\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return `CollectionView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nCollectionView.prototype.templates = (() => {\n    var controlsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"controls\">',\n            '<div class=\"navigation\">',\n            '<a class=\"back\" href=\"javascript:void(0)\">',\n            '<span class=\"fa fa-icon fa-angle-left\"></span>',\n            _l(\"Back to \"),\n            \"<%- view.parentName %>\",\n            \"</a>\",\n            \"</div>\",\n\n            '<div class=\"title\">',\n            '<div class=\"name\"><%- collection.name || collection.element_identifier %></div>',\n            '<div class=\"subtitle\">',\n            '<% if( collection.collection_type === \"list\" ){ %>',\n            _l(\"a list of datasets\"),\n            '<% } else if( collection.collection_type === \"paired\" ){ %>',\n            _l(\"a pair of datasets\"),\n            '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n            _l(\"a list of paired datasets\"),\n            '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n            _l(\"a list of dataset lists\"),\n            \"<% } %>\",\n            \"</div>\",\n            \"</div>\",\n\n            '<div class=\"tags-display\"></div>',\n\n            '<div class=\"actions\">',\n            '<a class=\"download-btn icon-btn\" ',\n            'href=\"<%- view.downloadUrl %>',\n            '\" title=\"\" download=\"\" data-original-title=\"Download Collection\">',\n            '<span class=\"fa fa-floppy-o\"></span>',\n            \"</a>\",\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"collection\"\n    );\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        controls: controlsTemplate\n    });\n})();\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListCollectionView = CollectionView.extend(\n    /** @lends ListCollectionView.prototype */ {\n        //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_LI.DatasetDCEListItemView,\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return `ListCollectionView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar PairCollectionView = ListCollectionView.extend(\n    /** @lends PairCollectionView.prototype */ {\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return `PairCollectionView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListOfPairsCollectionView = CollectionView.extend(\n    /** @lends ListOfPairsCollectionView.prototype */ {\n        //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_LI.NestedDCDCEListItemView.extend({\n            foldoutPanelClass: PairCollectionView\n        }),\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return `ListOfPairsCollectionView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a list of lists dataset collection. */\nvar ListOfListsCollectionView = CollectionView.extend({\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass: DC_LI.NestedDCDCEListItemView.extend({\n        foldoutPanelClass: PairCollectionView\n    }),\n\n    /** string rep */\n    toString: function() {\n        return `ListOfListsCollectionView(${this.model ? this.model.get(\"name\") : \"\"})`;\n    }\n});\n\n//==============================================================================\nexport default {\n    CollectionView: CollectionView,\n    ListCollectionView: ListCollectionView,\n    PairCollectionView: PairCollectionView,\n    ListOfPairsCollectionView: ListOfPairsCollectionView,\n    ListOfListsCollectionView: ListOfListsCollectionView\n};\n"]}