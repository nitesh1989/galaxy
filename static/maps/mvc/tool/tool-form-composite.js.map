{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","model","Model","deferred","_deferred2","setElement","$","addClass","append","$message","$header","$steps","$el","_configure","render","window","resize","_refresh","step_index","margin","_","reduce","child","memo","outerHeight","height","input","step_linked","match","re","exec","String","value","wp_name","callback","wp_inputs","label","wp_count","_handleWorkflowParameter","forms","steps","links","parms","get","i","icon","step","title","step_label","step_name","annotation","step_version","merge","escape","emit","parseInt","_isDataStep","sustain_repeats","text_enable","index","fixed_title","help","citations","collapsible","collapsed","sustain_version","step_type","sustain_conditionals","text_disable","cls_enable","cls","hide_operations","inputs","name","needs_refresh","each","output_connections","output_connection","sub_step","j","input_step_index","push","connection","connections_by_name","input_name","type","output_name","color","wp_input","style","backdrop","arg","pja","action_arguments","data_resolved","_formData2","visitInputs","context","is_runtime_value","__class__","is_data_input","indexOf","data_ref","length","wp_linked","default_value","flavor","reset","_renderMessage","_renderParameters","_renderHistory","_renderHeader","execute_btn","_uiMisc2","Button","empty","message","status","persistent","fade","step_version_changes","Message","wp_form","isEmpty","_formView2","_append","onchange","input_list","input_def","_refreshStep","cases","_renderStep","url","data","form","success","process","tool_id","id","error","version","create","wait","debug","current_state","_utils2","request","post_job_actions","portlet","update","is_simple_input","response","hide_label","reject","link","html","show_progress","short_str","promise","field_list","new_value","values","ignore","set","percentage","setTimeout","field","_refreshHistory","history","undefined","_refresh_history","refresh","source_step","numOfUnfinishedShownContents","UPDATE_DELAY","v","multiple","execute","_submit","resolve","wp_field","wp_value","split","join","history_form","history_form_data","trigger","validated","currHistoryPanel","job_input_id","input_value","_execute","_enabled","job_def","history_id","parameters","isArray","job_inputs","WebhookApp","urlRoot","toolId","toolVersion","input_id","input_found","step_related_errors","err_data","buttons","root","complete","children","hide","_templateSuccess","$container","WebhookView","tool_version","wait_text","enabled","error_messages","matchResponse","show","body","_templateError","err_msg","Close","lst","startsWith","sanitize","text","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\nimport Utils from \"utils/utils\";\nimport Deferred from \"utils/deferred\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Form from \"mvc/form/form-view\";\nimport FormData from \"mvc/form/form-data\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Webhooks from \"mvc/webhooks\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.deferred = new Deferred();\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"ui-form-composite\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$header = $(\"<div/>\")))\n                .append((this.$steps = $(\"<div/>\")))\n        );\n        $(\"body\").append(this.$el);\n        this._configure();\n        this.render();\n        $(window).resize(() => {\n            self._refresh();\n        });\n    },\n\n    /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n    _refresh: function(step_index) {\n        var margin =\n            _.reduce(this.$el.children(), (memo, child) => memo + $(child).outerHeight(), 0) -\n            this.$steps.height() +\n            90;\n        this.$steps.css(\"height\", $(window).height() - margin);\n    },\n\n    /** Configures form/step options for each workflow step */\n    _configure: function() {\n        var self = this;\n        this.forms = [];\n        this.steps = [];\n        this.links = [];\n        this.parms = [];\n        _.each(this.model.get(\"steps\"), (step, i) => {\n            Galaxy.emit.debug(\"tool-form-composite::initialize()\", `${i} : Preparing workflow step.`);\n            var icon = WorkflowIcons[step.step_type];\n            var title = `${parseInt(i + 1)}: ${step.step_label || step.step_name}`;\n            if (step.annotation) {\n                title += ` - ${step.annotation}`;\n            }\n            if (step.step_version) {\n                title += ` (Galaxy Version ${step.step_version})`;\n            }\n            step = Utils.merge(\n                {\n                    index: i,\n                    fixed_title: _.escape(title),\n                    icon: icon || \"\",\n                    help: null,\n                    citations: null,\n                    collapsible: true,\n                    collapsed: i > 0 && !self._isDataStep(step),\n                    sustain_version: true,\n                    sustain_repeats: true,\n                    sustain_conditionals: true,\n                    narrow: true,\n                    text_enable: \"Edit\",\n                    text_disable: \"Undo\",\n                    cls_enable: \"fa fa-edit\",\n                    cls_disable: \"fa fa-undo\",\n                    errors: step.messages,\n                    initial_errors: true,\n                    cls: \"ui-portlet-narrow\",\n                    hide_operations: true,\n                    needs_refresh: false,\n                    always_refresh: step.step_type != \"tool\"\n                },\n                step\n            );\n            self.steps[i] = step;\n            self.links[i] = [];\n            self.parms[i] = {};\n        });\n\n        // build linear index of step input pairs\n        _.each(this.steps, (step, i) => {\n            FormData.visitInputs(step.inputs, (input, name) => {\n                self.parms[i][name] = input;\n            });\n        });\n\n        // iterate through data input modules and collect linked sub steps\n        _.each(this.steps, (step, i) => {\n            _.each(step.output_connections, output_connection => {\n                _.each(self.steps, (sub_step, j) => {\n                    sub_step.step_index === output_connection.input_step_index && self.links[i].push(sub_step);\n                });\n            });\n        });\n\n        // convert all connected data inputs to hidden fields with proper labels,\n        // and track the linked source step\n        _.each(this.steps, (step, i) => {\n            _.each(self.steps, (sub_step, j) => {\n                var connections_by_name = {};\n                _.each(step.output_connections, connection => {\n                    sub_step.step_index === connection.input_step_index &&\n                        (connections_by_name[connection.input_name] = connection);\n                });\n                _.each(self.parms[j], (input, name) => {\n                    var connection = connections_by_name[name];\n                    if (connection) {\n                        input.type = \"hidden\";\n                        input.help = input.step_linked ? `${input.help}, ` : \"\";\n                        input.help += `Output dataset '${connection.output_name}' from step ${parseInt(i) + 1}`;\n                        input.step_linked = input.step_linked || [];\n                        input.step_linked.push(step);\n                    }\n                });\n            });\n        });\n\n        // identify and configure workflow parameters\n        var wp_count = 0;\n        this.wp_inputs = {};\n        function _handleWorkflowParameter(value, callback) {\n            var re = /\\$\\{(.+?)\\}/g;\n            var match;\n            while ((match = re.exec(String(value)))) {\n                var wp_name = match[1];\n                callback(\n                    (self.wp_inputs[wp_name] = self.wp_inputs[wp_name] || {\n                        label: wp_name,\n                        name: wp_name,\n                        type: \"text\",\n                        color: `hsl( ${++wp_count * 100}, 70%, 30% )`,\n                        style: \"ui-form-wp-source\",\n                        links: []\n                    })\n                );\n            }\n        }\n        _.each(this.steps, (step, i) => {\n            _.each(self.parms[i], (input, name) => {\n                _handleWorkflowParameter(input.value, wp_input => {\n                    wp_input.links.push(step);\n                    input.wp_linked = true;\n                    input.type = \"text\";\n                    input.backdrop = true;\n                    input.style = \"ui-form-wp-target\";\n                });\n            });\n            _.each(step.post_job_actions, pja => {\n                _.each(pja.action_arguments, arg => {\n                    _handleWorkflowParameter(arg, () => {});\n                });\n            });\n        });\n\n        // select fields are shown for dynamic fields if all putative data inputs are available,\n        // or if an explicit reference is specified as data_ref and available\n        _.each(this.steps, (step, i) => {\n            if (step.step_type == \"tool\") {\n                var data_resolved = true;\n                FormData.visitInputs(step.inputs, (input, name, context) => {\n                    var is_runtime_value = input.value && input.value.__class__ == \"RuntimeValue\";\n                    var is_data_input = [\"data\", \"data_collection\"].indexOf(input.type) != -1;\n                    var data_ref = context[input.data_ref];\n                    input.step_linked && !self._isDataStep(input.step_linked) && (data_resolved = false);\n                    input.options &&\n                        ((input.options.length == 0 && !data_resolved) || input.wp_linked) &&\n                        (input.is_workflow = true);\n                    data_ref &&\n                        (input.is_workflow =\n                            (data_ref.step_linked && !self._isDataStep(data_ref.step_linked)) || input.wp_linked);\n                    (is_data_input || (input.value && input.value.__class__ == \"RuntimeValue\" && !input.step_linked)) &&\n                        (step.collapsed = false);\n                    is_runtime_value && (input.value = input.default_value);\n                    input.flavor = \"workflow\";\n                    if (!is_runtime_value && !is_data_input && input.type !== \"hidden\" && !input.wp_linked) {\n                        if (input.optional || (!Utils.isEmpty(input.value) && input.value !== \"\")) {\n                            input.collapsible_value = input.value;\n                            input.collapsible_preview = true;\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    render: function() {\n        var self = this;\n        this.deferred.reset();\n        this._renderHeader();\n        this._renderMessage();\n        this._renderParameters();\n        this._renderHistory();\n        _.each(this.steps, step => {\n            self._renderStep(step);\n        });\n    },\n\n    /** Render header */\n    _renderHeader: function() {\n        var self = this;\n        this.execute_btn = new Ui.Button({\n            icon: \"fa-check\",\n            title: \"Run workflow\",\n            cls: \"btn btn-primary\",\n            onclick: function() {\n                self._execute();\n            }\n        });\n        this.$header\n            .addClass(\"ui-form-header\")\n            .empty()\n            .append(\n                new Ui.Label({\n                    title: `Workflow: ${this.model.get(\"name\")}`\n                }).$el\n            )\n            .append(this.execute_btn.$el);\n    },\n\n    /** Render message */\n    _renderMessage: function() {\n        this.$message.empty();\n        if (this.model.get(\"has_upgrade_messages\")) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n        var step_version_changes = this.model.get(\"step_version_changes\");\n        if (step_version_changes && step_version_changes.length > 0) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderParameters: function() {\n        var self = this;\n        this.wp_form = null;\n        if (!_.isEmpty(this.wp_inputs)) {\n            this.wp_form = new Form({\n                title: \"<b>Workflow Parameters</b>\",\n                inputs: this.wp_inputs,\n                cls: \"ui-portlet-narrow\",\n                onchange: function() {\n                    _.each(self.wp_form.input_list, (input_def, i) => {\n                        _.each(input_def.links, step => {\n                            self._refreshStep(step);\n                        });\n                    });\n                }\n            });\n            this._append(this.$steps.empty(), this.wp_form.$el);\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderHistory: function() {\n        this.history_form = new Form({\n            cls: \"ui-portlet-narrow\",\n            title: \"<b>History Options</b>\",\n            inputs: [\n                {\n                    type: \"conditional\",\n                    name: \"new_history\",\n                    test_param: {\n                        name: \"check\",\n                        label: \"Send results to a new history\",\n                        type: \"boolean\",\n                        value: \"false\",\n                        help: \"\"\n                    },\n                    cases: [\n                        {\n                            value: \"true\",\n                            inputs: [\n                                {\n                                    name: \"name\",\n                                    label: \"History name\",\n                                    type: \"text\",\n                                    value: this.model.get(\"name\")\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n        this._append(this.$steps, this.history_form.$el);\n    },\n\n    /** Render step */\n    _renderStep: function(step) {\n        var self = this;\n        var form = null;\n        this.deferred.execute(promise => {\n            self.$steps.addClass(\"ui-steps\");\n            if (step.step_type == \"tool\") {\n                step.postchange = function(process, form) {\n                    var self = this;\n                    var current_state = {\n                        tool_id: step.id,\n                        tool_version: step.version,\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    form.wait(true);\n                    Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Sending current state.\", current_state);\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/tools/${step.id}/build`,\n                        data: current_state,\n                        success: function(data) {\n                            form.update(data);\n                            form.wait(false);\n                            Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Received new model.\", data);\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Refresh request failed.\", response);\n                            process.reject();\n                        }\n                    });\n                };\n                form = new ToolFormBase(step);\n                if (step.post_job_actions && step.post_job_actions.length) {\n                    form.portlet.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-form-element-disabled\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"<b>Job Post Actions</b>\")\n                            )\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-preview\")\n                                    .html(\n                                        _.reduce(\n                                            step.post_job_actions,\n                                            (memo, value) => `${memo} ${value.short_str}`,\n                                            \"\"\n                                        )\n                                    )\n                            )\n                    );\n                }\n            } else {\n                var is_simple_input = [\"data_input\", \"data_collection_input\"].indexOf(step.step_type) != -1;\n                _.each(step.inputs, input => {\n                    input.flavor = \"module\";\n                    input.hide_label = is_simple_input;\n                });\n                form = new Form(\n                    Utils.merge(\n                        {\n                            title: step.fixed_title,\n                            onchange: function() {\n                                _.each(self.links[step.index], link => {\n                                    self._refreshStep(link);\n                                });\n                            },\n                            inputs:\n                                step.inputs && step.inputs.length > 0\n                                    ? step.inputs\n                                    : [\n                                          {\n                                              type: \"hidden\",\n                                              name: \"No options available.\",\n                                              ignore: null\n                                          }\n                                      ]\n                        },\n                        step\n                    )\n                );\n            }\n            self.forms[step.index] = form;\n            self._append(self.$steps, form.$el);\n            self._refresh();\n            step.needs_refresh && self._refreshStep(step);\n            form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n            self.show_progress &&\n                self.execute_btn.model.set({\n                    wait: true,\n                    wait_text: \"Preparing...\",\n                    percentage: (step.index + 1) * 100.0 / self.steps.length\n                });\n            Galaxy.emit.debug(\"tool-form-composite::initialize()\", `${step.index} : Workflow step state ready.`, step);\n            setTimeout(() => {\n                promise.resolve();\n            }, 0);\n        });\n    },\n\n    /** Refreshes step values from source step values */\n    _refreshStep: function(step) {\n        var self = this;\n        var form = this.forms[step.index];\n        if (form) {\n            _.each(self.parms[step.index], (input, name) => {\n                if (input.step_linked || input.wp_linked) {\n                    var field = form.field_list[form.data.match(name)];\n                    if (field) {\n                        var new_value = undefined;\n                        if (input.step_linked) {\n                            new_value = { values: [] };\n                            _.each(input.step_linked, source_step => {\n                                if (self._isDataStep(source_step)) {\n                                    var value = self.forms[source_step.index].data.create().input;\n                                    value &&\n                                        _.each(value.values, v => {\n                                            new_value.values.push(v);\n                                        });\n                                }\n                            });\n                            if (!input.multiple && new_value.values.length > 0) {\n                                new_value = {\n                                    values: [new_value.values[0]]\n                                };\n                            }\n                        } else if (input.wp_linked) {\n                            new_value = input.value;\n                            var re = /\\$\\{(.+?)\\}/g;\n                            var match;\n                            while ((match = re.exec(input.value))) {\n                                var wp_field = self.wp_form.field_list[self.wp_form.data.match(match[1])];\n                                var wp_value = wp_field && wp_field.value();\n                                if (wp_value) {\n                                    new_value = new_value.split(match[0]).join(wp_value);\n                                }\n                            }\n                        }\n                        if (new_value !== undefined) {\n                            field.value(new_value);\n                        }\n                    }\n                }\n            });\n            form.trigger(\"change\");\n        } else {\n            step.needs_refresh = true;\n        }\n    },\n\n    /** Refresh the history after job submission while form is shown */\n    _refreshHistory: function() {\n        var self = this;\n        var history = parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.model;\n        this._refresh_history && clearTimeout(this._refresh_history);\n        if (history) {\n            history.refresh().success(() => {\n                if (history.numOfUnfinishedShownContents() === 0) {\n                    self._refresh_history = setTimeout(() => {\n                        self._refreshHistory();\n                    }, history.UPDATE_DELAY);\n                }\n            });\n        }\n    },\n\n    /** Build remaining steps */\n    _execute: function() {\n        var self = this;\n        this.show_progress = true;\n        this._enabled(false);\n        this.deferred.execute(promise => {\n            setTimeout(() => {\n                promise.resolve();\n                self._submit();\n            }, 0);\n        });\n    },\n\n    /** Validate and submit workflow */\n    _submit: function() {\n        var self = this;\n        var history_form_data = this.history_form.data.create();\n        var job_def = {\n            new_history_name: history_form_data[\"new_history|name\"] ? history_form_data[\"new_history|name\"] : null,\n            history_id: !history_form_data[\"new_history|name\"] ? this.model.get(\"history_id\") : null,\n            replacement_params: this.wp_form ? this.wp_form.data.create() : {},\n            parameters: {},\n            // Tool form will submit flat maps for each parameter\n            // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n            // data structures).\n            parameters_normalized: true,\n            // Tool form always wants a list of invocations back\n            // so that inputs can be batched.\n            batch: true\n        };\n        var validated = true;\n        for (var i in this.forms) {\n            var form = this.forms[i];\n            var job_inputs = form.data.create();\n            var step = self.steps[i];\n            var step_index = step.step_index;\n            form.trigger(\"reset\");\n            for (var job_input_id in job_inputs) {\n                var input_value = job_inputs[job_input_id];\n                var input_id = form.data.match(job_input_id);\n                var input_field = form.field_list[input_id];\n                var input_def = form.input_list[input_id];\n                if (!input_def.step_linked) {\n                    if (this._isDataStep(step)) {\n                        validated = input_value && input_value.values && input_value.values.length > 0;\n                    } else {\n                        validated =\n                            input_def.optional ||\n                            (input_def.is_workflow && input_value !== \"\") ||\n                            (!input_def.is_workflow && input_value !== null);\n                    }\n                    if (!validated) {\n                        form.highlight(input_id);\n                        break;\n                    }\n                    job_def.parameters[step_index] = job_def.parameters[step_index] || {};\n                    job_def.parameters[step_index][job_input_id] = job_inputs[job_input_id];\n                }\n            }\n            if (!validated) {\n                break;\n            }\n        }\n        if (!validated) {\n            self._enabled(true);\n            Galaxy.emit.debug(\"tool-form-composite::submit()\", \"Validation failed.\", job_def);\n        } else {\n            Galaxy.emit.debug(\"tool-form-composite::submit()\", \"Validation complete.\", job_def);\n            Utils.request({\n                type: \"POST\",\n                url: `${Galaxy.root}api/workflows/${this.model.id}/invocations`,\n                data: job_def,\n                success: function(response) {\n                    Galaxy.emit.debug(\"tool-form-composite::submit\", \"Submission successful.\", response);\n                    self.$el.children().hide();\n                    self.$el.append(self._templateSuccess(response));\n\n                    // Show Webhook if job is running\n                    if ($.isArray(response) && response.length > 0) {\n                        self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                        var WebhookApp = new Webhooks.WebhookView({\n                            urlRoot: `${Galaxy.root}api/webhooks/workflow`,\n                            toolId: job_def.tool_id,\n                            toolVersion: job_def.tool_version\n                        });\n                    }\n\n                    self._refreshHistory();\n                },\n                error: function(response) {\n                    Galaxy.emit.debug(\"tool-form-composite::submit\", \"Submission failed.\", response);\n                    var input_found = false;\n                    if (response && response.err_data) {\n                        for (var i in self.forms) {\n                            var form = self.forms[i];\n                            var step_related_errors = response.err_data[form.model.get(\"step_index\")];\n                            if (step_related_errors) {\n                                var error_messages = form.data.matchResponse(step_related_errors);\n                                for (var input_id in error_messages) {\n                                    form.highlight(input_id, error_messages[input_id]);\n                                    input_found = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!input_found) {\n                        self.modal.show({\n                            title: \"Workflow submission failed\",\n                            body: self._templateError(job_def, response && response.err_msg),\n                            buttons: {\n                                Close: function() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                },\n                complete: function() {\n                    self._enabled(true);\n                }\n            });\n        }\n    },\n\n    /** Append new dom to body */\n    _append: function($container, $el) {\n        $container.append(\"<p/>\").append($el);\n    },\n\n    /** Set enabled/disabled state */\n    _enabled: function(enabled) {\n        this.execute_btn.model.set({\n            wait: !enabled,\n            wait_text: \"Sending...\",\n            percentage: -1\n        });\n        this.wp_form && this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        this.history_form && this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        _.each(this.forms, form => {\n            form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n        });\n    },\n\n    /** Is data input module/step */\n    _isDataStep: function(steps) {\n        var lst = $.isArray(steps) ? steps : [steps];\n        for (var i = 0; i < lst.length; i++) {\n            var step = lst[i];\n            if (!step || !step.step_type || !step.step_type.startsWith(\"data\")) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /** Templates */\n    _templateSuccess: function(response) {\n        if ($.isArray(response) && response.length > 0) {\n            return $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").html(\n                        `Successfully invoked workflow <b>${Utils.sanitize(\n                            this.model.get(\"name\")\n                        )}</b>${response.length > 1 ? ` <b>${response.length} times</b>` : \"\"}.`\n                    )\n                )\n                .append(\n                    $(\"<p/>\")\n                        .append(\"<b/>\")\n                        .text(\n                            \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                        )\n                );\n        } else {\n            return this._templateError(response, \"Invalid success response. No invocations found.\");\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    `The server could not complete the request. Please contact the Galaxy Team if this error persists. ${JSON.stringify(\n                        err_msg\n                    ) || \"\"}`\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\nexport default {\n    View: View\n};\n"]}