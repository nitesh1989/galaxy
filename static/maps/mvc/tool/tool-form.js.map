{"version":3,"sources":["mvc/tool/tool-form.js"],"names":["View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","form","_toolFormBase2","_utils2","merge","listen_to_history","always_refresh","buildmodel","process","model","attributes","build_url","build_data","job_id","root","id","params","version","get","url","data","$","emit","debug","resolve","window","location","error","response","status","error_message","err_msg","param","redirect","display","$el","is","_uiMisc2","Message","message","show","buttons","hide","title","postchange","current_state","tool_id","reject","create","wait","request","tool_version","inputs","update","success","setElement","append","_customize","execute_button","Button","tooltip","name","cls","wait_cls","icon","disable","submit","unwait","onclick","portlet","enable","job_remap","push","type","label","callback","job_def","action","method","enctype","key","value","$f","_","children","_templateSuccess","jobs","length","WebhookApp","_webhooks2","WebhookView","urlRoot","toolId","currHistoryPanel","input_found","err_data","error_messages","matchResponse","input_id","highlight","body","_templateError","Close","validate","job_inputs","batch_n","batch_src","job_input_id","input_value","match","input_field","field_list","input_def","input_list","batch","n","values","src","$message","njobs_text","njobs","addClass","text","each","outputs","output","hid","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form.js","sourcesContent":["/* This is the regular tool form */\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Webhooks from \"mvc/webhooks\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.form = new ToolFormBase(\n            Utils.merge(\n                {\n                    listen_to_history: true,\n                    always_refresh: false,\n                    buildmodel: function(process, form) {\n                        var options = form.model.attributes;\n\n                        // build request url\n                        var build_url = \"\";\n                        var build_data = {};\n                        var job_id = options.job_id;\n                        if (job_id) {\n                            build_url = `${Galaxy.root}api/jobs/${job_id}/build_for_rerun`;\n                        } else {\n                            build_url = `${Galaxy.root}api/tools/${options.id}/build`;\n                            build_data = $.extend({}, Galaxy.params);\n                            build_data[\"tool_id\"] && delete build_data[\"tool_id\"];\n                        }\n                        options.version && (build_data[\"tool_version\"] = options.version);\n\n                        // get initial model\n                        Utils.get({\n                            url: build_url,\n                            data: build_data,\n                            success: function(data) {\n                                if (!data.display) {\n                                    window.location = Galaxy.root;\n                                    return;\n                                }\n                                form.model.set(data);\n                                self._customize(form);\n                                Galaxy.emit.debug(\"tool-form-base::_buildModel()\", \"Initial tool model ready.\", data);\n                                process.resolve();\n                            },\n                            error: function(response, status) {\n                                var error_message = (response && response.err_msg) || \"Uncaught error.\";\n                                if (status == 401) {\n                                    window.location = `${Galaxy.root}user/login?${$.param({\n                                        redirect: `${Galaxy.root}?tool_id=${options.id}`\n                                    })}`;\n                                } else if (form.$el.is(\":empty\")) {\n                                    form.$el.prepend(\n                                        new Ui.Message({\n                                            message: error_message,\n                                            status: \"danger\",\n                                            persistent: true,\n                                            large: true\n                                        }).$el\n                                    );\n                                } else {\n                                    Galaxy.modal &&\n                                        Galaxy.modal.show({\n                                            title: \"Tool request failed\",\n                                            body: error_message,\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                }\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    },\n                    postchange: function(process, form) {\n                        var current_state = {\n                            tool_id: form.model.get(\"id\"),\n                            tool_version: form.model.get(\"version\"),\n                            inputs: $.extend(true, {}, form.data.create())\n                        };\n                        form.wait(true);\n                        Galaxy.emit.debug(\"tool-form::postchange()\", \"Sending current state.\", current_state);\n                        Utils.request({\n                            type: \"POST\",\n                            url: `${Galaxy.root}api/tools/${form.model.get(\"id\")}/build`,\n                            data: current_state,\n                            success: function(data) {\n                                form.update(data);\n                                form.wait(false);\n                                Galaxy.emit.debug(\"tool-form::postchange()\", \"Received new model.\", data);\n                                process.resolve();\n                            },\n                            error: function(response) {\n                                Galaxy.emit.debug(\"tool-form::postchange()\", \"Refresh request failed.\", response);\n                                process.reject();\n                            }\n                        });\n                    }\n                },\n                options\n            )\n        );\n        this.deferred = this.form.deferred;\n        this.setElement(\"<div/>\");\n        this.$el.append(this.form.$el);\n    },\n\n    _customize: function(form) {\n        var self = this;\n        var options = form.model.attributes;\n        // build execute button\n        var execute_button = new Ui.Button({\n            icon: \"fa-check\",\n            tooltip: `Execute: ${options.name} (${options.version})`,\n            title: \"Execute\",\n            cls: \"btn btn-primary ui-clear-float\",\n            wait_cls: \"btn btn-info ui-clear-float\",\n            onclick: function() {\n                execute_button.wait();\n                form.portlet.disable();\n                self.submit(options, () => {\n                    execute_button.unwait();\n                    form.portlet.enable();\n                });\n            }\n        });\n        options.buttons = { execute: execute_button };\n\n        // remap feature\n        if (options.job_id && options.job_remap) {\n            options.inputs.push({\n                label: \"Resume dependencies from this job\",\n                name: \"rerun_remap_job_id\",\n                type: \"select\",\n                display: \"radio\",\n                ignore: \"__ignore__\",\n                value: \"__ignore__\",\n                options: [[\"Yes\", options.job_id], [\"No\", \"__ignore__\"]],\n                help:\n                    \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\"\n            });\n        }\n    },\n\n    /** Submit a regular job.\n         * @param{dict}     options   - Specifies tool id and version\n         * @param{function} callback  - Called when request has completed\n         */\n    submit: function(options, callback) {\n        var self = this;\n        var job_def = {\n            tool_id: options.id,\n            tool_version: options.version,\n            inputs: this.form.data.create()\n        };\n        this.form.trigger(\"reset\");\n        if (!self.validate(job_def)) {\n            Galaxy.emit.debug(\"tool-form::submit()\", \"Submission canceled. Validation failed.\");\n            callback && callback();\n            return;\n        }\n        if (options.action !== `${Galaxy.root}tool_runner/index`) {\n            var $f = $(\"<form/>\").attr({\n                action: options.action,\n                method: options.method,\n                enctype: options.enctype\n            });\n            _.each(job_def.inputs, (value, key) => {\n                $f.append($(\"<input/>\").attr({ name: key, value: value }));\n            });\n            $f\n                .hide()\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            callback && callback();\n            return;\n        }\n        Galaxy.emit.debug(\"tool-form::submit()\", \"Validation complete.\", job_def);\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/tools`,\n            data: job_def,\n            success: function(response) {\n                callback && callback();\n                self.$el.children().hide();\n                self.$el.append(self._templateSuccess(response));\n                // Show Webhook if job is running\n                if (response.jobs && response.jobs.length > 0) {\n                    self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                    var WebhookApp = new Webhooks.WebhookView({\n                        urlRoot: `${Galaxy.root}api/webhooks/tool`,\n                        toolId: job_def.tool_id\n                    });\n                }\n                parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.refreshContents();\n            },\n            error: function(response) {\n                callback && callback();\n                Galaxy.emit.debug(\"tool-form::submit\", \"Submission failed.\", response);\n                var input_found = false;\n                if (response && response.err_data) {\n                    var error_messages = self.form.data.matchResponse(response.err_data);\n                    for (var input_id in error_messages) {\n                        self.form.highlight(input_id, error_messages[input_id]);\n                        input_found = true;\n                        break;\n                    }\n                }\n                if (!input_found) {\n                    self.modal.show({\n                        title: \"Job submission failed\",\n                        body: self._templateError(job_def, response && response.err_msg),\n                        buttons: {\n                            Close: function() {\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /** Validate job dictionary.\n         * @param{dict}     job_def   - Job execution dictionary\n        */\n    validate: function(job_def) {\n        var job_inputs = job_def.inputs;\n        var batch_n = -1;\n        var batch_src = null;\n        for (var job_input_id in job_inputs) {\n            var input_value = job_inputs[job_input_id];\n            var input_id = this.form.data.match(job_input_id);\n            var input_field = this.form.field_list[input_id];\n            var input_def = this.form.input_list[input_id];\n            if (!input_id || !input_def || !input_field) {\n                Galaxy.emit.debug(\"tool-form::validate()\", \"Retrieving input objects failed.\");\n                continue;\n            }\n            if (!input_def.optional && input_value == null) {\n                this.form.highlight(input_id);\n                return false;\n            }\n            if (input_value && input_value.batch) {\n                var n = input_value.values.length;\n                var src = n > 0 && input_value.values[0] && input_value.values[0].src;\n                if (src) {\n                    if (batch_src === null) {\n                        batch_src = src;\n                    } else if (batch_src !== src) {\n                        this.form.highlight(\n                            input_id,\n                            \"Please select either dataset or dataset list fields for all batch mode fields.\"\n                        );\n                        return false;\n                    }\n                }\n                if (batch_n === -1) {\n                    batch_n = n;\n                } else if (batch_n !== n) {\n                    this.form.highlight(\n                        input_id,\n                        `Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>${n}</b> selection(s) while a previous field contains <b>${batch_n}</b>.`\n                    );\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    _templateSuccess: function(response) {\n        if (response.jobs && response.jobs.length > 0) {\n            var njobs = response.jobs.length;\n            var njobs_text = njobs == 1 ? \"1 job has\" : `${njobs} jobs have`;\n            var $message = $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").text(\n                        `${njobs_text} been successfully added to the queue - resulting in the following datasets:`\n                    )\n                );\n            _.each(response.outputs, output => {\n                $message.append(\n                    $(\"<p/>\")\n                        .addClass(\"messagerow\")\n                        .append($(\"<b/>\").text(`${output.hid}: ${output.name}`))\n                );\n            });\n            $message.append(\n                $(\"<p/>\")\n                    .append(\"<b/>\")\n                    .text(\n                        \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                    )\n            );\n            return $message;\n        } else {\n            return this._templateError(response, \"Invalid success response. No jobs found.\");\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    `The server could not complete the request. Please contact the Galaxy Team if this error persists. ${err_msg ||\n                        \"\"}`\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}