{"version":3,"sources":["mvc/tool/tools.js"],"names":["_","VisibilityMixin","hidden","show","this","set","hide","toggle","get","is_visible","attributes","ToolParameter","Backbone","Model","extend","defaults","name","label","type","value","html","num_samples","initialize","unescape","copy","toJSON","set_value","ToolParameterCollection","Collection","model","DataToolParameter","parseInt","d3","linear","domain","IntegerToolParameter","parseFloat","SelectToolParameter","get_samples","map","option","subModelTypes","integer","float","FloatToolParameter","data","select","Tool","id","description","target","inputs","outputs","urlRoot","Galaxy","root","options","p","rval","prototype","call","i","remove_inputs","types","tool","incompatible_inputs","filter","input","indexOf","remove","only_samplable_inputs","each","valid_inputs","apply_search_results","results","find","set_input_values","inputs_dict","self","keys","input_name","run","rerun","target_dataset","regions","_run","action","target_dataset_id","get_inputs_dict","input_dict","additional_params","payload","tool_id","run_deferred","$","Deferred","ss_deferred","_util2","default","ServerStateDeferred","ajax_settings","url","JSON","stringify","interval","success_fn","response","when","go","then","result","resolve","dataType","ToolSectionLabel","elems","open","elt","ToolView","ToolCollection","cur_label","all_hidden","ToolSection","ToolSearch","min_chars_for_search","clear_btn_url","query","clear_key","on","do_search","length","visible","timer","ga","q","clear_search","ToolPanel","setTimeout","tool_search","tools","parse","layout","parse_elt","elt_dict","model_class","clear_search_results","panel_elt","update_visible","$el","ToolLinkView","BaseView","tagName","render","$link","append","templates","tool_link","formStyle","View","e","preventDefault","router","push","version","upload","className","text","ToolSectionView","update_open","panel_section","tool_view","section_body","label_view","ToolSectionLabelView","events","click .toolSectionTitle > a","children","slideDown","slideUp","ToolSearchView","click","keyup :input","change :input","is","css","tooltip","focus","clear","val","focus_and_select","query_changed","evData","which","ToolPanelView","handle_search_results","search_view","section_title_view","trigger","ToolFormView","collection","tool_panel_view","tool_form_view","show_tool","fetch","done","width","template","join","tool_form","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\nimport * as _ from \"libs/underscore\";\nimport util from \"viz/trackster/util\";\nimport data from \"mvc/dataset/data\";\nimport ToolForm from \"mvc/tool/tool-form\";\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set(\"value\", value || \"\");\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale\n            .linear()\n            .domain([this.get(\"min\"), this.get(\"max\")])\n            .ticks(this.get(\"num_samples\"));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get(\"options\"), option => option[0]);\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    integer: IntegerToolParameter,\n    float: FloatToolParameter,\n    data: DataToolParameter,\n    select: SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: `${Galaxy.root}api/tools`,\n\n    initialize: function(options) {\n        // Set parameters.\n        this.set(\n            \"inputs\",\n            new ToolParameterCollection(\n                _.map(options.inputs, p => {\n                    var p_class = ToolParameter.subModelTypes[p.type] || ToolParameter;\n                    return new p_class(p);\n                })\n            )\n        );\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get(\"inputs\").map(i => i.toJSON());\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this;\n\n        var incompatible_inputs = tool.get(\"inputs\").filter(input => types.indexOf(input.get(\"type\")) !== -1);\n\n        tool.get(\"inputs\").remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get(\"inputs\").each(input => {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set(\"inputs\", valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        _.indexOf(results, this.attributes.id) !== -1 ? this.show() : this.hide();\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get(\"inputs\")\n            .find(input => input.get(\"name\") === name)\n            .set(\"value\", value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), input_name => {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: \"rerun\",\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get(\"inputs\").each(input => {\n            input_dict[input.get(\"name\")] = input.get(\"value\");\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend(\n            {\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            },\n            additional_params\n        );\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred();\n\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: this.urlRoot,\n                data: JSON.stringify(payload),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(result => {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, elt => {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true;\n        var cur_label;\n        _.each(this.attributes.elems, elt => {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            } else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        } else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: `${Galaxy.root}api/tools`,\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(() => {\n            // log the search to analytics if present\n            if (typeof ga !== \"undefined\") {\n                ga(\"send\", \"pageview\", `${Galaxy.root}?q=${q}`);\n            }\n            $.get(\n                self.urlRoot,\n                { q: q },\n                data => {\n                    self.set(\"results\", data);\n                    $(\"#search-spinner\").hide();\n                    $(\"#search-clear-btn\").show();\n                },\n                \"json\"\n            );\n        }, 400);\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\"change:results\", this.apply_search_results, this);\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection(this.parse(options.layout));\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this;\n\n        var // Helper to recursively parse tool panel.\n        parse_elt = elt_dict => {\n            var type = elt_dict.model_class;\n            // There are many types of tools; for now, anything that ends in 'Tool'\n            // is treated as a generic tool.\n            if (type.indexOf(\"Tool\") === type.length - 4) {\n                return self.attributes.tools.get(elt_dict.id);\n            } else if (type === \"ToolSection\") {\n                // Parse elements.\n                var elems = _.map(elt_dict.elems, parse_elt);\n                elt_dict.elems = elems;\n                return new ToolSection(elt_dict);\n            } else if (type === \"ToolSectionLabel\") {\n                return new ToolSectionLabel(elt_dict);\n            }\n        };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            } else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get(\"tool_search\").get(\"results\");\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            } else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            } else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        this.model.attributes.hidden ? this.$el.hide() : this.$el.show();\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: \"div\",\n\n    render: function() {\n        // create element\n        var $link = $(\"<div/>\");\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get(\"form_style\", null);\n        // open upload dialog for upload tool\n        if (this.model.id === \"upload1\") {\n            $link.find(\"a\").on(\"click\", e => {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        } else if (formStyle === \"regular\") {\n            // regular tools\n            var self = this;\n            $link.find(\"a\").on(\"click\", e => {\n                e.preventDefault();\n                Galaxy.router.push(\"/\", {\n                    tool_id: self.model.id,\n                    version: self.model.get(\"version\")\n                });\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolPanelLabel\",\n\n    render: function() {\n        this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolSectionWrapper\",\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append(templates.panel_section(this.model.toJSON()));\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, elt => {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: elt,\n                    className: \"toolTitle\"\n                });\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            } else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: elt\n                });\n                label_view.render();\n                section_body.append(label_view.$el);\n            } else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        \"click .toolSectionTitle > a\": \"toggle\"\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        this.model.attributes.open\n            ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\")\n            : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: \"div\",\n    id: \"tool-search\",\n    className: \"bar\",\n\n    events: {\n        click: \"focus_and_select\",\n        \"keyup :input\": \"query_changed\",\n        \"change :input\": \"query_changed\",\n        \"click #search-clear-btn\": \"clear\"\n    },\n\n    render: function() {\n        this.$el.append(templates.tool_search(this.model.toJSON()));\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\", \"95px\");\n        }\n\n        this.$el.find(\"[title]\").tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el\n            .find(\":input\")\n            .focus()\n            .select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val(\"\");\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function(evData) {\n        // check for the 'clear key' (ESC) first\n        if (this.model.attributes.clear_key && this.model.attributes.clear_key === evData.which) {\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"toolMenu\",\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model.get(\"tool_search\").on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView({\n            model: this.model.get(\"tool_search\")\n        });\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({\n                    model: panel_elt\n                });\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            } else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: panel_elt,\n                    className: \"toolTitleNoSection\"\n                });\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            } else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: panel_elt\n                });\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var tool_id = $(this)\n                .attr(\"class\")\n                .split(/\\s+/)[0];\n\n            var tool = self.model.get(\"tools\").get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get(\"tool_search\").get(\"results\");\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        } else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: \"toolForm\",\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append(templates.tool_form(this.model.toJSON()));\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: \"toolMenuAndView\",\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({\n            collection: this.collection\n        });\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", (e, tool) => {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done(() => {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $(\"#left\").width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search: _.template(\n        [\n            '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n            'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n            '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n            //TODO: replace with icon\n            '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'\n        ].join(\"\")\n    ),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section: _.template(\n        [\n            '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n            \"</div>\",\n            '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n            \"<div>\"\n        ].join(\"\")\n    ),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link: _.template(\n        [\n            '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<span class=\"labels\">',\n            \"<% _.each( labels, function( label ){ %>\",\n            '<span class=\"label label-default label-<%- label %>\">',\n            \"<%- label %>\",\n            \"</span>\",\n            \"<% }); %>\",\n            \"</span>\",\n            '<span class=\"tool-old-link\">',\n            \"<%- name %>\",\n            \"</span>\",\n            \" <%- description %>\",\n            \"</a>\"\n        ].join(\"\")\n    ),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form: _.template(\n        [\n            '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n            '<div class=\"toolFormBody\">',\n            \"<% _.each( tool.inputs, function( input ){ %>\",\n            '<div class=\"form-row\">',\n            '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n            '<div class=\"form-row-input\">',\n            \"<%= input.html %>\",\n            \"</div>\",\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n            \"<%- input.help %>\",\n            \"</div>\",\n            '<div style=\"clear: both;\"></div>',\n            \"</div>\",\n            \"<% }); %>\",\n            \"</div>\",\n            '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n            \"</div>\",\n            '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n            \"</div>\"\n            // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n            // which implies a leaky variable that I can't find\n        ].join(\"\"),\n        { variable: \"tool\" }\n    )\n};\n\n// Exports\nexport default {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n"]}