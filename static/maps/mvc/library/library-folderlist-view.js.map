{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["FolderListView","Backbone","View","extend","el","progress","progressStep","folderContainer","current_sort_order","current_sort_key","events","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-name","click .sort-folder-file_ext","collection","defaults","page_count","initialize","options","this","_","modal","rowViews","_libraryModel2","default","Folder","include_deleted","renderOne","removeOne","show_page","rePaint","listenTo","fetchFolder","self","FolderContainer","id","url","urlRoot","fetch","success","folder_container","error","model","response","responseJSON","err_msg","onclick","Galaxy","libraries","library_router","back","_toastr2","render","template","templateFolder","$","hide","upper_folder_id","path","attributes","metadata","full_path","length","$el","html","parent_library_id","dataset_id","row","order","tooltip","css","showDatasetDetails","total_items_count","get","models","Math","ceil","page_start","preferences","items_to_render","slice","items_shown","renderPaginator","reset","removeAllRows","renderAll","addAll","each","checkEmptiness","add","postRender","fetched_metadata","findWhere","type","folderToolbarView","configureElements","reverse","set","rowView","_libraryFolderrowView2","FolderRowView","after","find","filter","data","remove","show","sortColumnClicked","event","preventDefault","currentTarget","className","replace","sortFolder","selectAll","selected","target","checked","makeDarkRow","$row","selectClickedRow","source","checkbox","closest","localName","makeWhiteRow","removeClass","addClass","renderSortIcon","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["import mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_library_folderrow_view from \"mvc/library/library-folderrow-view\";\nimport mod_library_dataset_view from \"mvc/library/library-dataset-view\";\nvar FolderListView = Backbone.View.extend({\n    el: \"#folder_items_element\",\n    // progress percentage\n    progress: 0,\n    // progress rate per one item\n    progressStep: 1,\n\n    folderContainer: null,\n\n    current_sort_order: \"asc\",\n\n    current_sort_key: \"name\",\n\n    events: {\n        \"click #select-all-checkboxes\": \"selectAll\",\n        \"click .dataset_row\": \"selectClickedRow\",\n        \"click .folder_row\": \"selectClickedRow\",\n        \"click .sort-folder-name\": \"sortColumnClicked\",\n        \"click .sort-folder-file_ext\": \"sortColumnClicked\",\n        \"click .sort-folder-description\": \"sortColumnClicked\",\n        \"click .sort-folder-state\": \"sortColumnClicked\"\n    },\n\n    collection: null,\n\n    defaults: {\n        include_deleted: false,\n        page_count: null,\n        show_page: null\n    },\n\n    /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n    initialize: function(options) {\n        this.options = _.defaults(this.options || {}, this.defaults, options);\n        this.modal = null;\n        // map of folder item ids to item views = cache\n        this.rowViews = {};\n\n        // create a collection of folder items for this view\n        this.collection = new mod_library_model.Folder();\n\n        // start to listen if someone modifies the collection\n        this.listenTo(this.collection, \"add\", this.renderOne);\n        this.listenTo(this.collection, \"remove\", this.removeOne);\n        this.listenTo(this.collection, \"sort\", this.rePaint);\n        this.listenTo(this.collection, \"reset\", this.rePaint);\n\n        this.fetchFolder();\n    },\n\n    fetchFolder: function(options) {\n        var options = options || {};\n        this.options.include_deleted = options.include_deleted;\n        var self = this;\n\n        this.folderContainer = new mod_library_model.FolderContainer({\n            id: this.options.id\n        });\n        this.folderContainer.url = `${this.folderContainer.attributes.urlRoot + this.options.id}/contents`;\n\n        if (this.options.include_deleted) {\n            this.folderContainer.url = `${this.folderContainer.url}?include_deleted=true`;\n        }\n        this.folderContainer.fetch({\n            success: function(folder_container) {\n                self.folder_container = folder_container;\n                self.render();\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(`${response.responseJSON.err_msg} Click this to go back.`, \"\", {\n                        onclick: function() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                } else {\n                    mod_toastr.error(\"An error occurred. Click this to go back.\", \"\", {\n                        onclick: function() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var template = this.templateFolder();\n        $(\".tooltip\").hide();\n\n        // find the upper id in the full path\n        var path = this.folderContainer.attributes.metadata.full_path;\n        var upper_folder_id;\n        if (path.length === 1) {\n            // the library is above us\n            upper_folder_id = 0;\n        } else {\n            upper_folder_id = path[path.length - 2][0];\n        }\n\n        this.$el.html(\n            template({\n                path: this.folderContainer.attributes.metadata.full_path,\n                parent_library_id: this.folderContainer.attributes.metadata.parent_library_id,\n                id: this.options.id,\n                upper_folder_id: upper_folder_id,\n                order: this.current_sort_order\n            })\n        );\n\n        // when dataset_id is present render its details too\n        if (this.options.dataset_id) {\n            var row = _.findWhere(self.rowViews, {\n                id: this.options.dataset_id\n            });\n            if (row) {\n                row.showDatasetDetails();\n            } else {\n                mod_toastr.error(\"Requested dataset not found. Showing folder instead.\");\n            }\n        } else {\n            if (this.options.show_page === null || this.options.show_page < 1) {\n                this.options.show_page = 1;\n            }\n            this.paginate();\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    paginate: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.show_page === null || this.options.show_page < 1) {\n            this.options.show_page = 1;\n        }\n        this.options.total_items_count = this.folder_container.get(\"folder\").models.length;\n        this.options.page_count = Math.ceil(\n            this.options.total_items_count / Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        var page_start = Galaxy.libraries.preferences.get(\"folder_page_size\") * (this.options.show_page - 1);\n        var items_to_render = null;\n        items_to_render = this.folder_container\n            .get(\"folder\")\n            .models.slice(page_start, page_start + Galaxy.libraries.preferences.get(\"folder_page_size\"));\n        this.options.items_shown = items_to_render.length;\n        // User requests page with no items\n        if (\n            Galaxy.libraries.preferences.get(\"folder_page_size\") * this.options.show_page >\n            this.options.total_items_count + Galaxy.libraries.preferences.get(\"folder_page_size\")\n        ) {\n            items_to_render = [];\n        }\n        Galaxy.libraries.folderToolbarView.renderPaginator(this.options);\n        this.collection.reset(items_to_render);\n    },\n\n    rePaint: function(options) {\n        this.options = _.extend(this.options, options);\n        this.removeAllRows();\n        this.renderAll();\n        this.checkEmptiness();\n    },\n\n    /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n    addAll: function(models) {\n        _.each(models, model => {\n            Galaxy.libraries.folderListView.collection.add(model, {\n                current_sort_order: false\n            });\n        });\n        $(\"#center [data-toggle]\").tooltip();\n        this.checkEmptiness();\n        this.postRender();\n    },\n\n    /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n    postRender: function() {\n        var fetched_metadata = this.folderContainer.attributes.metadata;\n        fetched_metadata.contains_file_or_folder =\n            typeof this.collection.findWhere({ type: \"file\" }) !== \"undefined\" ||\n            typeof this.collection.findWhere({ type: \"folder\" }) !== \"undefined\";\n        Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n    },\n\n    /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n    renderAll: function() {\n        var self = this;\n        _.each(this.collection.models.reverse(), model => {\n            self.renderOne(model);\n        });\n        this.postRender();\n    },\n\n    /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n    renderOne: function(model) {\n        this.options.contains_file_or_folder = true;\n        //if (model.get('type') !== 'folder'){\n        // model.set('readable_size', this.size_to_string(model.get('file_size')));\n        //}\n        model.set(\"folder_id\", this.id);\n        var rowView = new mod_library_folderrow_view.FolderRowView({\n            model: model\n        });\n\n        // save new rowView to cache\n        this.rowViews[model.get(\"id\")] = rowView;\n\n        this.$el.find(\"#first_folder_item\").after(rowView.el);\n    },\n\n    /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n    removeOne: function(model) {\n        this.$el\n            .find(\"tr\")\n            .filter(function() {\n                return $(this).data(\"id\") && $(this).data(\"id\") === model.id;\n            })\n            .remove();\n    },\n\n    /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n    removeAllRows: function() {\n        $(\".library-row\").remove();\n    },\n\n    /** Checks whether the list is empty and adds/removes the message */\n    checkEmptiness: function() {\n        if (this.$el.find(\".dataset_row\").length === 0 && this.$el.find(\".folder_row\").length === 0) {\n            this.$el.find(\".empty-folder-message\").show();\n        } else {\n            this.$el.find(\".empty-folder-message\").hide();\n        }\n    },\n\n    sortColumnClicked: function(event) {\n        event.preventDefault();\n        this.current_sort_order = this.current_sort_order === \"asc\" ? \"desc\" : \"asc\";\n        this.current_sort_key = event.currentTarget.className.replace(\"sort-folder-\", \"\");\n        this.collection.sortFolder(this.current_sort_key, this.current_sort_order);\n        this.renderSortIcon();\n    },\n\n    /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n    selectAll: function(event) {\n        var selected = event.target.checked;\n        var self = this;\n        // Iterate each checkbox\n        $(\":checkbox\", \"#folder_list_body\").each(function() {\n            this.checked = selected;\n            var $row = $(this).closest(\"tr\");\n            // Change color of selected/unselected\n            if (selected) {\n                self.makeDarkRow($row);\n            } else {\n                self.makeWhiteRow($row);\n            }\n        });\n    },\n\n    /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n    selectClickedRow: function(event) {\n        var checkbox = \"\";\n        var $row;\n        var source;\n        $row = $(event.target).closest(\"tr\");\n        if (event.target.localName === \"input\") {\n            checkbox = event.target;\n            source = \"input\";\n        } else if (event.target.localName === \"td\") {\n            checkbox = $row.find(\":checkbox\")[0];\n            source = \"td\";\n        }\n        if (checkbox.checked) {\n            if (source === \"td\") {\n                checkbox.checked = \"\";\n                this.makeWhiteRow($row);\n            } else if (source === \"input\") {\n                this.makeDarkRow($row);\n            }\n        } else {\n            if (source === \"td\") {\n                checkbox.checked = \"selected\";\n                this.makeDarkRow($row);\n            } else if (source === \"input\") {\n                this.makeWhiteRow($row);\n            }\n        }\n    },\n\n    makeDarkRow: function($row) {\n        $row.removeClass(\"light\").addClass(\"dark\");\n        $row\n            .find(\"a\")\n            .removeClass(\"light\")\n            .addClass(\"dark\");\n        $row\n            .find(\".fa-file-o\")\n            .removeClass(\"fa-file-o\")\n            .addClass(\"fa-file\");\n        $row\n            .find(\".fa-folder-o\")\n            .removeClass(\"fa-folder-o\")\n            .addClass(\"fa-folder\");\n    },\n\n    makeWhiteRow: function($row) {\n        $row.removeClass(\"dark\").addClass(\"light\");\n        $row\n            .find(\"a\")\n            .removeClass(\"dark\")\n            .addClass(\"light\");\n        $row\n            .find(\".fa-file\")\n            .removeClass(\"fa-file\")\n            .addClass(\"fa-file-o\");\n        $row\n            .find(\".fa-folder\")\n            .removeClass(\"fa-folder\")\n            .addClass(\"fa-folder-o\");\n    },\n\n    renderSortIcon: function() {\n        if (this.current_sort_order === \"asc\") {\n            $('[class*=\"sort-icon\"]')\n                .removeClass(\"fa-sort-alpha-desc\")\n                .removeClass(\"fa-sort-alpha-asc\");\n            $(`.sort-icon-${this.current_sort_key}`).addClass(\"fa-sort-alpha-asc\");\n        } else {\n            $(`.sort-icon-${this.current_sort_key}`).addClass(\"fa-sort-alpha-desc\");\n        }\n    },\n\n    templateFolder: function() {\n        return _.template(\n            [\n                // BREADCRUMBS\n                '<ol class=\"breadcrumb\">',\n                '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n                \"<% _.each(path, function(path_item) { %>\",\n                \"<% if (path_item[0] != id) { %>\",\n                '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n                \"<% } else { %>\",\n                '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ol>\",\n\n                // FOLDER CONTENT\n                '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th class=\"button_heading\"></th>',\n                '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n                '<th><a class=\"sort-folder-name\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-name fa fa-sort-alpha-<%- order %>\"></span></th>',\n                '<th style=\"width:20%;\"><a class=\"sort-folder-description\" title=\"Click to reverse order\" href=\"#\">description</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-description fa\"></span></th>',\n                '<th style=\"width:5%;\"><a class=\"sort-folder-file_ext\" title=\"Click to reverse order\" href=\"#\">data type</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-file_ext fa\"></span></th>',\n                '<th style=\"width:10%;\">size</th>',\n                '<th style=\"width:160px;\">time updated (UTC)</th>',\n                '<th style=\"width:5%;\"><a class=\"sort-folder-state\" title=\"Click to reverse order\" href=\"#\">state</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-state fa\"></span></th>',\n                '<th style=\"width:150px;\"></th> ',\n                \"</thead>\",\n                '<tbody id=\"folder_list_body\">',\n                '<tr id=\"first_folder_item\">',\n                \"<td>\",\n                '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n                \"</td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<div class=\"empty-folder-message\" style=\"display:none;\">',\n                \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\",\n                ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n                ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderListView: FolderListView\n};\n"]}