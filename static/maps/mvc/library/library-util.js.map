{"version":3,"sources":["mvc/library/library-util.js"],"names":["generateFolderComparator","sort_key","sort_order","itemA","itemB","get","has","toLowerCase","generateLibraryComparator","libraryA","libraryB"],"mappings":"mIAsCIA,yBA9B2B,SAACC,EAAUC,GAAX,OAA0B,SAACC,EAAOC,GAC7D,OAAID,EAAME,IAAI,UAAYD,EAAMC,IAAI,QAC3BF,EAAMG,IAAIL,IAAcG,EAAME,IAAIL,GAE3BE,EAAMG,IAAIL,GAJ1BD,EAAAA,IAAAA,GAEIG,EAAAE,IAAKF,GAAUF,cAAcG,EAAAC,IAAUJ,GAAWM,cAC9C,QAAAL,EAAA,GAAA,EAEAE,EAAAC,IAAAJ,GAAAM,cAAAJ,EAAAE,IAAAJ,GAAAM,cACcD,QAFXJ,GAEeD,EAAf,EAEN,GARgD,EAKtC,EAFA,EAOAC,WAAPC,EAAAE,IAAA,SACH,EAEG,IAkBJG,0BA/BuB,SAAAP,EAAAC,GAAA,OAAA,SAAAO,EAAAC,GAAA,OAA/BD,EAAAJ,IAAAJ,GAAAM,cAAAG,EAAAL,IAAAJ,GAAAM,cAuBA,QAAAL,EAAA,GAAA,EAUQQ,EAASL,IAAIJ,GAAUM,cAAgBE,EAASJ,IAAIJ,GAAUM,cACxC,QAAfL,GAAwB,EAAI,EAEhC","file":"../../../scripts/mvc/library/library-util.js","sourcesContent":["/**\n     * Create alphabetical based two-argument comparator\n     * that takes into account that Folder comes before Dataset.\n     * If sort_key is not present it is set to ''.\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\nvar generateFolderComparator = (sort_key, sort_order) => (itemA, itemB) => {\n    if (itemA.get(\"type\") === itemB.get(\"type\")) {\n        if (!itemA.has(sort_key) && !itemB.has(sort_key)) {\n            return 0;\n        } else if (!itemA.has(sort_key)) {\n            return 1;\n        } else if (!itemB.has(sort_key)) {\n            return -1;\n        }\n        if (itemA.get(sort_key).toLowerCase() > itemB.get(sort_key).toLowerCase()) {\n            return sort_order === \"asc\" ? 1 : -1;\n        }\n        if (itemB.get(sort_key).toLowerCase() > itemA.get(sort_key).toLowerCase()) {\n            return sort_order === \"asc\" ? -1 : 1;\n        }\n        return 0; // equal\n    } else {\n        if (itemA.get(\"type\") === \"folder\") {\n            return -1; // folder is always before dataset\n        }\n        return 1;\n    }\n};\n/**\n     * Create alphabetical based two-argument comparator\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\nvar generateLibraryComparator = (sort_key, sort_order) => (libraryA, libraryB) => {\n    if (libraryA.get(sort_key).toLowerCase() > libraryB.get(sort_key).toLowerCase()) {\n        return sort_order === \"asc\" ? 1 : -1;\n    }\n    if (libraryB.get(sort_key).toLowerCase() > libraryA.get(sort_key).toLowerCase()) {\n        return sort_order === \"asc\" ? -1 : 1;\n    }\n    return 0; // equal\n};\nexport default {\n    generateFolderComparator: generateFolderComparator,\n    generateLibraryComparator: generateLibraryComparator\n};\n"]}