{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["FolderToolbarView","Backbone","View","extend","el","events","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","click .toolbtn-show-locinfo","click .page_size_prompt","defaults","can_add_library_item","contains_file_or_folder","chain_call_control","total_number","disabled_jstree_element","modal","jstree","histories","failed_number","list_extensions","auto","id","description","list_genomes","initialize","options","this","_","render","toolbar_template","templateToolBar","is_anonym","mutiple_add_dataset_options","Galaxy","user","template_defaults","is_admin","isAdmin","isAnonymous","config","$el","renderPaginator","html","paginator_template","templatePaginator","$","find","total_items_count","items_shown","show_page","get","configureElements","show","hide","tooltip","createFolderFromModal","event","preventDefault","stopPropagation","template","templateNewFolderInModal","self","closing_events","title","body","Create","create_new_folder_event","folderDetails","serialize_new_folder","validate_new_folder","current_folder_id","FolderAsModel","url_items","folder","history","fragment","indexOf","length","url","urlRoot","save","success","type","collection","add","set","libraries","response","responseJSON","error","err_msg","_toastr2","default","name","val","modalBulkImport","findCheckedRows","$checkedValues","info","GalaxyHistories","fetch","done","that","templateBulkImportInModal","models","buttons","Import","importAllIntoHistory","Close","fail","model","disableButton","new_history_name","processImportToHistory","new_history","always","status","enableButton","history_id","history_name","text","each","dataset_ids","folder_ids","push","row_id","data","substring","historyItem","source","i","datasets_to_import","_libraryModel2","HistoryItem","content","library_dataset_id","folders_to_import","initChainCallControl","action","jQuery","getJSON","chainCallImportingIntoHistory","root","updateProgress","progress","progressStep","width","Math","round","txt_representation","download","closest","processDownload","format","ld_ids","pair","method","inputs","param","split","addFilesFromHistoryModal","Add","closing_callback","fetchAndDisplayHistoryContents","library_router","navigate","trigger","change","target","value","importFilesFromPathModal","templateImportPathModal","template_modal","renderSelectBoxes","fetchExtAndGenomes","_utils2","cache","key","datatypes","extension","genomes","description_url","a","b","sort","container","select_extension","_uiSelect2","css","importFilesFromGalaxyFolderModal","templateBrowserModal","renderJstree","core","plugins","Jstree","types","icon","file","checkbox","three_state","err_code","warning","importFromPathsClicked","valid_paths","preserve_dirs","is","link_data","space_to_tab","to_posix_lines","paths","file_type","dbkey","trimmed","chainCallImportingFolders","tag_using_filenames","templateAddingDatasetsProgressBar","templateImportIntoHistoryProgressBar","folder_name","templateDeletingItemsProgressBar","emit","importFromJstreePath","select_genome","all_nodes","get_selected","selected_nodes","filter","node","state","disabled","li_attr","undefined","selection_type","full_source","full_path","chainCallImportingUserdirFiles","history_contents","HistoryContents","history_contents_template","templateHistoryContents","contents","reverse","bind","prop","addAllDatasetsFromHistory","checked_hdas","history_item_ids","items_to_add","history_item_types","history_item_id","folder_item","hid","item_type","Item","from_hdca_id","from_hda_id","window","location","history_item_set","pop","popped_item","promise","onclick","when","post","chainCallAddingHdas","hdas_set","deleted_items","item_to_delete","added_hdas","Folder","folderListView","updated_item","chainCallDeletingItems","items_to_delete","checkIncludeDeleted","checked","include_deleted","fetchFolder","deleteSelectedItems","destroy","item","remove","model_class","items_total","dataset","showLocInfo","library","showLocInfoModal","showImportModal","libraryListView","parent_library_id","Library","templateLocInfoInModal","back","e","folder_page_size","prompt","parseInt","preferences","templateAddFilesFromHistory","join"],"mappings":"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ACpB,OAAOzQ,EAAEgC,UAED,QACA,6CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACFiP,KAAK,MAIfhP,yBAA0B,WACtB,OAAOjC,EAAEgC,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACFiP,KAAK,MAIfrM,0BAA2B,WACvB,OAAO5E,EAAEgC,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACFiP,KAAK,MAIfpF,qCAAsC,WAClC,OAAO7L,EAAEgC,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACFiP,KAAK,MAIfrF,kCAAmC,WAC/B,OAAO5L,EAAEgC,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACFiP,KAAK,MAIflF,iCAAkC,WAC9B,OAAO/L,EAAEgC,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACFiP,KAAK,MAIf9G,qBAAsB,WAClB,OAAOnK,EAAEgC,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFiP,KAAK,MAIfjI,wBAAyB,WACrB,OAAOhJ,EAAEgC,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFiP,KAAK,MAIfD,4BAA6B,WACzB,OAAOhR,EAAEgC,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACFiP,KAAK,MAIf9D,wBAAyB,WACrB,OAAOnN,EAAEgC,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACFiP,KAAK,MAIfhQ,kBAAmB,WACf,OAAOjB,EAAEgC,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,iLACA,UACA,SACA,kCACA,WACFiP,KAAK,mBAMf/S,kBAAmBA","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["import mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nimport \"libs/jquery/jstree\";\nvar FolderToolbarView = Backbone.View.extend({\n    el: \"#center\",\n\n    events: {\n        \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n        \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n        \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n        \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n        \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n        \"click .page_size_prompt\": \"showPageSizePrompt\"\n    },\n\n    defaults: {\n        can_add_library_item: false,\n        contains_file_or_folder: false,\n        chain_call_control: {\n            total_number: 0,\n            failed_number: 0\n        },\n        disabled_jstree_element: \"folders\"\n    },\n\n    modal: null,\n\n    // directory browsing object\n    jstree: null,\n\n    // user's histories\n    histories: null,\n\n    // genome select\n    select_genome: null,\n\n    // extension select\n    select_extension: null,\n\n    // extension types\n    list_extensions: [],\n\n    // datatype placeholder for extension auto-detection\n    auto: {\n        id: \"auto\",\n        text: \"Auto-detect\",\n        description:\n            \"This system will try to detect the file type automatically.\" +\n            \" If your file is not detected properly as one of the known formats,\" +\n            \" it most likely means that it has some format problems (e.g., different\" +\n            \" number of columns on different rows). You can still coerce the system\" +\n            \" to set your data to the format you think it should be.\" +\n            \" You can also upload compressed files, which will automatically be decompressed.\"\n    },\n\n    // genomes\n    list_genomes: [],\n\n    initialize: function(options) {\n        this.options = _.defaults(options || {}, this.defaults);\n        this.fetchExtAndGenomes();\n        this.render();\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var toolbar_template = this.templateToolBar();\n        var template_defaults = {\n            id: this.options.id,\n            is_admin: false,\n            is_anonym: true,\n            mutiple_add_dataset_options: false\n        };\n        if (Galaxy.user) {\n            template_defaults.is_admin = Galaxy.user.isAdmin();\n            template_defaults.is_anonym = Galaxy.user.isAnonymous();\n            if (\n                Galaxy.config.user_library_import_dir !== null ||\n                Galaxy.config.allow_library_path_paste !== false ||\n                Galaxy.config.library_import_dir !== null\n            ) {\n                template_defaults.mutiple_add_dataset_options = true;\n            }\n        }\n        this.$el.html(toolbar_template(template_defaults));\n    },\n\n    /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n    renderPaginator: function(options) {\n        this.options = _.extend(this.options, options);\n        var paginator_template = this.templatePaginator();\n        $(\"body\")\n            .find(\".folder-paginator\")\n            .html(\n                paginator_template({\n                    id: this.options.id,\n                    show_page: parseInt(this.options.show_page),\n                    page_count: parseInt(this.options.page_count),\n                    total_items_count: this.options.total_items_count,\n                    items_shown: this.options.items_shown,\n                    folder_page_size: Galaxy.libraries.preferences.get(\"folder_page_size\")\n                })\n            );\n    },\n\n    configureElements: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.can_add_library_item === true) {\n            $(\".add-library-items\").show();\n        } else {\n            $(\".add-library-items\").hide();\n        }\n        if (this.options.contains_file_or_folder === true) {\n            if (Galaxy.user) {\n                if (!Galaxy.user.isAnonymous()) {\n                    $(\".logged-dataset-manipulation\").show();\n                    $(\".dataset-manipulation\").show();\n                } else {\n                    $(\".dataset-manipulation\").show();\n                    $(\".logged-dataset-manipulation\").hide();\n                }\n            } else {\n                $(\".logged-dataset-manipulation\").hide();\n                $(\".dataset-manipulation\").hide();\n            }\n        } else {\n            $(\".logged-dataset-manipulation\").hide();\n            $(\".dataset-manipulation\").hide();\n        }\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    // shows modal for creating folder\n    createFolderFromModal: function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // create modal\n        var self = this;\n        var template = this.templateNewFolderInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Create New Folder\",\n            body: template(),\n            buttons: {\n                Create: function() {\n                    self.create_new_folder_event();\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    // create the new folder from modal\n    create_new_folder_event: function() {\n        var folderDetails = this.serialize_new_folder();\n        if (this.validate_new_folder(folderDetails)) {\n            var folder = new mod_library_model.FolderAsModel();\n            var url_items = Backbone.history.fragment.split(\"/\");\n            var current_folder_id;\n            if (url_items.indexOf(\"page\") > -1) {\n                current_folder_id = url_items[url_items.length - 3];\n            } else {\n                current_folder_id = url_items[url_items.length - 1];\n            }\n            folder.url = folder.urlRoot + current_folder_id;\n\n            folder.save(folderDetails, {\n                success: function(folder) {\n                    Galaxy.modal.hide();\n                    mod_toastr.success(\"Folder created.\");\n                    folder.set({ type: \"folder\" });\n                    Galaxy.libraries.folderListView.collection.add(folder);\n                },\n                error: function(model, response) {\n                    Galaxy.modal.hide();\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        } else {\n            mod_toastr.error(\"Folder's name is missing.\");\n        }\n        return false;\n    },\n\n    // serialize data from the modal\n    serialize_new_folder: function() {\n        return {\n            name: $(\"input[name='Name']\").val(),\n            description: $(\"input[name='Description']\").val()\n        };\n    },\n\n    // validate new folder info\n    validate_new_folder: function(folderDetails) {\n        return folderDetails.name !== \"\";\n    },\n\n    // show bulk import modal\n    modalBulkImport: function() {\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            var that = this;\n            this.histories = new mod_library_model.GalaxyHistories();\n            this.histories\n                .fetch()\n                .done(() => {\n                    var template = that.templateBulkImportInModal();\n                    that.modal = Galaxy.modal;\n                    that.modal.show({\n                        closing_events: true,\n                        title: \"Import into History\",\n                        body: template({\n                            histories: that.histories.models\n                        }),\n                        buttons: {\n                            Import: function() {\n                                that.importAllIntoHistory();\n                            },\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                })\n                .fail((model, response) => {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                });\n        }\n    },\n\n    /**\n   * Import all selected datasets into history.\n   */\n    importAllIntoHistory: function() {\n        this.modal.disableButton(\"Import\");\n        var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        var that = this;\n        if (new_history_name !== \"\") {\n            $.post(`${Galaxy.root}api/histories`, {\n                name: new_history_name\n            })\n                .done(new_history => {\n                    that.options.last_used_history_id = new_history.id;\n                    that.processImportToHistory(new_history.id, new_history.name);\n                })\n                .fail((xhr, status, error) => {\n                    mod_toastr.error(\"An error occurred.\");\n                })\n                .always(() => {\n                    that.modal.enableButton(\"Import\");\n                });\n        } else {\n            var history_id = $(\"select[name=dataset_import_bulk] option:selected\").val();\n            this.options.last_used_history_id = history_id;\n            var history_name = $(\"select[name=dataset_import_bulk] option:selected\").text();\n            this.processImportToHistory(history_id, history_name);\n            this.modal.enableButton(\"Import\");\n        }\n    },\n\n    processImportToHistory: function(history_id, history_name) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        // prepare the dataset objects to be imported\n        var datasets_to_import = [];\n        for (var i = dataset_ids.length - 1; i >= 0; i--) {\n            var library_dataset_id = dataset_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = `${historyItem.urlRoot + history_id}/contents`;\n            historyItem.content = library_dataset_id;\n            historyItem.source = \"library\";\n            datasets_to_import.push(historyItem);\n        }\n\n        // prepare the folder objects to be imported\n        var folders_to_import = [];\n        for (var i = folder_ids.length - 1; i >= 0; i--) {\n            var library_folder_id = folder_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = `${historyItem.urlRoot + history_id}/contents`;\n            historyItem.content = library_folder_id;\n            historyItem.source = \"library_folder\";\n            datasets_to_import.push(historyItem);\n        }\n\n        this.initChainCallControl({\n            length: datasets_to_import.length,\n            action: \"to_history\",\n            history_name: history_name\n        });\n        // set the used history as current so user will see the last one\n        // that he imported into in the history panel on the 'analysis' page\n        jQuery.getJSON(`${Galaxy.root}history/set_as_current?id=${history_id}`);\n        this.chainCallImportingIntoHistory(datasets_to_import, history_name);\n    },\n\n    /**\n   * Update the progress bar in modal window.\n   */\n    updateProgress: function() {\n        this.progress += this.progressStep;\n        $(\".progress-bar-import\").width(`${Math.round(this.progress)}%`);\n        var txt_representation = `${Math.round(this.progress)}% Complete`;\n        $(\".completion_span\").text(txt_representation);\n    },\n\n    /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n    download: function(folder_id, format) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        var url = `${Galaxy.root}api/libraries/datasets/download/${format}`;\n        var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n        this.processDownload(url, data, \"get\");\n    },\n\n    /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n    processDownload: function(url, data, method) {\n        if (url && data) {\n            // data can be string of parameters or array/object\n            data = typeof data === \"string\" ? data : $.param(data);\n            // split params into form inputs\n            var inputs = \"\";\n            $.each(data.split(\"&\"), function() {\n                var pair = this.split(\"=\");\n                inputs += `<input type=\"hidden\" name=\"${pair[0]}\" value=\"${pair[1]}\" />`;\n            });\n            // send request\n            $(`<form action=\"${url}\" method=\"${method || \"post\"}\">${inputs}</form>`)\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            mod_toastr.info(\"Your download will begin soon.\");\n        } else {\n            mod_toastr.error(\"An error occurred.\");\n        }\n    },\n\n    addFilesFromHistoryModal: function() {\n        this.histories = new mod_library_model.GalaxyHistories();\n        var self = this;\n        this.histories\n            .fetch()\n            .done(() => {\n                self.modal = Galaxy.modal;\n                var template_modal = self.templateAddFilesFromHistory();\n                self.modal.show({\n                    closing_events: true,\n                    title: \"Adding datasets from your history\",\n                    body: template_modal({\n                        histories: self.histories.models\n                    }),\n                    buttons: {\n                        Add: function() {\n                            self.addAllDatasetsFromHistory();\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        Galaxy.libraries.library_router.navigate(`folders/${self.id}`, { trigger: true });\n                    }\n                });\n                self.fetchAndDisplayHistoryContents(self.histories.models[0].id);\n                $(\"#dataset_add_bulk\").change(event => {\n                    self.fetchAndDisplayHistoryContents(event.target.value);\n                });\n            })\n            .fail((model, response) => {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            });\n    },\n\n    /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n    importFilesFromPathModal: function() {\n        var that = this;\n        this.modal = Galaxy.modal;\n        var template_modal = this.templateImportPathModal();\n        this.modal.show({\n            closing_events: true,\n            title: \"Please enter paths to import\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromPathsClicked(that);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(`folders/${that.id}`, {\n                    trigger: true\n                });\n            }\n        });\n        this.renderSelectBoxes();\n    },\n\n    /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n    fetchExtAndGenomes: function() {\n        var that = this;\n        mod_utils.get({\n            url: `${Galaxy.root}api/datatypes?extension_only=False`,\n            success: function(datatypes) {\n                that.list_extensions = [];\n                for (var key in datatypes) {\n                    that.list_extensions.push({\n                        id: datatypes[key].extension,\n                        text: datatypes[key].extension,\n                        description: datatypes[key].description,\n                        description_url: datatypes[key].description_url\n                    });\n                }\n                that.list_extensions.sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0));\n                that.list_extensions.unshift(that.auto);\n            },\n            cache: true\n        });\n        mod_utils.get({\n            url: `${Galaxy.root}api/genomes`,\n            success: function(genomes) {\n                that.list_genomes = [];\n                for (var key in genomes) {\n                    that.list_genomes.push({\n                        id: genomes[key][1],\n                        text: genomes[key][0]\n                    });\n                }\n                that.list_genomes.sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0));\n            },\n            cache: true\n        });\n    },\n\n    renderSelectBoxes: function() {\n        // This won't work properly unlesss we already have the data fetched.\n        // See this.fetchExtAndGenomes()\n        // TODO switch to common resources:\n        // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n        var that = this;\n        this.select_genome = new mod_select.View({\n            css: \"library-genome-select\",\n            data: that.list_genomes,\n            container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n            value: \"?\"\n        });\n        this.select_extension = new mod_select.View({\n            css: \"library-extension-select\",\n            data: that.list_extensions,\n            container: Galaxy.modal.$el.find(\"#library_extension_select\"),\n            value: \"auto\"\n        });\n    },\n\n    /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n    importFilesFromGalaxyFolderModal: function(options) {\n        var that = this;\n        var template_modal = this.templateBrowserModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Please select folders or files\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromJstreePath(that, options);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(`folders/${that.id}`, {\n                    trigger: true\n                });\n            }\n        });\n\n        $(\".libimport-select-all\").bind(\"click\", () => {\n            $(\"#jstree_browser\").jstree(\"check_all\");\n        });\n        $(\".libimport-select-none\").bind(\"click\", () => {\n            $(\"#jstree_browser\").jstree(\"uncheck_all\");\n        });\n\n        this.renderSelectBoxes();\n        options.disabled_jstree_element = \"folders\";\n        this.renderJstree(options);\n\n        $(\"input[type=radio]\").change(event => {\n            if (event.target.value === \"jstree-disable-folders\") {\n                options.disabled_jstree_element = \"folders\";\n                that.renderJstree(options);\n                $(\".jstree-folders-message\").hide();\n                $(\".jstree-preserve-structure\").hide();\n                $(\".jstree-files-message\").show();\n            } else if (event.target.value === \"jstree-disable-files\") {\n                $(\".jstree-files-message\").hide();\n                $(\".jstree-folders-message\").show();\n                $(\".jstree-preserve-structure\").show();\n                options.disabled_jstree_element = \"files\";\n                that.renderJstree(options);\n            }\n        });\n    },\n\n    /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n    renderJstree: function(options) {\n        var that = this;\n        this.options = _.extend(this.options, options);\n        var target = options.source || \"userdir\";\n        var disabled_jstree_element = this.options.disabled_jstree_element;\n        this.jstree = new mod_library_model.Jstree();\n        this.jstree.url = `${this.jstree.urlRoot}?target=${target}&format=jstree&disable=${disabled_jstree_element}`;\n        this.jstree.fetch({\n            success: function(model, response) {\n                $(\"#jstree_browser\").jstree(\"destroy\");\n                $(\"#jstree_browser\").jstree({\n                    core: {\n                        data: model\n                    },\n                    plugins: [\"types\", \"checkbox\"],\n                    types: {\n                        folder: {\n                            icon: \"jstree-folder\"\n                        },\n                        file: {\n                            icon: \"jstree-file\"\n                        }\n                    },\n                    checkbox: {\n                        three_state: false\n                    }\n                });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    if (response.responseJSON.err_code === 404001) {\n                        mod_toastr.warning(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    }\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n    importFromPathsClicked: function() {\n        var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n        var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n        var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var paths = $(\"textarea#import_paths\").val();\n        var valid_paths = [];\n        if (!paths) {\n            mod_toastr.info(\"Please enter a path relative to Galaxy root.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            paths = paths.split(\"\\n\");\n            for (var i = paths.length - 1; i >= 0; i--) {\n                var trimmed = paths[i].trim();\n                if (trimmed.length !== 0) {\n                    valid_paths.push(trimmed);\n                }\n            }\n            this.initChainCallControl({\n                length: valid_paths.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallImportingFolders({\n                paths: valid_paths,\n                preserve_dirs: preserve_dirs,\n                link_data: link_data,\n                space_to_tab: space_to_tab,\n                to_posix_lines: to_posix_lines,\n                source: \"admin_path\",\n                file_type: file_type,\n                tag_using_filenames: tag_using_filenames,\n                dbkey: dbkey\n            });\n        }\n    },\n\n    /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n    initChainCallControl: function(options) {\n        var template;\n        switch (options.action) {\n            case \"adding_datasets\":\n                template = this.templateAddingDatasetsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(\n                    template({\n                        folder_name: this.options.folder_name\n                    })\n                );\n                break;\n            case \"deleting_datasets\":\n                template = this.templateDeletingItemsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template());\n                break;\n            case \"to_history\":\n                template = this.templateImportIntoHistoryProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template({ history_name: options.history_name }));\n                break;\n            default:\n                Galaxy.emit.error(\"Wrong action specified.\", \"datalibs\");\n                break;\n        }\n\n        // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n        // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n        this.progress = 0;\n        this.progressStep = 100 / options.length;\n        this.options.chain_call_control.total_number = options.length;\n        this.options.chain_call_control.failed_number = 0;\n    },\n\n    /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n    importFromJstreePath: function(that, options) {\n        var all_nodes = $(\"#jstree_browser\")\n            .jstree()\n            .get_selected(true);\n        // remove the disabled elements that could have been trigerred with the 'select all'\n        var selected_nodes = _.filter(all_nodes, node => node.state.disabled == false);\n        var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n        var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n        var selection_type = selected_nodes[0].type;\n        var paths = [];\n        if (selected_nodes.length < 1) {\n            mod_toastr.info(\"Please select some items first.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                if (selected_nodes[i].li_attr.full_path !== undefined) {\n                    paths.push(selected_nodes[i].li_attr.full_path);\n                }\n            }\n            this.initChainCallControl({\n                length: paths.length,\n                action: \"adding_datasets\"\n            });\n            if (selection_type === \"folder\") {\n                var full_source = `${options.source}_folder`;\n                this.chainCallImportingFolders({\n                    paths: paths,\n                    preserve_dirs: preserve_dirs,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    tag_using_filenames: tag_using_filenames\n                });\n            } else if (selection_type === \"file\") {\n                var full_source = `${options.source}_file`;\n                this.chainCallImportingUserdirFiles({\n                    paths: paths,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    tag_using_filenames: tag_using_filenames\n                });\n            }\n        }\n    },\n\n    fetchAndDisplayHistoryContents: function(history_id) {\n        var history_contents = new mod_library_model.HistoryContents({\n            id: history_id\n        });\n        var self = this;\n        history_contents.fetch({\n            success: function(history_contents) {\n                var history_contents_template = self.templateHistoryContents();\n                self.histories.get(history_id).set({ contents: history_contents });\n                self.modal.$el.find(\"#selected_history_content\").html(\n                    history_contents_template({\n                        history_contents: history_contents.models.reverse()\n                    })\n                );\n                self.modal.$el.find(\".history-import-select-all\").bind(\"click\", () => {\n                    $(\"#selected_history_content [type=checkbox]\").prop(\"checked\", true);\n                });\n                self.modal.$el.find(\".history-import-unselect-all\").bind(\"click\", () => {\n                    $(\"#selected_history_content [type=checkbox]\").prop(\"checked\", false);\n                });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n   * Import all selected datasets from history into the current folder.\n   */\n    addAllDatasetsFromHistory: function() {\n        var checked_hdas = this.modal.$el.find(\"#selected_history_content\").find(\":checked\");\n        var history_item_ids = []; // can be hda or hdca\n        var history_item_types = [];\n        var items_to_add = [];\n        if (checked_hdas.length < 1) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            this.modal.disableButton(\"Add\");\n            checked_hdas.each(function() {\n                var hid = $(this)\n                    .closest(\"li\")\n                    .data(\"id\");\n                if (hid) {\n                    var item_type = $(this)\n                        .closest(\"li\")\n                        .data(\"name\");\n                    history_item_ids.push(hid);\n                    history_item_types.push(item_type);\n                }\n            });\n            for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                var history_item_id = history_item_ids[i];\n                var folder_item = new mod_library_model.Item();\n                folder_item.url = `${Galaxy.root}api/folders/${this.options.id}/contents`;\n                if (history_item_types[i] === \"collection\") {\n                    folder_item.set({ from_hdca_id: history_item_id });\n                } else {\n                    folder_item.set({ from_hda_id: history_item_id });\n                }\n                items_to_add.push(folder_item);\n            }\n            this.initChainCallControl({\n                length: items_to_add.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallAddingHdas(items_to_add);\n        }\n    },\n\n    /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n    chainCallImportingIntoHistory: function(history_item_set, history_name) {\n        var self = this;\n        var popped_item = history_item_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected datasets imported into history. Click this to start analyzing it.\", \"\", {\n                    onclick: function() {\n                        window.location = Galaxy.root;\n                    }\n                });\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\"There was an error and no datasets were imported into history.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                    \"\",\n                    {\n                        onclick: function() {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            }\n            Galaxy.modal.hide();\n            return true;\n        }\n        var promise = $.when(\n            popped_item.save({\n                content: popped_item.content,\n                source: popped_item.source\n            })\n        );\n\n        promise\n            .done(() => {\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(history_item_set, history_name);\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(history_item_set, history_name);\n            });\n    },\n\n    /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n    chainCallImportingUserdirFiles: function(options) {\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected files imported into the current folder\");\n                Galaxy.modal.hide();\n            } else {\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                `${Galaxy.root}api/libraries/datasets?encoded_folder_id=${that.id}&source=${options.source}&path=${popped_item}&file_type=${options.file_type}&link_data=${options.link_data}&space_to_tab=${options.space_to_tab}&to_posix_lines=${options.to_posix_lines}&dbkey=${options.dbkey}&tag_using_filenames=${options.tag_using_filenames}`\n            )\n        );\n        promise\n            .done(response => {\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            })\n            .fail(() => {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            });\n    },\n\n    /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n    chainCallImportingFolders: function(options) {\n        // TODO need to check which paths to call\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected folders and their contents imported into the current folder.\");\n                Galaxy.modal.hide();\n            } else {\n                // TODO better error report\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                `${Galaxy.root}api/libraries/datasets?encoded_folder_id=${that.id}&source=${options.source}&path=${popped_item}&preserve_dirs=${options.preserve_dirs}&link_data=${options.link_data}&to_posix_lines=${options.to_posix_lines}&space_to_tab=${options.space_to_tab}&file_type=${options.file_type}&dbkey=${options.dbkey}&tag_using_filenames=${options.tag_using_filenames}`\n            )\n        );\n        promise\n            .done(response => {\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            })\n            .fail(() => {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            });\n    },\n\n    /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n    chainCallAddingHdas: function(hdas_set) {\n        var self = this;\n        this.added_hdas = new mod_library_model.Folder();\n        var popped_item = hdas_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected datasets from history added to the folder\");\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\"There was an error and no datasets were added to the folder.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\"Some of the datasets could not be added to the folder\");\n            }\n            Galaxy.modal.hide();\n            return this.added_hdas;\n        }\n        var promise = $.when(\n            popped_item.save({\n                from_hda_id: popped_item.get(\"from_hda_id\")\n            })\n        );\n\n        promise\n            .done(model => {\n                Galaxy.libraries.folderListView.collection.add(model);\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            });\n    },\n\n    /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n    chainCallDeletingItems: function(items_to_delete) {\n        var self = this;\n        this.deleted_items = new mod_library_model.Folder();\n        var item_to_delete = items_to_delete.pop();\n        if (typeof item_to_delete === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected items were deleted.\");\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\n                    \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                );\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\n                    \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.deleted_items;\n        }\n        item_to_delete\n            .destroy()\n            .done(item => {\n                Galaxy.libraries.folderListView.collection.remove(item_to_delete.id);\n                self.updateProgress();\n                // add the deleted item to collection, triggers rendering\n                if (Galaxy.libraries.folderListView.options.include_deleted) {\n                    var updated_item = null;\n                    if (item.type === \"folder\" || item.model_class === \"LibraryFolder\") {\n                        updated_item = new mod_library_model.FolderAsModel(item);\n                    } else if (item.type === \"file\" || item.model_class === \"LibraryDataset\") {\n                        updated_item = new mod_library_model.Item(item);\n                    } else {\n                        Galaxy.emit.error(\"Unknown library item type found.\", \"datalibs\");\n                        Galaxy.emit.error(item.type || item.model_class, \"datalibs\");\n                    }\n                    Galaxy.libraries.folderListView.collection.add(updated_item);\n                }\n                self.chainCallDeletingItems(items_to_delete);\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallDeletingItems(items_to_delete);\n            });\n    },\n\n    /**\n   * Handles the click on 'show deleted' checkbox\n   */\n    checkIncludeDeleted: function(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: true\n            });\n        } else {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: false\n            });\n        }\n    },\n\n    /**\n   * Delete the selected items. Atomic. One by one.\n   */\n    deleteSelectedItems: function() {\n        var dataset_ids = [];\n        var folder_ids = [];\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select at least one item for deletion.\");\n        } else {\n            var template = this.templateDeletingItemsProgressBar();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: \"Deleting selected items\",\n                body: template({}),\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n            // init the control counters\n            this.options.chain_call_control.total_number = 0;\n            this.options.chain_call_control.failed_number = 0;\n            $checkedValues.each(function() {\n                var row_id = $(this)\n                    .closest(\"tr\")\n                    .data(\"id\");\n                if (row_id !== undefined) {\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                }\n            });\n            // init the progress bar\n            var items_total = dataset_ids.length + folder_ids.length;\n            this.progressStep = 100 / items_total;\n            this.progress = 0;\n\n            // prepare the dataset items to be added\n            var items_to_delete = [];\n            for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                var dataset = new mod_library_model.Item({\n                    id: dataset_ids[i]\n                });\n                items_to_delete.push(dataset);\n            }\n            for (var i = folder_ids.length - 1; i >= 0; i--) {\n                var folder = new mod_library_model.FolderAsModel({\n                    id: folder_ids[i]\n                });\n                items_to_delete.push(folder);\n            }\n\n            this.options.chain_call_control.total_number = items_total;\n            // call the recursive function to call ajax one after each other (request FIFO queue)\n            this.chainCallDeletingItems(items_to_delete);\n        }\n    },\n\n    showLocInfo: function() {\n        var library = null;\n        var that = this;\n        if (Galaxy.libraries.libraryListView !== null) {\n            library = Galaxy.libraries.libraryListView.collection.get(this.options.parent_library_id);\n            this.showLocInfoModal(library);\n        } else {\n            library = new mod_library_model.Library({\n                id: this.options.parent_library_id\n            });\n            library.fetch({\n                success: function() {\n                    that.showLocInfoModal(library);\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    showLocInfoModal: function(library) {\n        var that = this;\n        var template = this.templateLocInfoInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Location Details\",\n            body: template({ library: library, options: that.options }),\n            buttons: {\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    showImportModal: function(options) {\n        switch (options.source) {\n            case \"history\":\n                this.addFilesFromHistoryModal();\n                break;\n            case \"importdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"importdir\"\n                });\n                break;\n            case \"path\":\n                this.importFilesFromPathModal();\n                break;\n            case \"userdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"userdir\"\n                });\n                break;\n            default:\n                Galaxy.libraries.library_router.back();\n                mod_toastr.error(\"Invalid import source.\");\n                break;\n        }\n    },\n\n    /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n    showPageSizePrompt: function(e) {\n        e.preventDefault();\n        var folder_page_size = prompt(\n            \"How many items per page do you want to see?\",\n            Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        if (folder_page_size != null && folder_page_size == parseInt(folder_page_size)) {\n            Galaxy.libraries.preferences.set({\n                folder_page_size: parseInt(folder_page_size)\n            });\n            Galaxy.libraries.folderListView.render({\n                id: this.options.id,\n                show_page: 1\n            });\n        }\n    },\n\n    findCheckedRows: function() {\n        return $(\"#folder_list_body\").find(\":checked\");\n    },\n\n    templateToolBar: function() {\n        return _.template(\n            [\n                // container start\n                '<div class=\"library_style_container\">',\n                // toolbar start\n                '<div id=\"library_toolbar\">',\n                '<form class=\"form-inline\" role=\"form\">',\n                \"<span><strong>DATA LIBRARIES</strong></span>\",\n                // paginator will append here\n                '<span class=\"library-paginator folder-paginator\"></span>',\n                '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                \"<label>\",\n                '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                \"</label>\",\n                \"</div>\",\n                '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                \"</button>\",\n                \"<% if(mutiple_add_dataset_options) { %>\",\n                '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                \"<% } %>\",\n                \"<% } %>\",\n                \"</ul>\",\n                \"</div>\",\n                \"<% } else { %>\",\n                '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                \"</a>\",\n                \"<% } %>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                '<span class=\"fa fa-book\"></span>',\n                \"&nbsp;to History\",\n                \"</button>\",\n                '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                \"</ul>\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                '<span class=\"fa fa-times\"></span> Delete</button>',\n                '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                '<span class=\"fa fa-info-circle\"></span>',\n                \"&nbsp;Details\",\n                \"</button>\",\n                '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                '<span class=\"fa fa-question-circle\"></span>',\n                \"&nbsp;Help\",\n                \"</button>\",\n                \"</a>\",\n                \"</span>\",\n                \"</div>\",\n                \"</form>\",\n                // toolbar end\n                '<div id=\"folder_items_element\">',\n                \"</div>\",\n                // paginator will append here\n                '<div class=\"folder-paginator paginator-bottom\"></div>',\n                // container end\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateLocInfoInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">library</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                '<td><%- library.get(\"name\") %></td>',\n                \"</tr>\",\n                '<% if(library.get(\"description\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                '<td><%- library.get(\"description\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>synopsis</td>\",\n                '<td><%- library.get(\"synopsis\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>created</td>\",\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                '<td><%- library.get(\"id\") %></td>',\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">folder</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                \"<td><%- options.folder_name %></td>\",\n                \"</tr>\",\n                '<% if(options.folder_description !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                \"<td><%- options.folder_description %></td>\",\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                \"<td><%- options.id %></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateNewFolderInModal: function() {\n        return _.template(\n            [\n                '<div id=\"new_folder_modal\">',\n                \"<form>\",\n                '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                \"</form>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBulkImportInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<div class=\"library-modal-item\">',\n                \"Select history: \",\n                '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                \"<% _.each(histories, function(history) { %>\",\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                '<div class=\"library-modal-item\">',\n                \"or create new: \",\n                '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                \"</input>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportIntoHistoryProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddingDatasetsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateDeletingItemsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBrowserModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom:1em;\">',\n                '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                \"</label>\",\n                '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                \"</label>\",\n                \"</div>\",\n                '<div style=\"margin-bottom:1em;\">',\n                '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"<hr />\",\n                // append jstree object here\n                '<div id=\"jstree_browser\">',\n                \"</div>\",\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<br>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportPathModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom: 0.5em;\">',\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                \"<br>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddFilesFromHistory: function() {\n        return _.template(\n            [\n                '<div id=\"add_files_modal\">',\n                \"<div>\",\n                \"1.&nbsp;Select history:&nbsp;\",\n                '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                \"<% _.each(histories, function(history) { %>\", //history select box\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                \"<br/>\",\n                '<div id=\"selected_history_content\">',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateHistoryContents: function() {\n        return _.template(\n            [\n                \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                \"<div>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"</div>\",\n                \"<br>\",\n                \"<ul>\",\n                \"<% _.each(history_contents, function(history_item) { %>\",\n                '<% if (history_item.get(\"deleted\") != true ) { %>',\n                '<% var item_name = history_item.get(\"name\") %>',\n                '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                '<% var collection_type = history_item.get(\"collection_type\") %>',\n                '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                \"<label>\",\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                \"</label>\",\n                \"</li>\",\n                \"<% } else { %>\",\n                '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                \"</span>\",\n                \"</li>\",\n                \"<% } %>\",\n                '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                \"</label>\",\n                \"</li>\",\n                \"<% } %>\",\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ul>\"\n            ].join(\"\")\n        );\n    },\n\n    templatePaginator: function() {\n        return _.template(\n            [\n                '<ul class=\"pagination pagination-sm\">',\n                \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } else { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                \"<% } else { %>\", // we are on the first page\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                '<li class=\"active\">',\n                '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                \"</li>\",\n                \"<% if ( ( show_page ) < page_count ) { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } else { %>\",\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } %>\",\n                \"</ul>\",\n                \"<span>\",\n                ' <%- items_shown %> items shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- folder_page_size %> per page\" class=\"page_size_prompt\">(change)</a>',\n                \"</span>\",\n                \"<span>\",\n                \" <%- total_items_count %> total\",\n                \"</span>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderToolbarView: FolderToolbarView\n};\n"]}