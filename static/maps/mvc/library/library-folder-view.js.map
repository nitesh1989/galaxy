{"version":3,"sources":["mvc/library/library-folder-view.js"],"names":["FolderView","Backbone","View","extend","el","model","options","events","click .toolbtn_save_permissions","initialize","this","_","id","fetchFolder","_libraryModel2","default","FolderAsModel","fetch","success","that","show_permissions","showPermissions","error","response","responseJSON","_toastr2","err_msg","onclick","Galaxy","libraries","back","library_router","is_admin","user","isAdmin","$el","html","template","folder","self","$","get","root","done","fetched_permissions","prepareSelectBoxes","templateFolderPermissions","_serializeRoles","role_list","i","fail","selected_add_item_roles","add_library_item_role_list","manage_folder_role_list","selected_modify_folder_roles","modify_folder_role_list","selected_roles","push","_uiSelect2","_createSelectOptions","manageSelectObject","selected_manage_folder_roles","modifySelectObject","minimumInputLength","addSelectObject","container","find","ajax","select_options","css","term","page","placeholder","page_limit","url","data","more","total","q","roles","formatResult","role","name","type","formatSelection","initSelection","element","callback","roleFormatSelection","item","split","initialData","init_data","join","_extractIds","roles_list","ids_list","add_ids","select2","manage_ids","modify_ids","post","add_ids[]","manage_ids[]","savePermissions"],"mappings":"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","file":"../../../scripts/mvc/library/library-folder-view.js","sourcesContent":["import mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nvar FolderView = Backbone.View.extend({\n    el: \"#center\",\n\n    model: null,\n\n    options: {},\n\n    events: {\n        \"click .toolbtn_save_permissions\": \"savePermissions\"\n    },\n\n    initialize: function(options) {\n        this.options = _.extend(this.options, options);\n        if (this.options.id) {\n            this.fetchFolder();\n        }\n    },\n\n    fetchFolder: function(options) {\n        this.options = _.extend(this.options, options);\n        this.model = new mod_library_model.FolderAsModel({\n            id: this.options.id\n        });\n        var that = this;\n        this.model.fetch({\n            success: function() {\n                if (that.options.show_permissions) {\n                    that.showPermissions();\n                }\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(`${response.responseJSON.err_msg} Click this to go back.`, \"\", {\n                        onclick: function() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                } else {\n                    mod_toastr.error(\"An error occurred. Click this to go back.\", \"\", {\n                        onclick: function() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    showPermissions: function(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").remove();\n\n        var is_admin = false;\n        if (Galaxy.user) {\n            is_admin = Galaxy.user.isAdmin();\n        }\n        var template = this.templateFolderPermissions();\n        this.$el.html(template({ folder: this.model, is_admin: is_admin }));\n\n        var self = this;\n        $.get(`${Galaxy.root}api/folders/${self.id}/permissions?scope=current`)\n            .done(fetched_permissions => {\n                self.prepareSelectBoxes({\n                    fetched_permissions: fetched_permissions\n                });\n            })\n            .fail(() => {\n                mod_toastr.error(\"An error occurred while attempting to fetch folder permissions.\");\n            });\n\n        $(\"#center [data-toggle]\").tooltip();\n        //hack to show scrollbars\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    _serializeRoles: function(role_list) {\n        var selected_roles = [];\n        for (var i = 0; i < role_list.length; i++) {\n            selected_roles.push(`${role_list[i][1]}:${role_list[i][0]}`);\n        }\n        return selected_roles;\n    },\n\n    prepareSelectBoxes: function(options) {\n        this.options = _.extend(this.options, options);\n        var fetched_permissions = this.options.fetched_permissions;\n        var self = this;\n\n        var selected_add_item_roles = this._serializeRoles(fetched_permissions.add_library_item_role_list);\n        var selected_manage_folder_roles = this._serializeRoles(fetched_permissions.manage_folder_role_list);\n        var selected_modify_folder_roles = this._serializeRoles(fetched_permissions.modify_folder_role_list);\n\n        self.addSelectObject = new mod_select.View(\n            this._createSelectOptions(this, \"add_perm\", selected_add_item_roles, false)\n        );\n        self.manageSelectObject = new mod_select.View(\n            this._createSelectOptions(this, \"manage_perm\", selected_manage_folder_roles, false)\n        );\n        self.modifySelectObject = new mod_select.View(\n            this._createSelectOptions(this, \"modify_perm\", selected_modify_folder_roles, false)\n        );\n    },\n\n    _createSelectOptions: function(self, id, init_data) {\n        var select_options = {\n            minimumInputLength: 0,\n            css: id,\n            multiple: true,\n            placeholder: \"Click to select a role\",\n            container: self.$el.find(`#${id}`),\n            ajax: {\n                url: `${Galaxy.root}api/folders/${self.id}/permissions?scope=available`,\n                dataType: \"json\",\n                quietMillis: 100,\n                data: function(term, page) {\n                    // page is the one-based page number tracked by Select2\n                    return {\n                        q: term, //search term\n                        page_limit: 10, // page size\n                        page: page // page number\n                    };\n                },\n                results: function(data, page) {\n                    var more = page * 10 < data.total; // whether or not there are more results available\n                    // notice we return the value of more so Select2 knows if more results can be loaded\n                    return { results: data.roles, more: more };\n                }\n            },\n            formatResult: function roleFormatResult(role) {\n                return `${role.name} type: ${role.type}`;\n            },\n\n            formatSelection: function roleFormatSelection(role) {\n                return role.name;\n            },\n            initSelection: function(element, callback) {\n                // the input tag has a value attribute preloaded that points to a preselected role's id\n                // this function resolves that id attribute to an object that select2 can render\n                // using its formatResult renderer - that way the role name is shown preselected\n                var data = [];\n                $(element.val().split(\",\")).each(function() {\n                    var item = this.split(\":\");\n                    data.push({\n                        id: item[0],\n                        name: item[1]\n                    });\n                });\n                callback(data);\n            },\n            initialData: init_data.join(\",\"),\n            dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n        };\n\n        return select_options;\n    },\n\n    /**\n   * Extract the role ids from Select2 elements's 'data'\n   */\n    _extractIds: function(roles_list) {\n        var ids_list = [];\n        for (var i = roles_list.length - 1; i >= 0; i--) {\n            ids_list.push(roles_list[i].id);\n        }\n        return ids_list;\n    },\n\n    /**\n   * Save the permissions for roles entered in the select boxes.\n   */\n    savePermissions: function(event) {\n        var self = this;\n        var add_ids = this._extractIds(this.addSelectObject.$el.select2(\"data\"));\n        var manage_ids = this._extractIds(this.manageSelectObject.$el.select2(\"data\"));\n        var modify_ids = this._extractIds(this.modifySelectObject.$el.select2(\"data\"));\n        $.post(`${Galaxy.root}api/folders/${self.id}/permissions?action=set_permissions`, {\n            \"add_ids[]\": add_ids,\n            \"manage_ids[]\": manage_ids,\n            \"modify_ids[]\": modify_ids\n        })\n            .done(fetched_permissions => {\n                self.showPermissions({\n                    fetched_permissions: fetched_permissions\n                });\n                mod_toastr.success(\"Permissions saved.\");\n            })\n            .fail(() => {\n                mod_toastr.error(\"An error occurred while attempting to set folder permissions.\");\n            });\n    },\n\n    templateFolderPermissions: function() {\n        return _.template(\n            [\n                '<div class=\"library_style_container\">',\n                '<div id=\"library_toolbar\">',\n                '<a href=\"#/folders/<%= folder.get(\"parent_id\") %>\">',\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the parent folder\" class=\"btn btn-default primary-button\" type=\"button\">',\n                '<span class=\"fa fa-caret-left fa-lg\"/>',\n                \"&nbsp;Parent folder\",\n                \"</button>\",\n                \"</a>\",\n                \"</div>\",\n                \"<h1>\",\n                'Folder: <%= _.escape(folder.get(\"name\")) %>',\n                \"</h1>\",\n                '<div class=\"alert alert-warning\">',\n                \"<% if (is_admin) { %>\",\n                \"You are logged in as an <strong>administrator</strong> therefore you can manage any folder on this Galaxy instance. Please make sure you understand the consequences.\",\n                \"<% } else { %>\",\n                \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\",\n                \"<% }%>\",\n                \"</div>\",\n                '<div class=\"dataset_table\">',\n                \"<h2>Folder permissions</h2>\",\n                \"<h4>\",\n                \"Roles that can manage permissions on this folder\",\n                \"</h4>\",\n                '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can manage permissions on this folder.\",\n                \"</div>\",\n                \"<h4>\",\n                \"Roles that can add items to this folder\",\n                \"</h4>\",\n                '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can add items to this folder (folders and datasets).\",\n                \"</div>\",\n                \"<h4>\",\n                \"Roles that can modify this folder\",\n                \"</h4>\",\n                '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can modify this folder (name, etc.).\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n                '<span class=\"fa fa-floppy-o\"/>',\n                \"&nbsp;Save\",\n                \"</button>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderView: FolderView\n};\n"]}