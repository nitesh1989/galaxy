{"version":3,"sources":["mvc/library/library-model.js"],"names":["Library","Backbone","Model","extend","urlRoot","Galaxy","root","isVisible","show_deleted","this","get","model","options","search","search_term","toLowerCase","filter","data","indexOf","lowercase_term","getVisible","filters","Libraries","item","sortLibraries","sort_key","sort_order","comparator","_libraryUtil2","default","generateLibraryComparator","sort","LibraryItem","filteredLibraries","Ldda","FolderAsModel","Folder","Collection","sortFolder","generateFolderComparator","defaults","folder","parse","obj","reset","folder_contents","length","i","type","folder_item","add","FolderContainer","file_item","HistoryItem","HistoryContents","initialize","id","url","GalaxyHistory","GalaxyHistories","Jstree"],"mappings":"iNAIIA,EAAUC,SAASC,MAAMC,QACzBC,QAAYC,OAAOC,KAAnB,iBAKAC,UAAW,SAASC,GAChB,IAAID,GAAY,EAVxB,OAWaC,GAAgBC,KAAKC,IAAI,aAC1BH,GAAY,GAZxBA,KAIIH,EAAAA,SAAmBE,WAAnBH,QAeAC,QAAYC,OAAOC,KAAnB,gBAEAK,MAAOX,EAZPO,WAAAA,SAAWK,GACPA,EAAIL,OAGHM,OAAA,SAAAC,GAqBD,GAAmB,IAAfA,EAAmB,OAAOL,KAblCE,IAAAA,EAHuCG,EAAAC,cAkBnC,OAAON,KAAKO,OAAO,SAAAC,GAZnBL,OAAA,IADQK,EAAAP,IAASE,QAASG,cACLG,QAArBC,MAsBJC,WAAY,SAASZ,EAAca,GAV/B,OAWAA,EAAUA,MAbS,IAAIC,EAAAb,KAAAO,OAAA,SAAAO,GAAA,OAAAA,EAAAhB,UAAAC,OAKtBgB,cAHD,SAAAC,EAAAC,GAIHjB,KAtBsCkB,WAAAC,EAAAC,QAAAC,0BAAAL,EAAAC,GAqCnCjB,KAAKsB,UAPLC,EAAIC,SAAAA,MAAAA,WAA8CC,EAAAF,EAAlD7B,QAiBJC,QAAYC,OAAOC,KAAnB,4BAGA6B,EAAgBH,EAAY7B,QAf5BqB,QAAAA,OAAelB,KAAfkB,iBAGCY,EAAAnC,SAAAoC,WAAAlC,QAtCsCQ,MAA3CqB,EAyCAM,WAAA,SAAAb,EAAAC,GACAjB,KAAAkB,WAAAC,EAAAC,QAAAU,yBAAAd,EAAAC,GAiBQjB,KAAKsB,UAZT3B,EAAYC,SAAZH,MAAAC,QAD0BqC,UAmBtBC,OAAQ,IAAIL,EAfhBD,QAAAA,OAAgBH,KAAhBG,eACA/B,GAAAA,WAkBAsC,MAAO,SAASC,GAdhBhC,KAAAA,IAAOqB,UAD6BY,QAIhC,IAAA,IAAKjB,EAAAA,EAAAA,EAALgB,EAAkBE,gBAAAC,OAASP,IAC3B,GAAA,WAAAI,EAAKZ,gBAALgB,GAAAC,KAAA,CACH,IAAAC,EAAA,IAAAd,EAAAQ,EAAAE,gBAAAE,IANLtC,KAAAC,IAAA,UAAAwC,IAAAD,QAwBmB,GAAoC,SAAhCN,EAAIE,gBAAgBE,GAAGC,KAAiB,CAf3DG,IAAAA,EAAkBlD,IAASC,EAAMC,EAAAA,gBAAO4C,IACxCP,KAAU9B,IAAA,UAAAwC,IAAAE,QAENhD,OAAYC,KAAOC,MAAnB,gEAGJoC,OAAOC,KAQKU,EAAApD,SAAKS,MAAIP,QACZC,QAAAC,OAAMC,KAAN,mBAGAgD,EAHMrD,SAGAoC,WAAAlC,QACHE,QAAAA,OAAAA,KAAAA,iBACHkD,WAAA,SAAA3C,GACJH,KAAA+C,GAAA5C,EAAA4C,IAEJC,IAAA,WAvBL,OAAAhD,KAAAL,QAAAK,KAAA+C,GAAA,aA0BA7C,MAAA0C,IAmBIK,EAAgBzD,SAASC,MAAMC,QAfnCC,QAAIiD,OAAcpD,KAAlB,mBAmBI0D,EAAkB1D,SAASoC,WAAWlC,QAf1CsD,IAAIH,OAAAA,KAAJ,gBACIlD,MAAAA,IAyBAwD,EAAS3D,SAASC,MAAMC,QAf5BC,QAAIsD,OAAAA,KAAJ,gCAIA1D,QAAI2D,EACAF,UAAQpD,EACRM,KAAAA,EAF6CuB,KAAjDA,EAoBIC,cAAeA,EAfnBC,OAAAA,EACAe,gBAAAA,EACAE,YAAAA,EAiBIC,gBAAiBA,EACjBI,cAAeA,EACfC,gBAAiBA,EAfrBC,OAAIA","file":"../../../scripts/mvc/library/library-model.js","sourcesContent":["import mod_util from \"mvc/library/library-util\";\n// ============================================================================\n// LIBRARY RELATED MODELS\n\nvar Library = Backbone.Model.extend({\n    urlRoot: `${Galaxy.root}api/libraries/`,\n\n    /** based on show_deleted would this lib show in the list of lib's?\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       */\n    isVisible: function(show_deleted) {\n        var isVisible = true;\n        if (!show_deleted && this.get(\"deleted\")) {\n            isVisible = false;\n        }\n        return isVisible;\n    }\n});\n\nvar Libraries = Backbone.Collection.extend({\n    urlRoot: `${Galaxy.root}api/libraries`,\n\n    model: Library,\n\n    initialize: function(options) {\n        options = options || {};\n    },\n\n    search: function(search_term) {\n        /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n        if (search_term == \"\") return this;\n        var lowercase_term = search_term.toLowerCase();\n        return this.filter(data => {\n            var lowercase_name = data.get(\"name\").toLowerCase();\n            return lowercase_name.indexOf(lowercase_term) !== -1;\n        });\n    },\n\n    /** Get every 'shown' library in this collection based on deleted filter\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       *  @returns array of library models\n       */\n    getVisible: function(show_deleted, filters) {\n        filters = filters || [];\n        var filteredLibraries = new Libraries(this.filter(item => item.isVisible(show_deleted)));\n\n        return filteredLibraries;\n    },\n\n    sortLibraries: function(sort_key, sort_order) {\n        this.comparator = mod_util.generateLibraryComparator(sort_key, sort_order);\n        this.sort();\n    }\n});\n\n// ============================================================================\n// FOLDER RELATED MODELS\n\nvar LibraryItem = Backbone.Model.extend({});\n\nvar Ldda = LibraryItem.extend({\n    urlRoot: `${Galaxy.root}api/libraries/datasets/`\n});\n\nvar FolderAsModel = LibraryItem.extend({\n    urlRoot: `${Galaxy.root}api/folders/`\n});\n\nvar Folder = Backbone.Collection.extend({\n    model: LibraryItem,\n\n    sortFolder: function(sort_key, sort_order) {\n        this.comparator = mod_util.generateFolderComparator(sort_key, sort_order);\n        this.sort();\n    }\n});\n\nvar FolderContainer = Backbone.Model.extend({\n    defaults: {\n        folder: new Folder(),\n        urlRoot: `${Galaxy.root}api/folders/`,\n        id: \"unknown\"\n    },\n    parse: function(obj) {\n        // empty the collection\n        this.get(\"folder\").reset();\n        // response is not a simple array, it contains metadata\n        // this will update the inner collection\n        for (var i = 0; i < obj.folder_contents.length; i++) {\n            if (obj.folder_contents[i].type === \"folder\") {\n                var folder_item = new FolderAsModel(obj.folder_contents[i]);\n                this.get(\"folder\").add(folder_item);\n            } else if (obj.folder_contents[i].type === \"file\") {\n                var file_item = new Ldda(obj.folder_contents[i]);\n                this.get(\"folder\").add(file_item);\n            } else {\n                Galaxy.emit.error(\"Unknown folder item type encountered while parsing response.\");\n            }\n        }\n        return obj;\n    }\n});\n\n// ============================================================================\n// HISTORY RELATED MODELS\n// TODO UNITE\n\nvar HistoryItem = Backbone.Model.extend({\n    urlRoot: `${Galaxy.root}api/histories/`\n});\n\nvar HistoryContents = Backbone.Collection.extend({\n    urlRoot: `${Galaxy.root}api/histories/`,\n    initialize: function(options) {\n        this.id = options.id;\n    },\n    url: function() {\n        return `${this.urlRoot + this.id}/contents`;\n    },\n    model: HistoryItem\n});\n\nvar GalaxyHistory = Backbone.Model.extend({\n    urlRoot: `${Galaxy.root}api/histories/`\n});\n\nvar GalaxyHistories = Backbone.Collection.extend({\n    url: `${Galaxy.root}api/histories`,\n    model: GalaxyHistory\n});\n\n// ============================================================================\n// JSTREE MODEL\n/** Represents folder structure parsable by the jstree component.\n     *\n     */\n\nvar Jstree = Backbone.Model.extend({\n    urlRoot: `${Galaxy.root}api/remote_files`\n});\n\nexport default {\n    Library: Library,\n    Libraries: Libraries,\n    Item: Ldda,\n    Ldda: Ldda,\n    FolderAsModel: FolderAsModel,\n    Folder: Folder,\n    FolderContainer: FolderContainer,\n    HistoryItem: HistoryItem,\n    HistoryContents: HistoryContents,\n    GalaxyHistory: GalaxyHistory,\n    GalaxyHistories: GalaxyHistories,\n    Jstree: Jstree\n};\n"]}