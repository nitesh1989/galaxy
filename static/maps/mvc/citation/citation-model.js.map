{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["parseBibtex","_","extend","ENTRY_TYPES_","online","data","Citation","Backbone","Model","_baseMvc2","default","LoggableMixin","_logNamespace","defaults","content","initialize","parsed","this","attributes","err","errors","length","reduce","all","current","log","entry","first","entries","logNamespace","Fields","key","rawFields","value","lowerKey","toLowerCase","_fields","entryType","EntryType","undefined","fields","BaseCitationCollection","Collection","urlRoot","Galaxy","root","partial","model","HistoryCitationCollection","url","history_id","ToolCitationCollection"],"mappings":"0OAAYA,yKAMZC,EAAEC,OAAOF,EAAYG,cACjBC,OAPQJ,IAQRK,KAAM,MAGV,IAMIC,EAAWC,SAASC,MAAMN,OAAOO,EAAAC,QAAQC,eAAeT,QACxDU,cAPe,WASfC,UACIC,QAAS,IAGbC,WAAY,WACR,IAAIC,EACJ,IAEIA,EAAShB,EAAYiB,KAAKC,WAAWJ,SACvC,MAAOK,GACL,OAGJ,GAAIH,EAAOI,OAAOC,OAAQ,CAEtB,IAAID,EAASJ,EAAOI,OAAOE,OAAO,SAACC,EAAKC,GAAN,OAAqBD,EAArB,KAA6BC,IAE/DP,KAAKQ,IAAL,yBAAkCL,GAKtC,GAlCJf,KAAAA,WAFJY,KAAAS,MAAAzB,EAAA0B,MAAAX,EAAAY,SAoCYX,KAAKS,MAAO,CA/BpBG,IAAAA,EAAeZ,KAAnBS,MAAAI,OACA,IAAA,IAAAC,KAAAC,EAAA,CACA,IAAAC,EAAAD,EAAAD,GAiCoBG,EAAWH,EAAII,cACnBlB,KAAKmB,QAAQF,GAAYD,KAIrCI,UAAW,WA/BXxB,OAAAA,KAAUa,MAAAT,KAAAS,MAAAY,eAAAC,GAAAC,OAHqD,WAsC3D,OAAOvB,KAAKmB,WAzBRK,EAAAlC,SAAAmC,WAAAxC,OAAAO,EAAAC,QAAAC,eAAAT,QACHU,cApBU,WAuBP+B,QAAAC,OAAAC,KAAA,MACAC,SAAA,EAAkCC,MAAAzC,IAElC0C,EAAAP,EAAkCrB,QAoC1C6B,IAAK,WAjCD,OAAKb,KAAAA,QAAL,cAAAnB,KAAAiC,WAAA,gBAIIC,EAAAV,EAA2BvC,QAEvB+C,IAAA,WACA,OAAAhC,KAAA0B,QAAA,UAAaT,KAAYD,QAAzB,cAEPa,SAAA,eAMDxC,SAAAA,EACH0C,0BAAAA,EAvC8DG,uBAAnEA","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["import * as parseBibtex from \"libs/bibtex\";\nimport baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n/* global Backbone */\n\n_.extend(parseBibtex.ENTRY_TYPES_, {\n    online: 998, // Galaxy MOD: Handle @online entries for preprints.\n    data: 999 // Galaxy MOD: Handle @data citations coming from figshare.\n});\n\nvar logNamespace = \"citation\";\n//==============================================================================\n/** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\nvar Citation = Backbone.Model.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    defaults: {\n        content: \"\"\n    },\n\n    initialize: function() {\n        var parsed;\n        try {\n            // TODO: to model.parse/.validate\n            parsed = parseBibtex(this.attributes.content);\n        } catch (err) {\n            return;\n        }\n        // bibtex returns successfully parsed in .entries and any parsing errors in .errors\n        if (parsed.errors.length) {\n            // the gen. form of these errors seems to be [ line, col, char, error message ]\n            var errors = parsed.errors.reduce((all, current) => `${all}; ${current}`);\n            // throw new Error( 'Error parsing bibtex: ' + errors );\n            this.log(`Error parsing bibtex: ${errors}`);\n        }\n\n        this._fields = {};\n        this.entry = _.first(parsed.entries);\n        if (this.entry) {\n            var rawFields = this.entry.Fields;\n            for (var key in rawFields) {\n                var value = rawFields[key];\n                var lowerKey = key.toLowerCase();\n                this._fields[lowerKey] = value;\n            }\n        }\n    },\n    entryType: function() {\n        return this.entry ? this.entry.EntryType : undefined;\n    },\n    fields: function() {\n        return this._fields;\n    }\n});\n\n//==============================================================================\n/** @class Backbone collection of citations.\n */\nvar BaseCitationCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    /** root api url */\n    urlRoot: `${Galaxy.root}api`,\n    partial: true, // Assume some tools in history/workflow may not be properly annotated yet.\n    model: Citation\n});\n\nvar HistoryCitationCollection = BaseCitationCollection.extend({\n    /** complete api url */\n    url: function() {\n        return `${this.urlRoot}/histories/${this.history_id}/citations`;\n    }\n});\n\nvar ToolCitationCollection = BaseCitationCollection.extend({\n    /** complete api url */\n    url: function() {\n        return `${this.urlRoot}/tools/${this.tool_id}/citations`;\n    },\n    partial: false // If a tool has citations, assume they are complete.\n});\n\n//==============================================================================\n\nexport default {\n    Citation: Citation,\n    HistoryCitationCollection: HistoryCitationCollection,\n    ToolCitationCollection: ToolCitationCollection\n};\n"]}