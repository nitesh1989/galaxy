{"version":3,"sources":["mvc/user/user-custom-builds.js"],"names":["Collection","Backbone","extend","comparator","a","b","get","View","initialize","options","self","this","history_id","Galaxy","currHistoryPanel","model","id","Model","url","root","collection","user","message","_uiMisc2","default","Message","installed_builds","value","empty_text","error_text","cls","selectable","table","setElement","$","text","$el","optional","onchange","$installed","addClass","append","addHeader","appendHeader","listenTo","_renderTable","_renderForm","$form","$help","icon","onclick","delAll","sort","add","undefined","ButtonIcon","initial_type","form","inputs","type","name","destroy","help","test_param","data","label","cases","status","create","tooltip","title","wait","success","response","update","length","err","responseJSON","err_msg","input_id","input_field","field_list","_renderHelp","empty","show","hide","len_type","html","_templateFasta","_templateLen"],"mappings":"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","file":"../../../scripts/mvc/user/user-custom-builds.js","sourcesContent":["/** This class renders the chart configuration form. */\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Form from \"mvc/form/form-view\";\nimport Table from \"mvc/ui/ui-table\";\nvar Collection = Backbone.Collection.extend({\n    comparator: function(a, b) {\n        a = a.get(\"name\");\n        b = b.get(\"name\");\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n});\n\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var history_id = Galaxy.currHistoryPanel && Galaxy.currHistoryPanel.model.id;\n        this.model = new Backbone.Model();\n        this.model.url = `${Galaxy.root}api/histories/${history_id}/custom_builds_metadata`;\n        this.collection = new Collection();\n        this.collection.url = `${Galaxy.root}api/users/${Galaxy.user.id}/custom_builds`;\n        this.message = new Ui.Message({});\n        this.installed_builds = new Ui.Select.View({\n            optional: true,\n            onchange: function() {\n                self.installed_builds.value(null);\n            },\n            empty_text: \"List of available builds:\",\n            error_text: \"No system installed builds available.\"\n        });\n        this.table = new Table.View({ cls: \"grid\", selectable: false });\n        this.table.addHeader(\"Name\");\n        this.table.addHeader(\"Key\");\n        this.table.addHeader(\"Number of chroms/contigs\");\n        this.table.addHeader(\"\");\n        this.table.appendHeader();\n        this.setElement(\n            $(\"<div/>\")\n                .append($(\"<h4/>\").text(\"Current Custom Builds\"))\n                .append(this.table.$el)\n                .append(\n                    (this.$installed = $(\"<div/>\")\n                        .append(\n                            $(\"<h4/>\")\n                                .text(\"System Installed Builds\")\n                                .addClass(\"ui-margin-top\")\n                        )\n                        .append(this.installed_builds.$el))\n                )\n                .append(\n                    $(\"<h4/>\")\n                        .text(\"Add a Custom Build\")\n                        .addClass(\"ui-margin-top\")\n                )\n                .append(\n                    $(\"<span/>\")\n                        .addClass(\"ui-column\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-column-left\")\n                                .append(this.message.$el)\n                                .append((this.$form = $(\"<div/>\").addClass(\"ui-margin-top\")))\n                        )\n                        .append((this.$help = $(\"<div/>\").addClass(\"ui-column-right\")))\n                )\n        );\n        this.listenTo(this.collection, \"add remove reset\", () => {\n            self._renderTable();\n        });\n        this.listenTo(this.model, \"change\", () => {\n            self._renderForm();\n        });\n        this.collection.fetch();\n        this.model.fetch();\n    },\n\n    render: function() {\n        this._renderTable();\n        this._renderForm();\n    },\n\n    _renderTable: function() {\n        var self = this;\n        this.table.delAll();\n        this.collection.sort();\n        this.collection.each(model => {\n            self.table.add(model.get(\"name\"));\n            self.table.add(model.id);\n            self.table.add(model.get(\"count\") !== undefined ? model.get(\"count\") : \"Processing...\");\n            self.table.add(\n                new Ui.ButtonIcon({\n                    icon: \"fa-trash-o\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Delete custom build.\",\n                    onclick: function() {\n                        model.destroy();\n                    }\n                }).$el\n            );\n            self.table.append(model.id);\n        });\n    },\n\n    _renderForm: function() {\n        var self = this;\n        var initial_type = \"fasta\";\n        var form = new Form({\n            inputs: [\n                {\n                    type: \"text\",\n                    name: \"name\",\n                    label: \"Name\",\n                    help: \"Specify a build name e.g. Hamster.\"\n                },\n                {\n                    type: \"text\",\n                    name: \"id\",\n                    label: \"Key\",\n                    help: \"Specify a build key e.g. hamster_v1.\"\n                },\n                {\n                    name: \"len\",\n                    type: \"conditional\",\n                    test_param: {\n                        name: \"type\",\n                        label: \"Definition\",\n                        help: \"Provide the data source.\",\n                        type: \"select\",\n                        value: initial_type,\n                        data: [\n                            {\n                                value: \"fasta\",\n                                label: \"FASTA-file from history\"\n                            },\n                            {\n                                value: \"file\",\n                                label: \"Len-file from disk\"\n                            },\n                            {\n                                value: \"text\",\n                                label: \"Len-file by copy/paste\"\n                            }\n                        ]\n                    },\n                    cases: [\n                        {\n                            value: \"fasta\",\n                            inputs: [\n                                {\n                                    type: \"select\",\n                                    name: \"value\",\n                                    label: \"FASTA-file\",\n                                    data: this.model.get(\"fasta_hdas\")\n                                }\n                            ]\n                        },\n                        {\n                            value: \"file\",\n                            inputs: [\n                                {\n                                    type: \"upload\",\n                                    name: \"value\",\n                                    label: \"Len-file\",\n                                    data: this.model.get(\"len_hdas\")\n                                }\n                            ]\n                        },\n                        {\n                            value: \"text\",\n                            inputs: [\n                                {\n                                    type: \"text\",\n                                    area: true,\n                                    name: \"value\",\n                                    label: \"Edit/Paste\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            buttons: {\n                save: new Ui.Button({\n                    icon: \"fa-save\",\n                    tooltip: \"Create new Build\",\n                    title: \"Save\",\n                    cls: \"btn btn-primary ui-clear-float\",\n                    onclick: function() {\n                        var data = form.data.create();\n                        if (!data.id || !data.name) {\n                            self.message.update({\n                                message: \"All inputs are required.\",\n                                status: \"danger\"\n                            });\n                        } else {\n                            self.collection.create(data, {\n                                wait: true,\n                                success: function(response) {\n                                    if (response.get(\"message\")) {\n                                        self.message.update({\n                                            message: response.get(\"message\"),\n                                            status: \"warning\"\n                                        });\n                                    } else {\n                                        self.message.update({\n                                            message: \"Successfully added a new custom build.\",\n                                            status: \"success\"\n                                        });\n                                    }\n                                },\n                                error: function(response, err) {\n                                    var message = err && err.responseJSON && err.responseJSON.err_msg;\n                                    self.message.update({\n                                        message: message || \"Failed to create custom build.\",\n                                        status: \"danger\"\n                                    });\n                                }\n                            });\n                        }\n                    }\n                })\n            },\n            onchange: function() {\n                var input_id = form.data.match(\"len|type\");\n                if (input_id) {\n                    var input_field = form.field_list[input_id];\n                    self._renderHelp(input_field.value());\n                }\n            }\n        });\n        this.$form.empty().append(form.$el);\n        var installed_builds = this.model.get(\"installed_builds\");\n        if (installed_builds && installed_builds.length) {\n            this.$installed.show();\n            this.installed_builds.update(this.model.get(\"installed_builds\"));\n        } else {\n            this.$installed.hide();\n        }\n        this._renderHelp(initial_type);\n    },\n\n    _renderHelp: function(len_type) {\n        this.$help\n            .empty()\n            .addClass(\"alert alert-info\")\n            .html(len_type == \"fasta\" ? this._templateFasta() : this._templateLen());\n    },\n\n    _templateLen: function() {\n        return (\n            \"<h4>Length Format</h4>\" +\n            \"<p>\" +\n            \"The length format is two-column, separated by whitespace, of the form:\" +\n            \"<pre>chrom/contig   length of chrom/contig</pre>\" +\n            \"</p>\" +\n            \"<p>\" +\n            \"For example, the first few entries of <em>mm9.len</em> are as follows:\" +\n            \"<pre>\" +\n            \"chr1    197195432\\n\" +\n            \"chr2    181748087\\n\" +\n            \"chr3    159599783\\n\" +\n            \"chr4    155630120\\n\" +\n            \"chr5    152537259\" +\n            \"</pre>\" +\n            \"</p>\" +\n            \"<p>Trackster uses this information to populate the select box for chrom/contig, and\" +\n            \"to set the maximum basepair of the track browser. You may either upload a .len file\" +\n            \"of this format (Len File option), or directly enter the information into the box \" +\n            \"(Len Entry option).</p>\"\n        );\n    },\n\n    _templateFasta: function() {\n        return (\n            \"<h4>FASTA format</h4>\" +\n            \"<p>\" +\n            \"This is a multi-fasta file from your current history that provides the genome\" +\n            \"sequences for each chromosome/contig in your build.\" +\n            \"</p>\" +\n            \"<p>\" +\n            \"Here is a snippet from an example multi-fasta file:\" +\n            \"<pre>\" +\n            \">chr1\\n\" +\n            \"ATTATATATAAGACCACAGAGAGAATATTTTGCCCGG...\\n\\n\" +\n            \">chr2\\n\" +\n            \"GGCGGCCGCGGCGATATAGAACTACTCATTATATATA...\\n\\n\" +\n            \"...\" +\n            \"</pre>\" +\n            \"</p>\"\n        );\n    }\n});\n\nexport default {\n    View: View\n};\n"]}