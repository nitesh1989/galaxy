{"version":3,"sources":["mvc/user/user-model.js"],"names":["Backbone","User","Model","extend","_baseMvc2","default","LoggableMixin","_logNamespace","urlRoot","Galaxy","root","defaults","id","username","_localization2","email","total_disk_usage","nice_total_disk_usage","quota_percent","is_admin","initialize","data","this","log","on","model","resp","isAnonymous","get","isAdmin","idOrCurrent","options","CURRENT_ID_STR","userFn","success","newModel","trigger","response","url","prototype","fetch","call","clearSessionStorage","key","sessionStorage","indexOf","removeItem","toString","userInfo","unshift","join","getCurrentUserFromApi","currentUser","loadFromApi","Collection"],"mappings":"sZACYA,qBASRC,EAAOD,EAASE,MAAMC,OAAOC,EAAAC,QAAQC,eAAeH,QAEhDI,cAPW,OAUXC,QAAS,WACL,OAAUC,OAAOC,KAAjB,aAOJC,UACIC,GAAI,KACJC,SAAAA,KAAc,EAAAC,EAAAT,SAAG,kBAAjB,IACAU,MAAO,GACPC,iBAAkB,EAClBC,sBAAuB,GACvBC,cAAe,KACfC,UAAU,GAMdC,WAAY,SAASC,GACjBC,KAAKC,IAAI,mBAAoBF,GA/BzCC,KAAAE,GAAA,SAAA,SAAAC,EAAAC,GACAJ,KAAAC,IAAAD,KAAA,eAAAG,EAAAC,KAmCYJ,KAAKE,GAAG,SAAU,SAASC,EAAOJ,GAhCnCrB,KAAAA,IAASE,KAATF,gBAAsByB,EAAQnB,EAAAA,YAIjCqB,YAAA,WACAnB,OAASc,KAAAM,IAAA,UAoCTC,QAAS,WAhCT,OAAAP,KAAAM,IAAA,aAUIV,YAAAA,SAAeY,EANoBC,GAOnCZ,EAAUW,GAAA7B,EAAA+B,eAGd,IAAAP,EAAAH,KAkCQW,GAFJF,EAAUA,OAEWG,QAnBrB,OAXAH,EAAAG,QAAS,SAAAC,EAAoBd,GAkCzBI,EAAMW,QAAQ,SAAUD,EAAUE,GAhC9BJ,GACJA,EAAYE,EAAZE,IA7BiBP,IAAA7B,EAAA+B,iBAoEjBD,EAAQO,IAAShB,KAAKd,QAAtB,IAAiCP,EAAK+B,gBA/BnChC,EAACE,MAASqC,UAAjBC,MAAAC,KAAAnB,KAAAS,IAKHW,oBA1CwB,WA4ErB,IAAK,IAAIC,KAAOC,eAGoB,IAA5BD,EAAIE,QAAQ,YACZD,eAAeE,WAAWH,GACX,kBAARA,GACPC,eAAeE,WAAWH,IA3BlCI,SAAItB,WACJ,IAAIQ,GAASF,KAAQG,IAAAA,aAKjB,OA6BAZ,KAAKM,IAAI,QAhCboB,EAAAC,QAAA3B,KAAAM,IAAA,OACAG,EAAQG,KAAUZ,KAAAM,IAAA,WAEd,QAAAoB,EAAYE,KAAA,KAAZ,OAMJjD,EAAA+B,eAAIF,UAGJ7B,EAAAkD,sBAAgBjD,SAAAA,GACnB,IAAAkD,EAvEwB,IAAAnD,EAyEzB,OAgCJmD,EAAYC,YAAYpD,EAAK+B,eAAgBD,GAhCzCqB,GAIQpD,EAAAsD,WAAAnD,OAAAC,EAAAC,QAAAC,eAAAH,QACAsB,MAAAxB,EACAO,QAAA,WACIoC,OAAAA,OAAAA,KAAAA,0BAOZ3C,KAAAA","file":"../../../scripts/mvc/user/user-model.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n */\nvar User = Backbone.Model.extend(baseMVC.LoggableMixin).extend(\n    /** @lends User.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** API location for this resource */\n        urlRoot: function() {\n            return `${Galaxy.root}api/users`;\n        },\n\n        /** Model defaults\n     *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n     *      a safer method is if( !user.get( 'email' ) ) -> anon user\n     */\n        defaults: /** @lends User.prototype */ {\n            id: null,\n            username: `(${_l(\"anonymous user\")})`,\n            email: \"\",\n            total_disk_usage: 0,\n            nice_total_disk_usage: \"\",\n            quota_percent: null,\n            is_admin: false\n        },\n\n        /** Set up and bind events\n     *  @param {Object} data Initial model data.\n     */\n        initialize: function(data) {\n            this.log(\"User.initialize:\", data);\n\n            this.on(\"loaded\", function(model, resp) {\n                this.log(`${this} has loaded:`, model, resp);\n            });\n            this.on(\"change\", function(model, data) {\n                this.log(`${this} has changed:`, model, data.changes);\n            });\n        },\n\n        isAnonymous: function() {\n            return !this.get(\"email\");\n        },\n\n        isAdmin: function() {\n            return this.get(\"is_admin\");\n        },\n\n        /** Load a user with the API using an id.\n     *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n     *      (e.g. 'current') and the API will return the current transaction's user data.\n     *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n     *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n     *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n     */\n        loadFromApi: function(idOrCurrent, options) {\n            idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n            options = options || {};\n            var model = this;\n            var userFn = options.success;\n\n            /** @ignore */\n            options.success = (newModel, response) => {\n                model.trigger(\"loaded\", newModel, response);\n                if (userFn) {\n                    userFn(newModel, response);\n                }\n            };\n\n            // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n            if (idOrCurrent === User.CURRENT_ID_STR) {\n                options.url = `${this.urlRoot}/${User.CURRENT_ID_STR}`;\n            }\n            return Backbone.Model.prototype.fetch.call(this, options);\n        },\n\n        /** Clears all data from the sessionStorage.\n     */\n        clearSessionStorage: function() {\n            for (var key in sessionStorage) {\n                //TODO: store these under the user key so we don't have to do this\n                // currently only history\n                if (key.indexOf(\"history:\") === 0) {\n                    sessionStorage.removeItem(key);\n                } else if (key === \"history-panel\") {\n                    sessionStorage.removeItem(key);\n                }\n            }\n        },\n\n        /** string representation */\n        toString: function() {\n            var userInfo = [this.get(\"username\")];\n            if (this.get(\"id\")) {\n                userInfo.unshift(this.get(\"id\"));\n                userInfo.push(this.get(\"email\"));\n            }\n            return `User(${userInfo.join(\":\")})`;\n        }\n    }\n);\n\n// string to send to tell server to return this transaction's user (see api/users.py)\nUser.CURRENT_ID_STR = \"current\";\n\n// class method to load the current user via the api and return that model\nUser.getCurrentUserFromApi = options => {\n    var currentUser = new User();\n    currentUser.loadFromApi(User.CURRENT_ID_STR, options);\n    return currentUser;\n};\n\n// (stub) collection for users (shouldn't be common unless admin UI)\nvar UserCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n    model: User,\n    urlRoot: function() {\n        return `${Galaxy.root}api/users`;\n    }\n    //logger  : console,\n});\n\n//==============================================================================\nexport default {\n    User: User\n};\n"]}