{"version":3,"sources":["mvc/grid/grid-template.js"],"names":["grid","options","tmpl","embedded","this","grid_header","grid_table","info_text","global_actions","show_popup","action","i","target","url_args","label","insert","grid_filters","header","items","length","column","visible","href","key","extra","body","items_length","popupmenu_id","item","encode_id","current_item_id","id","show_item_checkboxes","encoded_id","j","nowrap","column_settings","link","value","jQuery","type","replace","cls","operations","label_id_prefix","num_rows_rendered","footer","use_paging","num_pages","num_page_links","page_link_range","cur_page_num","min_offset","min_page","max_page","max_range","max_offset","page_index","found_global","allow_multiple","operation","global_operation","status","legend","message","advanced_search_display","advanced_search","_","escape","column_key","default_filter_dict","filters","f_key","show_advanced_search_link","standard_search_display","columns","filterable","d_key","grid_column_filter","column_label","temp_column","filter_value","toLowerCase","url","column_filter","is_text","JSON","stringify","filter_element","filter","size","params","slice","seperator","cf","cf_key","cf_arg","categorical_filters","cf_label","sanitize","filter_key","_utils2","default"],"mappings":"4MAKIA,KAAM,SAASC,GACX,IAAIC,EAAO,GASV,OAPGA,EADAD,EAAQE,SACDC,KAAKC,YAAYJ,GAAWG,KAAKE,WAAWL,GAEnDC,qEAA4EE,KAAKC,YAC7EJ,GADJ,uHAEwHG,KAAKE,WACzHL,GAPRA,EAAIC,YACJA,GAAAA,uDAAsBD,EAAAM,UAAtB,UAQCL,GAIGA,WAAAA,SAAAA,GACH,MASG,oNAWRG,YAAAA,SAAaJ,GACT,IAAAC,EAAIA,4BAIJ,GAHAD,EAAKA,WACDC,GAAAA,OAAAA,EAAeD,MAAfC,SAEJD,EAAIA,eAAQO,CACRN,GAAAA,oCACA,IAAAO,EAAIA,EAAaR,eAAQO,QAAR,EACjBC,IACIP,GAGH,oIAGGA,IAAAA,IAAAA,KAAAA,EAAAA,eAAAA,CACH,IAAAQ,EAAAT,EAAAO,eAAAG,GACDT,GAAAA,mDAAgBQ,EAAAE,OAAhB,WAAgBF,EAAAG,SAAhB,8BAAgBH,EAAAI,MAAhB,YAECL,IACDP,GAAQ,UAEZA,GAAID,QASJ,OAPCA,EAAAc,SADGb,GAAQD,EAAQc,QAIpBb,GAAQE,KAAKY,aAAaf,GAG1BC,GAAA,UAOAe,OAAA,SAAIf,GAEJ,IAAAA,EAAA,OAGID,EAAIA,uBACAC,GAAAA,OAGHD,EAAAiB,MAAAC,OAAA,IACDjB,GACH,2IAGDA,GAAK,SAIG,IAAA,IAAAS,KAAAV,EAAImB,QAAa,CACblB,IAAAA,EAAAA,EAAAA,QAAAA,GACHkB,EAFDC,UAGInB,GAAAA,WAAQkB,EAAON,IAAfZ,YACHkB,EAAAE,KACDpB,GAAAA,YAAAA,EAAAA,KAAAA,iCAAAkB,EAAAG,IAAArB,KAAAkB,EAAAN,MAAAZ,OAEPA,GAAAkB,EAAAN,MAEDZ,GAAAA,4BAAAkB,EAAAI,MAAA,gBAQJC,OAHCvB,GA1GU,SAiHPuB,KAAA,SAAIC,GAEJ,IAAAxB,EAAA,GAKC,GAHGD,EAAAiB,MAAAC,SAKJjB,GAAA,qDAKI,IAAA,IAAAS,KAAIgB,EAAAA,MAAAA,CAEJ,IAAAC,EAAA3B,EAAAiB,MAAAP,GACAT,EAAQ0B,EAARC,UAIA3B,GAAAA,OAHID,EAAQ6B,iBAAmBF,EAAKG,KAKpC7B,GAAA,mBAEIA,GAAAA,IAGJD,EAAA+B,uBACA9B,GAAAA,qEAA+B+B,EAA/B,SAA+BA,EAA/B,8CAIQ,IAAA,IAAAC,KAAAjC,EAAIkC,QAAJ,CACA,IAAAf,EAAIA,EAAOe,QAAQD,GACfC,GAAAA,EAAAA,QAAAA,CAFJ,IAAIA,EAAS,GAKbf,EAAAe,SACAA,EAAIC,+BAIJ,IAAAA,EAAYA,EAAAA,cAAZhB,EAAAN,OAGAuB,EAAAD,EAAAC,KACAC,EAAIC,EAAAD,MACAA,EAAAA,EAAQ1B,OAGZ,WAAA2B,OAAAC,KAAAF,KACAA,EAAIP,EAAJU,QAAA,QAAA,MAIIC,IAAAA,EAAAA,GACAA,EAAA,GACIA,EAAAA,eACHX,EAAAA,QAAApB,EAAA,SACD+B,EAAAA,aACH,IAAAL,IAHOK,GAAO,UAMfxC,GAAAA,UAIIA,GAAAA,OAAID,EAAJ,IAGAC,GACI,GAAJD,EAAIA,WAAQ0C,SACRzC,GAAAA,YAAA6B,EAAA7B,YAAAwC,EAAAxC,2BAEPA,GAAAA,kDAAMU,EAAN,WAAMyB,EAAN,6BAAMC,EAAN,OACG,GAAApC,EAAAA,WAAAA,SAEHA,GAAA,WAGRA,GAAAA,YAAA6B,EAAA,YAAAW,EAAA,gBAAAtB,EAAAwB,gBAAAX,EAAA,UAAAA,EAAA,MAAAK,GACO,IADP,iBAGJpC,GAAA,SAFGA,GAAQ,QAMhB2C,EAEI,OAAA3C,GAIA4C,OAAA,SAAI7C,GAEA,IAAAC,EAAA,GAFJ,GAAID,EAAQ8C,YAAc9C,EAAQ+C,UAAY,EAAG,CAO7C,IAAAC,EAAIC,EAAkBD,eACtBE,EAAeA,EAAAA,aACfH,EAAII,EAAJJ,UAGIK,EAAAJ,EAAA,EACAG,EAAAA,EAAaF,EAChBE,EAAA,EAJGC,GAAY,IAQhBD,EAAIE,GAA0BC,GAD9BF,EAAIE,KAKAC,IAEAA,EAFAA,EAAAA,EAAAJ,EACHE,EAAMH,EAAAI,EAcN,IAVGC,EAFAF,GAAAA,EAEAE,EAKAA,IAFJF,EAAAN,GAEqB,EAAAG,MACjBE,GAAYG,GAMhB,IACAtD,EAAQ,GAARA,GAAQ,2BAMRD,EAAIoD,uBACAnD,GAAAA,aAHJA,GAAQ,yDAQRmD,EAASI,IACLvD,GACIA,gIAIP,IAAA,IAAAuD,EAAAJ,EAAAI,EAAAH,EAAA,EAAAG,IALOA,GAAcxD,EAAQkD,aAO9BjD,GAAAA,uDAAAuD,EAAA,KAAAA,EAAA,UAEIvD,GAAAA,yCAAAA,EAAAA,qEAAAuD,EAAAvD,KAAAuD,EAAAvD,cAKJA,EACI8C,IAGP9C,GAAAA,4CAAA8C,EAAA,qEAAAA,EAAA,KAAAA,EAAA,eAED9C,GAAA,UAGIA,GARI,wJAoBC,GAAAD,EAAA+B,qBAAA,CAZL9B,GAeA,8JAOA,IAAA,IAAID,KAAAA,EAAQ0C,YACRe,EAAAA,EAAAf,WAAAhC,IACAgD,iBACHzD,GAAAA,+BAAA0D,EAAA9C,MAAA,mDAKDZ,GAAAA,aAIQA,IAAAA,GAAAA,EACH,IAAAS,KAAAV,EAAA0C,WACJ,GAAA1C,EAAA0C,WAAAhC,GAAAkD,iBAAA,CACD3D,GAAQ,EACX,MAKA,GAAAwD,EAAA,CAbGxD,GAAQ,yBAeZ,IAAAS,KAAAV,EAAA0C,WAAA,CACA,IAAOzC,EAAPD,EAAA0C,WAAAhC,GAzUOiD,EAAAC,mBA6TK3D,GAAAA,kCAA0C0D,EAAUC,iBAApD,KAAyED,EAAU9C,MAAnF,QAiBZZ,GAAI4D,aAWJ,OAPA7D,EAAA8D,SAlVO7D,GAAAA,yBAAAD,EAAA8D,OAAA,cAyVP7D,GAIA8D,QAAA,SAAA/D,GACA,IAAA6D,EAAIG,EAAAA,OAZJ,OAa6B,IAA7B,UAAYC,MAAAA,QAAAA,KACRD,EAAAA,QAdJ,kBAAyBH,EAAzB,8BAA6DK,EAAEC,OAiB/DnE,EAAA+D,SAjBA,6CAsBQhD,aAAA,SAAIqD,GAEJ,IAAAC,EAAYA,EAAAA,oBACZC,EAAAtE,EAAIuE,QAGJC,EAAAA,OACHxE,EAAAiE,kBACJD,EAAA,SAID,IAAAQ,GAAIR,EACAS,IAAAA,IAAAA,KAAAA,EAAAA,QAdA,GAAyB,aAe5BtD,EAAAnB,EAAA0E,QAAAhE,IAfciE,WAA0B,CAiBzC,IAAAP,EAAAjD,EAAAG,IACAiD,EAAAD,EAAAF,GACAQ,EAAAP,EAAAD,GACInE,GAAAA,GAAAA,GAAAA,IAfQ+D,EAA0B,SAkBtCQ,GAA+B,EAK9B,IAAAC,EAAA,QAf8B,SAA3BT,IAiBJS,EAAA,QAMC,IAAAxE,EAAAA,6CAAAwE,EAAA,gDAGDxE,IAAAA,IAAAA,KAAQD,EAAU0E,QAElB,aAjBQvD,EAASnB,EAAQ0E,QAAQhE,IAiBjCiE,aACA1E,GAAAE,KAAA0E,mBAAA7E,EAAAmB,IAKAlB,GAAA,6BAGQA,IACHA,GAAA,iEAILA,GAAAA,2BAXAA,GAAAA,6CAAqD+D,EAArD,kLAmBA,IAAA,IAAAtD,KAAAV,EAAA0E,QAAA,CACA,IAAIL,EAAAA,EAAAA,QAAsBrE,GACJsE,YAAlBA,EAAAA,aACAQ,GAAAA,KAAAA,mBAAJ9E,EAAAmB,IARA,OAHAlB,GAAQ,kBAuBRA,mBAAQ,SAAAD,EAAAmB,GAEJlB,EAAAA,oBAAAA,IACAqE,EAAAtE,EAAAsE,QACAQ,EAAU9E,EAAQ0E,MACdN,EAAIW,EAAAA,IACAC,YAAJ7D,EAAAwD,aACAG,EAAIE,EAAcC,eAIT,IAAAhF,EAAA,OAMbA,GAJS,YAAAkB,EAAAwD,aACJ1E,GAAAA,+CAAA6E,EAAA,UAEL7E,GAAA,oCACAA,EAAAA,QAAAA,CAfAA,GAAAA,8CAAsDmE,EAAtD,aAA6EpE,EAAQkF,IAArF,mBAkBA,IAAAxE,KAAIyE,EAAAA,QAAgBb,CACpB,IAAIa,EAAJnF,EAAmB0E,QAAAhE,GACfsE,EAAAV,EAAAS,EAAAzD,KACA0D,GAfwB,OAAhBA,IAiBRD,EAAAK,UACI7C,EAAkB8C,KAAAC,UAAAN,IAEd/E,GAAAA,4BAAA8E,EAAAzD,IAAA,aAAAyD,EAAAzD,IAAA,YAAA0D,EAAA,OAKR/E,GAAAA,aAAAmE,EAAA,wBAGQ,IAAAe,EAAAb,EAAAF,GACA,GAAAe,EAAA,CAEA,IAAA5C,EAAAD,OAAAC,KAAA4C,GAWZlF,GAxBgB,UAARsC,GAiBI,OAAA4C,IAEHlF,GAAAE,KAAAoF,eAAAnB,EAAAe,IAKD,SAARlF,EAfQ,IAAK,IAAIS,KAAKyE,EAAe,CAkBjC9C,IAAQmD,EAAZL,EAAAzE,GAGQ+E,EAAavE,EACbuE,EAAJC,EAAeC,MAAAjF,GAGfT,GAAAE,KAAAoF,eAAAnB,EAAAoB,IAMPvF,GAAM,UAbH,IAAIoC,EAAQ,GAiBZ,GAAA,YAAAlB,EAAAwD,WAAA,CAEA,IAAAc,GADApD,EAAIuD,EAAAA,MAAJX,eACA/D,OACIuE,EAAA,KACAA,EAAII,IAGJJ,GAAIK,EAIAC,GAAAA,sEAAA3B,EAAA2B,oBAAA3B,EAAA2B,8BAAA1D,EAAA0D,WAAAN,EAAAM,6JACH,CAED9F,GAAAA,aAAAmE,EAAA,wBAGC,IAAAwB,GAAA,EACDA,IAAAA,IAAAA,KAAY5F,EAAZgG,oBAAA5B,GAAA,CAEA,IAAAyB,EAAA7F,EAAAgG,oBAAA5B,GAAA6B,GAGIhG,EAAAA,GACH8F,EAAM,GACH9F,IAAAA,IAAAA,KAAAA,EACH6F,EAAAxE,EACJyE,EAAAF,EAAAvE,GAZOsE,IAiBZ3F,GAAA,OA3hBO2F,GAAA,GAgiBXL,EAAgBjB,EAAAF,KACGyB,EAAAzB,IAAM8B,GAASlB,EAC9B/E,GAAAA,mCAAwC+E,EAAxC,2BAAAiB,EAAA,UAdYhG,GAAAA,mCAA2CmE,EAA3C,sDAA2G0B,EAA3G,iBAAkIC,EAAlI,KAA6IE,EAA7I,cAGRhG,GAAQ,UAKZ,OAHAA,GAAQ,cAOZsF,eAAgB,SAASY,EAAYnB,GAEjC,MAAA,kCADAA,EAAeoB,EAAAC,QAAMH,SAASlB,IAC9B,6CAAiGmB,EAAjG,iBAA4HnB,EAA5H","file":"../../../scripts/mvc/grid/grid-template.js","sourcesContent":["// dependencies\nimport Utils from \"utils/utils\";\n// grid view templates\nexport default {\n    // template\n    grid: function(options) {\n        var tmpl = \"\";\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = `<div class=\"loading-elt-overlay\"></div><table><tr><td width=\"75%\">${this.grid_header(\n                options\n            )}</td><td></td><td></td></tr><tr><td width=\"100%\" id=\"grid-message\" valign=\"top\"></td><td></td><td></td></tr></table>${this.grid_table(\n                options\n            )}`;\n        }\n\n        // add info text\n        if (options.info_text) {\n            tmpl += `<br><div class=\"toolParamHelp\" style=\"clear: both;\">${options.info_text}</div>`;\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    grid_table: function(options) {\n        return (\n            '<form method=\"post\" onsubmit=\"return false;\">' +\n            '<table id=\"grid-table\" class=\"grid\">' +\n            '<thead id=\"grid-table-header\"></thead>' +\n            '<tbody id=\"grid-table-body\"></tbody>' +\n            '<tfoot id=\"grid-table-footer\"></tfoot>' +\n            \"</table>\" +\n            \"</form>\"\n        );\n    },\n\n    // template\n    grid_header: function(options) {\n        var tmpl = '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl += `<h2>${options.title}</h2>`;\n        }\n        if (options.global_actions) {\n            tmpl += '<ul class=\"manage-table-actions\">';\n            var show_popup = options.global_actions.length >= 3;\n            if (show_popup) {\n                tmpl +=\n                    '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                    '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (var i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl += `<li><a class=\"action-button use-target\" target=\"${action.target}\" href=\"${action.url_args}\" onclick=\"return false;\" >${action.label}</a></li>`;\n            }\n            if (show_popup) {\n                tmpl += \"</div>\";\n            }\n            tmpl += \"</ul>\";\n        }\n        if (options.insert) {\n            tmpl += options.insert;\n        }\n\n        // add grid filters\n        tmpl += this.grid_filters(options);\n        tmpl += \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        // start\n        var tmpl = \"<tr>\";\n\n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl += \"<th>\";\n            if (options.items.length > 0) {\n                tmpl +=\n                    '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                    '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl += \"</th>\";\n        }\n\n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl += `<th id=\"${column.key}-header\">`;\n                if (column.href) {\n                    tmpl += `<a href=\"${column.href}\" class=\"sort-link\" sort_key=\"${column.key}\">${column.label}</a>`;\n                } else {\n                    tmpl += column.label;\n                }\n                tmpl += `<span class=\"sort-arrow\">${column.extra}</span></th>`;\n            }\n        }\n\n        // finalize\n        tmpl += \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = \"\";\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n\n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n\n        // create rows\n        for (var i in options.items) {\n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = `grid-${i}-popup`;\n\n            // Tag current\n            tmpl += \"<tr \";\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += \">\";\n\n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += `<td style=\"width: 1.5em;\"><input type=\"checkbox\" name=\"id\" value=\"${encoded_id}\" id=\"${encoded_id}\" class=\"grid-row-select-checkbox\" /></td>`;\n            }\n\n            // Data columns\n            for (var j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = \"\";\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n\n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n\n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n\n                    // unescape value\n                    if (jQuery.type(value) === \"string\") {\n                        value = value.replace(/\\/\\//g, \"/\");\n                    }\n\n                    // Attach popup menu?\n                    var id = \"\";\n                    var cls = \"\";\n                    if (column.attach_popup) {\n                        id = `grid-${i}-popup`;\n                        cls = \"menubutton\";\n                        if (link != \"\") {\n                            cls += \" split\";\n                        }\n                        cls += \" popup\";\n                    }\n\n                    // Check for row wrapping\n                    tmpl += `<td ${nowrap}>`;\n\n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl += `<div id=\"${id}\" class=\"${cls}\" style=\"float: left;\">`;\n                        }\n                        tmpl += `<a class=\"menubutton-label use-target\" target=\"${target}\" href=\"${link}\" onclick=\"return false;\">${value}</a>`;\n                        if (options.operations.length != 0) {\n                            tmpl += \"</div>\";\n                        }\n                    } else {\n                        tmpl += `<div id=\"${id}\" class=\"${cls}\"><label id=\"${column.label_id_prefix}${encoded_id}\" for=\"${encoded_id}\">${value ||\n                            \"\"}</label></div>`;\n                    }\n                    tmpl += \"</td>\";\n                }\n            }\n            tmpl += \"</tr>\";\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n        // create template string\n        var tmpl = \"\";\n\n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links = options.num_page_links;\n            var cur_page_num = options.cur_page_num;\n            var num_pages = options.num_pages;\n\n            // First pass on min page.\n            var page_link_range = num_page_links / 2;\n            var min_page = cur_page_num - page_link_range;\n            var min_offset = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - (cur_page_num - min_page);\n            }\n\n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - (max_page + 1 - cur_page_num);\n            }\n\n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset;\n                if (min_page < 1) {\n                    min_page = 1;\n                }\n            }\n\n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += \"<td></td>\";\n            }\n            tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + \"Page:\";\n\n            if (min_page > 1) {\n                tmpl +=\n                    '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n\n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                if (page_index == options.cur_page_num) {\n                    tmpl += `<span class=\"page-link inactive-link\" id=\"page-link-${page_index}\">${page_index}</span>`;\n                } else {\n                    tmpl += `<span class=\"page-link\" id=\"page-link-${page_index}\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"${page_index}\">${page_index}</a></span>`;\n                }\n            }\n\n            // show last page\n            if (max_page < num_pages) {\n                tmpl += `...<span class=\"page-link\" id=\"page-link-${num_pages}\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"${num_pages}\">${num_pages}</a></span>`;\n            }\n            tmpl += \"</span>\";\n\n            // Show all link\n            tmpl +=\n                '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                \"</td>\" +\n                \"</tr>\";\n        }\n\n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl +=\n                \"<tr>\" +\n                '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                \"<td></td>\" +\n                '<td colspan=\"100\">' +\n                'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n            // configure buttons for operations\n            for (var i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl += `<input type=\"button\" value=\"${operation.label}\" class=\"operation-button action-button\">&nbsp;`;\n                }\n            }\n\n            // finalize template\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n\n        // add global operations\n        if (found_global) {\n            tmpl += \"<tr>\" + '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl += `<a class=\"action-button\" href=\"${operation.global_operation}\">${operation.label}</a>`;\n                }\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // add legend\n        if (options.legend) {\n            tmpl += `<tr><td colspan=\"100\">${options.legend}</td></tr>`;\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    message: function(options) {\n        var status = options.status;\n        if ([\"success\", \"ok\"].indexOf(status) != -1) {\n            status = \"done\";\n        }\n        return `<p><div class=\"${status}message transient-message\">${_.escape(\n            options.message\n        )}</div><div style=\"clear: both\"></div></p>`;\n    },\n\n    // template\n    grid_filters: function(options) {\n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = \"none\";\n        if (options.advanced_search) {\n            advanced_search_display = \"block\";\n        }\n\n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"advanced\") {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = \"block\";\n                }\n                show_advanced_search_link = true;\n            }\n        }\n\n        // hide standard search if advanced is shown\n        var standard_search_display = \"block\";\n        if (advanced_search_display == \"block\") {\n            standard_search_display = \"none\";\n        }\n\n        //\n        // standard search\n        //\n        var tmpl = `<div id=\"standard-search\" style=\"display: ${standard_search_display};\"><table><tr><td style=\"padding: 0;\"><table>`;\n\n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"standard\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize standard search\n        tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n\n        // finalize standard search display\n        tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n        //\n        // advanced search\n        //\n        tmpl += `<div id=\"advanced-search\" style=\"display: ${advanced_search_display}; margin-top: 5px; border: 1px solid #ccc;\"><table><tr><td style=\"text-align: left\" colspan=\"100\"><a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a></td></tr>`;\n\n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"advanced\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize advanced search template\n        tmpl += \"</table>\" + \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    grid_column_filter: function(options, column) {\n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == \"advanced\") {\n            column_label = column_label.toLowerCase();\n        }\n\n        // start\n        var tmpl = \"<tr>\";\n\n        if (column.filterable == \"advanced\") {\n            tmpl += `<td align=\"left\" style=\"padding-left: 10px\">${column_label}:</td>`;\n        }\n        tmpl += '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl += `<form class=\"text-filter-form\" column_key=\"${column_key}\" action=\"${options.url}\" method=\"get\" >`;\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != \"All\") {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify(filter_value);\n                        }\n                        tmpl += `<input type=\"hidden\" id=\"${temp_column.key}\" name=\"f-${temp_column.key}\" value=\"${filter_value}\"/>`;\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl += `<span id=\"${column_key}-filtering-criteria\">`;\n\n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n\n                // single filter value\n                if (type == \"string\") {\n                    if (column_filter != \"All\") {\n                        // append template\n                        tmpl += this.filter_element(column_key, column_filter);\n                    }\n                }\n\n                // multiple filter values\n                if (type == \"array\") {\n                    for (var i in column_filter) {\n                        // get filter\n                        var filter = column_filter[i];\n\n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl += this.filter_element(column_key, filter);\n                    }\n                }\n            }\n\n            // close span\n            tmpl += \"</span>\";\n\n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = \"\";\n            if (column.filterable == \"standard\") {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n\n            // print input field for column\n            tmpl += `<span class=\"search-box\"><input class=\"search-box-input\" id=\"input-${column_key}-filter\" name=\"f-${column_key}\" type=\"text\" placeholder=\"${value}\" size=\"${size}\"/><button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\"><i class=\"fa fa-search\"></i></button></span></form>`;\n        } else {\n            // filter criteria\n            tmpl += `<span id=\"${column_key}-filtering-criteria\">`;\n\n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n\n                // each filter will have only a single argument, so get that single argument\n                var cf_key = \"\";\n                var cf_arg = \"\";\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n\n                // add seperator\n                if (seperator) {\n                    tmpl += \" | \";\n                }\n                seperator = true;\n\n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl += `<span class=\"categorical-filter ${column_key}-filter current-filter\">${cf_label}</span>`;\n                } else {\n                    tmpl += `<span class=\"categorical-filter ${column_key}-filter\"><a href=\"javascript:void(0);\" filter_key=\"${cf_key}\" filter_val=\"${cf_arg}\">${cf_label}</a></span>`;\n                }\n            }\n            tmpl += \"</span>\";\n        }\n        tmpl += \"</td>\" + \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return `<span class=\"text-filter-val\">${filter_value}<a href=\"javascript:void(0);\" filter_key=\"${filter_key}\" filter_val=\"${filter_value}\"><i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/></a></span>`;\n    }\n};\n"]}