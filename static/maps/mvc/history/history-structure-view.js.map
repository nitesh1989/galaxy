{"version":3,"sources":["mvc/history/history-structure-view.js"],"names":["window","JobDAG","_jobDag2","default","HistoryStructureComponent","Backbone","View","extend","_baseMvc2","LoggableMixin","_logNamespace","className","_INITIAL_ZOOM_LEVEL","_MIN_ZOOM_LEVEL","_LINK_ID_SEP","_VERTEX_NAME_DATA_KEY","JobItemClass","_jobLi2","JobListItemView","ContentItemClass","_datasetLi2","DatasetListItemView","initialize","attributes","this","log","component","zoomLevel","layout","_createLayout","layoutOptions","view","eachVertex","vertex","data","job","type","li","_createJobListItem","_liMap","_createContentListItem","debug","_createVertexItems","jobData","outputModels","map","get","model","contents","output","type_id","reset","outputCollection","historyId","id","tool","listenTo","renderGraph","foldout","content","linkWidth","jobHeight","jobSpacing","linkAdjX","values","vertices","_","options","nodeMap","layoutDefaults","linkSpacing","height","jobWidth","v","j","name","x","y","node","edges","e","link","source","defaults","render","$el","html","links","appendTo","$graph","_render","_updateLayout","join","svg","width","renderSVG","position","left","is","delay","linkHeight","size","each","jobId","x1","y1","linkAdjY","x2","target","forEach","stringify","d3","select","append","attr","connections","unhighlightConnect","d","selectAll","on","addClass","highlightConnect","classed","_connectionPath","controlY","events","y2","highlightConnected","highlight","mouseover .graph > .list-item","ev","jobClassFn","prototype","mouseout  .graph > .list-item","currentTarget","$hoverTarget","jobElement","undefined","ancestorLi","jQuery","removeClass","connectionClass","descendantId","edge","ancestorId","Math","$","toString","eachEdge","descendantLi","call","zoom","VerticalHistoryStructureComponent","min","max","level","clone","nodeId","CURVE_Y","controlX","JSON","HistoryStructureView","_layoutToComponentClass","horizontal","vertical","_DEFAULT_LAYOUT","_createDAG","tools","excludeSetMetadata","excludeErroredJobs","_createComponents","contains","keys","structure","weakComponentGraphArray","_processTools","componentViews","_processJobs","jobs","ComponentClass","historyContents","toJSON","dag","$components","changeLayout","_createComponent","componentGraph","Error"],"mappings":"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","file":"../../../scripts/mvc/history/history-structure-view.js","sourcesContent":["import JobDAG from \"mvc/history/job-dag\";\nimport JOB from \"mvc/job/job-model\";\nimport JOB_LI from \"mvc/job/job-li\";\nimport DATASET_LI from \"mvc/dataset/dataset-li\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"libs/d3\";\n\nvar logNamespace = \"history\";\n// ============================================================================\n/*\nTODO:\n    disruptive:\n        handle collections\n        retain contents to job relationships (out/input name)\n\n    display when *only* copied datasets\n        need to change when/how joblessVertices are created\n\n    components should be full height containers that scroll individually\n\n    use history contents views for job outputCollection, not vanilla datasets\n         need hid\n\n    show datasets when job not expanded\n        make them external to the job display\n    connect jobs by dataset\n        which datasets from job X are which inputs in job Y?\n\n    make job data human readable (needs tool data)\n        show only tool.inputs with labels (w/ job.params as values)\n        input datasets are special\n            they don't appear in job.params\n            have to connect to datasets in the dag\n                connect job.inputs to any tool.inputs by tool.input.name (in params)\n\nAPI: seems like this could be handled there - duplicating the input data in the proper param space\n\n    collections\n\n    use cases:\n        operations by thread:\n            copy to new history\n            rerun\n            to workflow\n        operations by branch (all descendants):\n            copy to new history\n            rerun\n            to workflow\n        signal to noise:\n            collapse/expand branch\n            hide jobs\n            visually isolate branch (hide other jobs) of thread\n            zoom (somehow)\n\n            layout changes:\n                move branch to new column in component\n                    complicated\n                pyramid\n                circular\n                    sources on inner radius\n            expansion in vertical:\n                obscures relations due to height\n                    could move details to side panel\n                difficult to compare two+ jobs/datasets when at different points in the topo\n\n    (other) controls:\n        (optionally) filter all deleted\n        (optionally) filter all hidden\n        //(optionally) filter __SET_METADATA__\n        //(optionally) filter error'd jobs\n        help and explanation\n        filtering/searching of jobs\n\n    challenges:\n        difficult to scale dom (for zoomout)\n            possible to use css transforms?\n                transform svg and dom elements\n                it is possible to use css transforms on svg nodes\n                use transform-origin to select origin to top left\n        on larger histories the svg section may become extremely large due to distance from output to input\n\n    how-to:\n        descendant ids: _.keys( component.depth/breadthFirstSearchTree( start ).vertices )\n\n    in-panel view of anc desc\n\n\n*/\n// ============================================================================\n/**\n *\n */\nwindow.JobDAG = JobDAG;\nvar HistoryStructureComponent = Backbone.View.extend(BASE_MVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    className: \"history-structure-component\",\n\n    _INITIAL_ZOOM_LEVEL: 1.0,\n    _MIN_ZOOM_LEVEL: 0.25,\n    _LINK_ID_SEP: \"-to-\",\n    _VERTEX_NAME_DATA_KEY: \"vertex-name\",\n\n    JobItemClass: JOB_LI.JobListItemView,\n    ContentItemClass: DATASET_LI.DatasetListItemView,\n\n    initialize: function(attributes) {\n        this.log(`${this}(HistoryStructureComponent).initialize:`, attributes);\n        this.component = attributes.component;\n\n        this._liMap = {};\n        this._createVertexItems();\n        this.zoomLevel = attributes.zoomLevel || this._INITIAL_ZOOM_LEVEL;\n\n        this.layout = this._createLayout(attributes.layoutOptions);\n    },\n\n    _createVertexItems: function() {\n        var view = this;\n        view.component.eachVertex(vertex => {\n            //TODO: hack\n            var type = vertex.data.job ? \"job\" : \"copy\";\n\n            var li;\n            if (type === \"job\") {\n                li = view._createJobListItem(vertex);\n            } else if (type === \"copy\") {\n                li = view._createContentListItem(vertex);\n            }\n            view._liMap[vertex.name] = li;\n        });\n        view.debug(\"_liMap:\", view._liMap);\n    },\n\n    _createJobListItem: function(vertex) {\n        this.debug(\"_createJobListItem:\", vertex);\n        var view = this;\n        var jobData = vertex.data;\n        var job = new JOB.Job(jobData.job);\n\n        // get the models of the outputs for this job from the history\n        var outputModels = _.map(job.get(\"outputs\"), (\n            output //note: output is { src: 'hda/dataset_collection', id: <some id> }\n        ) =>\n            // job output doesn't *quite* match up to normal typeId\n            view.model.contents.get(output.type_id)\n        );\n        // set the collection (HistoryContents) for the job to that json (setting historyId for proper ajax urls)\n        job.outputCollection.reset(outputModels);\n        job.outputCollection.historyId = view.model.id;\n        //this.debug( job.outputCollection );\n\n        // create the bbone view for the job (to be positioned later accrd. to the layout) and cache\n        var li = new view.JobItemClass({\n            model: job,\n            tool: jobData.tool,\n            jobData: jobData\n        });\n        view.listenTo(li, \"expanding expanded collapsing collapsed\", view.renderGraph);\n        view.listenTo(li.foldout, \"view:expanding view:expanded view:collapsing view:collapsed\", view.renderGraph);\n        return li;\n    },\n\n    _createContentListItem: function(vertex) {\n        this.debug(\"_createContentListItem:\", vertex);\n        var view = this;\n        var content = vertex.data;\n        content = view.model.contents.get(content.type_id);\n        var li = new view.ContentItemClass({ model: content });\n        view.listenTo(li, \"expanding expanded collapsing collapsed\", view.renderGraph);\n        return li;\n    },\n\n    layoutDefaults: {\n        linkSpacing: 16,\n        linkWidth: 0,\n        linkHeight: 0,\n        jobWidth: 300,\n        jobHeight: 300,\n        jobSpacing: 12,\n        linkAdjX: 4,\n        linkAdjY: 0\n    },\n\n    _createLayout: function(options) {\n        options = _.defaults(_.clone(options || {}), this.layoutDefaults);\n        var view = this;\n        var vertices = _.values(view.component.vertices);\n\n        var layout = _.extend(options, {\n            nodeMap: {},\n            links: [],\n            svg: { width: 0, height: 0 }\n        });\n\n        vertices.forEach((v, j) => {\n            var node = { name: v.name, x: 0, y: 0 };\n            layout.nodeMap[v.name] = node;\n        });\n\n        view.component.edges(e => {\n            var link = {\n                source: e.source,\n                target: e.target\n            };\n            layout.links.push(link);\n        });\n        //this.debug( JSON.stringify( layout, null, '  ' ) );\n        return layout;\n    },\n\n    render: function(options) {\n        this.debug(`${this}.render:`, options);\n        var view = this;\n        view.$el.html(\n            [\n                \"<header></header>\",\n                '<nav class=\"controls\"></nav>',\n                '<figure class=\"graph\"></figure>',\n                \"<footer></footer>\"\n            ].join(\"\")\n        );\n\n        var $graph = view.$graph();\n        view.component.eachVertex(vertex => {\n            view._liMap[vertex.name]\n                .render(0)\n                .$el.appendTo($graph)\n                // store the name in the DOM and cache by that name\n                .data(view._VERTEX_NAME_DATA_KEY, vertex.name);\n        });\n        view.renderGraph();\n        return this;\n    },\n\n    $graph: function() {\n        return this.$(\".graph\");\n    },\n\n    renderGraph: function(options) {\n        this.debug(`${this}.renderGraph:`, options);\n        var view = this;\n\n        function _render() {\n            view._updateLayout();\n            // set up the display containers\n            view\n                .$graph()\n                // use css3 transform to scale component graph\n                .css(\"transform\", [\"scale(\", view.zoomLevel, \",\", view.zoomLevel, \")\"].join(\"\"))\n                .width(view.layout.svg.width)\n                .height(view.layout.svg.height);\n            view.renderSVG();\n\n            // position the job views accrd. to the layout\n            view.component.eachVertex(v => {\n                //TODO:?? liMap needed - can't we attach to vertex?\n                var li = view._liMap[v.name];\n\n                var position = view.layout.nodeMap[v.name];\n                //this.debug( position );\n                li.$el.css({ top: position.y, left: position.x });\n            });\n        }\n        //TODO: hack - li's invisible in updateLayout without this delay\n        if (!this.$el.is(\":visible\")) {\n            _.delay(_render, 0);\n        } else {\n            _render();\n        }\n        return this;\n    },\n\n    _updateLayout: function() {\n        this.debug(`${this}._updateLayout:`);\n        var view = this;\n        var layout = view.layout;\n\n        layout.linkHeight = layout.linkSpacing * _.size(layout.nodeMap);\n        layout.svg.height = layout.linkHeight + layout.jobHeight;\n\n        // reset for later max comparison\n        layout.svg.width = 0;\n\n        //TODO:?? can't we just alter the component v and e's directly?\n        // layout the job views putting jobSpacing btwn each\n        var x = 0;\n\n        var y = layout.linkHeight;\n        _.each(layout.nodeMap, (node, jobId) => {\n            //this.debug( node, jobId );\n            node.x = x;\n            node.y = y;\n            x += layout.jobWidth + layout.jobSpacing;\n        });\n        layout.svg.width = layout.linkWidth = Math.max(layout.svg.width, x);\n\n        // layout the links - connecting each job by it's main coords (currently)\n        //TODO: somehow adjust the svg height based on the largest distance the longest connection needs\n        layout.links.forEach(link => {\n            var source = layout.nodeMap[link.source];\n            var target = layout.nodeMap[link.target];\n            link.x1 = source.x + layout.linkAdjX;\n            link.y1 = source.y + layout.linkAdjY;\n            link.x2 = target.x + layout.linkAdjX;\n            link.y2 = target.y + layout.linkAdjY;\n        });\n\n        this.debug(JSON.stringify(layout, null, \"  \"));\n        return this.layout;\n    },\n\n    renderSVG: function() {\n        this.debug(`${this}.renderSVG:`);\n        var view = this;\n        var layout = view.layout;\n\n        var svg = d3.select(this.$graph().get(0)).select(\"svg\");\n        if (svg.empty()) {\n            svg = d3.select(this.$graph().get(0)).append(\"svg\");\n        }\n\n        svg.attr(\"width\", layout.svg.width).attr(\"height\", layout.svg.height);\n\n        function highlightConnect(d) {\n            d3.select(this).classed(\"highlighted\", true);\n            view._liMap[d.source].$el.addClass(\"highlighted\");\n            view._liMap[d.target].$el.addClass(\"highlighted\");\n        }\n\n        function unhighlightConnect(d) {\n            d3.select(this).classed(\"highlighted\", false);\n            view._liMap[d.source].$el.removeClass(\"highlighted\");\n            view._liMap[d.target].$el.removeClass(\"highlighted\");\n        }\n\n        var connections = svg.selectAll(\".connection\").data(layout.links);\n\n        connections\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"connection\")\n            .attr(\"id\", d => [d.source, d.target].join(view._LINK_ID_SEP))\n            .on(\"mouseover\", highlightConnect)\n            .on(\"mouseout\", unhighlightConnect);\n\n        connections.attr(\"d\", d => view._connectionPath(d));\n\n        return svg.node();\n    },\n\n    _connectionPath: function(d) {\n        var CURVE_X = 0;\n\n        var controlY = (d.x2 - d.x1) / this.layout.svg.width * this.layout.linkHeight;\n\n        return [\n            \"M\",\n            d.x1,\n            \",\",\n            d.y1,\n            \" \",\n            \"C\",\n            d.x1 + CURVE_X,\n            \",\",\n            d.y1 - controlY,\n            \" \",\n            d.x2 - CURVE_X,\n            \",\",\n            d.y2 - controlY,\n            \" \",\n            d.x2,\n            \",\",\n            d.y2\n        ].join(\"\");\n    },\n\n    events: {\n        \"mouseover .graph > .list-item\": function(ev) {\n            this.highlightConnected(ev.currentTarget, true);\n        },\n        \"mouseout  .graph > .list-item\": function(ev) {\n            this.highlightConnected(ev.currentTarget, false);\n        }\n    },\n\n    highlightConnected: function(jobElement, highlight) {\n        this.debug(\"highlightConnected\", jobElement, highlight);\n        highlight = highlight !== undefined ? highlight : true;\n\n        var view = this;\n        var component = view.component;\n\n        var jobClassFn = highlight ? jQuery.prototype.addClass : jQuery.prototype.removeClass;\n\n        var connectionClass = highlight ? \"connection highlighted\" : \"connection\";\n\n        //console.debug( 'mouseover', this );\n        var $hoverTarget = jobClassFn.call($(jobElement), \"highlighted\");\n\n        var id = $hoverTarget.data(view._VERTEX_NAME_DATA_KEY);\n\n        // immed. ancestors\n        component.edges({ target: id }).forEach(edge => {\n            var ancestorId = edge.source;\n            var ancestorLi = view._liMap[ancestorId];\n            //view.debug( '\\t ancestor:', ancestorId, ancestorLi );\n            jobClassFn.call(ancestorLi.$el, \"highlighted\");\n            view.$(`#${ancestorId}${view._LINK_ID_SEP}${id}`).attr(\"class\", connectionClass);\n        });\n        // descendants\n        component.vertices[id].eachEdge(edge => {\n            var descendantId = edge.target;\n            var descendantLi = view._liMap[descendantId];\n            //view.debug( '\\t descendant:', descendantId, descendantLi );\n            jobClassFn.call(descendantLi.$el, \"highlighted\");\n            view.$(`#${id}${view._LINK_ID_SEP}${descendantId}`).attr(\"class\", connectionClass);\n        });\n    },\n\n    zoom: function(level) {\n        this.zoomLevel = Math.min(1.0, Math.max(this._MIN_ZOOM_LEVEL, level));\n        return this.renderGraph();\n    },\n\n    toString: function() {\n        return `HistoryStructureComponent(${this.model.id})`;\n    }\n});\n\n// ============================================================================\n/**\n *\n */\nvar VerticalHistoryStructureComponent = HistoryStructureComponent.extend({\n    //logger : console,\n\n    className: `${HistoryStructureComponent.prototype.className} vertical`,\n\n    layoutDefaults: _.extend(_.clone(HistoryStructureComponent.prototype.layoutDefaults), {\n        linkAdjX: 0,\n        linkAdjY: 4\n    }),\n\n    //TODO: how can we use the dom height of the job li's - they're not visible when this is called?\n    _updateLayout: function() {\n        this.debug(`${this}._updateLayout:`);\n        var view = this;\n        var layout = view.layout;\n        //this.info( this.cid, '_updateLayout' )\n\n        layout.linkWidth = layout.linkSpacing * _.size(layout.nodeMap);\n        layout.svg.width = layout.linkWidth + layout.jobWidth;\n\n        // reset height - we'll get the max Y below to assign to it\n        layout.svg.height = 0;\n\n        //TODO:?? can't we just alter the component v and e's directly?\n        var x = layout.linkWidth;\n\n        var y = 0;\n        _.each(layout.nodeMap, (node, nodeId) => {\n            node.x = x;\n            node.y = y;\n            var li = view._liMap[nodeId];\n            y += li.$el.height() + layout.jobSpacing;\n        });\n        layout.linkHeight = layout.svg.height = Math.max(layout.svg.height, y);\n\n        // layout the links - connecting each job by it's main coords (currently)\n        layout.links.forEach(link => {\n            var source = layout.nodeMap[link.source];\n            var target = layout.nodeMap[link.target];\n            link.x1 = source.x + layout.linkAdjX;\n            link.y1 = source.y + layout.linkAdjY;\n            link.x2 = target.x + layout.linkAdjX;\n            link.y2 = target.y + layout.linkAdjY;\n            //view.debug( 'link:', link.x1, link.y1, link.x2, link.y2, link );\n        });\n\n        this.debug(JSON.stringify(layout, null, \"  \"));\n        return layout;\n    },\n\n    _connectionPath: function(d) {\n        var CURVE_Y = 0;\n\n        var controlX = (d.y2 - d.y1) / this.layout.svg.height * this.layout.linkWidth;\n\n        return [\n            \"M\",\n            d.x1,\n            \",\",\n            d.y1,\n            \" \",\n            \"C\",\n            d.x1 - controlX,\n            \",\",\n            d.y1 + CURVE_Y,\n            \" \",\n            d.x2 - controlX,\n            \",\",\n            d.y2 - CURVE_Y,\n            \" \",\n            d.x2,\n            \",\",\n            d.y2\n        ].join(\"\");\n    },\n\n    toString: function() {\n        return `VerticalHistoryStructureComponent(${this.model.id})`;\n    }\n});\n\n// ============================================================================\n/**\n *\n */\nvar HistoryStructureView = Backbone.View.extend(BASE_MVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    className: \"history-structure\",\n\n    _layoutToComponentClass: {\n        horizontal: HistoryStructureComponent,\n        vertical: VerticalHistoryStructureComponent\n    },\n    //_DEFAULT_LAYOUT : 'horizontal',\n    _DEFAULT_LAYOUT: \"vertical\",\n\n    initialize: function(attributes) {\n        this.layout = _.contains(attributes.layout, _.keys(this._layoutToComponentClass))\n            ? attributes.layout\n            : this._DEFAULT_LAYOUT;\n        this.log(`${this}(HistoryStructureView).initialize:`, attributes, this.model);\n        //TODO:?? to model - maybe glom jobs onto model in order to persist\n        // cache jobs since we need to re-create the DAG if settings change\n        this._processTools(attributes.tools);\n        this._processJobs(attributes.jobs);\n        this._createDAG();\n    },\n\n    _processTools: function(tools) {\n        this.tools = tools || {};\n        return this.tools;\n    },\n\n    _processJobs: function(jobs) {\n        this.jobs = jobs || [];\n        return this.jobs;\n    },\n\n    _createDAG: function() {\n        this.dag = new JobDAG({\n            historyContents: this.model.contents.toJSON(),\n            tools: this.tools,\n            jobs: this.jobs,\n            excludeSetMetadata: true,\n            excludeErroredJobs: true\n        });\n        this.debug(`${this}.dag:`, this.dag);\n        this._createComponents();\n    },\n\n    _createComponents: function() {\n        this.log(`${this}._createComponents`);\n        var structure = this;\n\n        structure.componentViews = structure.dag\n            .weakComponentGraphArray()\n            .map(componentGraph => structure._createComponent(componentGraph));\n        return structure.componentViews;\n    },\n\n    _createComponent: function(component) {\n        this.log(`${this}._createComponent:`, component);\n        var ComponentClass = this._layoutToComponentClass[this.layout];\n        return new ComponentClass({\n            model: this.model,\n            component: component\n        });\n    },\n\n    render: function(options) {\n        this.log(`${this}.render:`, options);\n        var structure = this;\n\n        structure.$el\n            .addClass(\"clear\")\n            .html(['<div class=\"controls\"></div>', '<div class=\"components\"></div>'].join(\"\"));\n\n        structure.componentViews.forEach(component => {\n            component.render().$el.appendTo(structure.$components());\n        });\n        return structure;\n    },\n\n    $components: function() {\n        return this.$(\".components\");\n    },\n\n    changeLayout: function(layout) {\n        if (!(layout in this._layoutToComponentClass)) {\n            throw new Error(`${this}: unknown layout: ${layout}`);\n        }\n        this.layout = layout;\n        this._createComponents();\n        return this.render();\n    },\n\n    toString: function() {\n        return `HistoryStructureView(${this.model.id})`;\n    }\n});\n\n// ============================================================================\nexport default HistoryStructureView;\n"]}