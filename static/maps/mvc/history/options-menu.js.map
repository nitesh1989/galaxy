{"version":3,"sources":["mvc/history/options-menu.js"],"names":["buildMenu","menuOption","confirm","urlRoot","isAnon","purgeAllowed","purge","href","create","options","target","menu","func","$button","galaxy_main","location","html","_localization2","default","header","Galaxy","currHistoryPanel","createNewHistory","anon","model","done","loadCurrentHistory","_delete","router","push","id","collapseAll","$","post","root","user_action","url","each","webhooks_menu","_webhooks2","add","async","webhooks","models","index","webhook","activate","config","title","unshift","merge","undefined","anonymous","_popupMenu2"],"mappings":"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","file":"../../../scripts/mvc/history/options-menu.js","sourcesContent":["import PopupMenu from \"mvc/ui/popup-menu\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport Webhooks from \"mvc/webhooks\";\n\n// ============================================================================\nvar menu = [\n    {\n        html: _l(\"History Lists\"),\n        header: true\n    },\n    {\n        html: _l(\"Saved Histories\"),\n        href: \"histories/list\",\n        target: \"_top\"\n    },\n    {\n        html: _l(\"Histories Shared with Me\"),\n        href: \"histories/list_shared\",\n        target: \"_top\"\n    },\n    {\n        html: _l(\"Current History\"),\n        header: true,\n        anon: true\n    },\n    {\n        html: _l(\"Create New\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                Galaxy.currHistoryPanel.createNewHistory();\n            }\n        }\n    },\n    {\n        html: _l(\"Copy History\"),\n        func: function() {\n            historyCopyDialog(Galaxy.currHistoryPanel.model).done(() => {\n                Galaxy.currHistoryPanel.loadCurrentHistory();\n            });\n        }\n    },\n    {\n        html: _l(\"Share or Publish\"),\n        href: \"history/sharing\"\n    },\n    {\n        html: _l(\"Show Structure\"),\n        href: \"history/display_structured\",\n        anon: true\n    },\n    {\n        html: _l(\"Extract Workflow\"),\n        href: \"workflow/build_from_current_history\"\n    },\n    {\n        html: _l(\"Delete\"),\n        anon: true,\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel && confirm(_l(\"Really delete the current history?\"))) {\n                Galaxy.currHistoryPanel.model._delete().done(() => {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        }\n    },\n    {\n        html: _l(\"Delete Permanently\"),\n        purge: true,\n        anon: true,\n        func: function() {\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(_l(\"Really delete the current history permanently? This cannot be undone.\"))\n            ) {\n                Galaxy.currHistoryPanel.model.purge().done(() => {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        }\n    },\n\n    {\n        html: _l(\"Dataset Actions\"),\n        header: true,\n        anon: true\n    },\n    {\n        html: _l(\"Copy Datasets\"),\n        href: \"dataset/copy_datasets\"\n    },\n    {\n        html: _l(\"Dataset Security\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel && Galaxy.router) {\n                Galaxy.router.push(`/histories/permissions?id=${Galaxy.currHistoryPanel.model.id}`);\n            }\n        }\n    },\n    {\n        html: _l(\"Resume Paused Jobs\"),\n        href: \"history/resume_paused_jobs?current=True\",\n        anon: true\n    },\n    {\n        html: _l(\"Collapse Expanded Datasets\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                Galaxy.currHistoryPanel.collapseAll();\n            }\n        }\n    },\n    {\n        html: _l(\"Unhide Hidden Datasets\"),\n        anon: true,\n        func: function() {\n            // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n            if (Galaxy && Galaxy.currHistoryPanel && confirm(_l(\"Really unhide all hidden datasets?\"))) {\n                $.post(`${Galaxy.root}history/adjust_hidden`, { user_action: \"unhide\" }, () => {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        }\n    },\n    {\n        html: _l(\"Delete Hidden Datasets\"),\n        anon: true,\n        func: function() {\n            // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n            if (Galaxy && Galaxy.currHistoryPanel && confirm(_l(\"Really delete all hidden datasets?\"))) {\n                $.post(`${Galaxy.root}history/adjust_hidden`, { user_action: \"delete\" }, () => {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        }\n    },\n    {\n        html: _l(\"Purge Deleted Datasets\"),\n        confirm: _l(\"Really delete all deleted datasets permanently? This cannot be undone.\"),\n        href: \"history/purge_deleted_datasets\",\n        purge: true,\n        anon: true\n    },\n\n    {\n        html: _l(\"Downloads\"),\n        header: true\n    },\n    {\n        html: _l(\"Export Tool Citations\"),\n        href: \"history/citations\",\n        anon: true\n    },\n    {\n        html: _l(\"Export History to File\"),\n        href: \"history/export_archive?preview=True\",\n        anon: true\n    },\n\n    {\n        html: _l(\"Other Actions\"),\n        header: true\n    },\n    {\n        html: _l(\"Import from File\"),\n        href: \"history/import_archive\"\n    }\n];\n\n// Webhooks\nWebhooks.add({\n    url: \"api/webhooks/history-menu/all\",\n    async: false, // (hypothetically) slows down the performance\n    callback: function(webhooks) {\n        var webhooks_menu = [];\n\n        $.each(webhooks.models, (index, model) => {\n            var webhook = model.toJSON();\n            if (webhook.activate) {\n                webhooks_menu.push({\n                    html: _l(webhook.config.title),\n                    // func: function() {},\n                    anon: true\n                });\n            }\n        });\n\n        if (webhooks_menu.length > 0) {\n            webhooks_menu.unshift({\n                html: _l(\"Webhooks\"),\n                header: true\n            });\n            $.merge(menu, webhooks_menu);\n        }\n    }\n});\n\nfunction buildMenu(isAnon, purgeAllowed, urlRoot) {\n    return _.clone(menu).filter(menuOption => {\n        if (isAnon && !menuOption.anon) {\n            return false;\n        }\n        if (!purgeAllowed && menuOption.purge) {\n            return false;\n        }\n\n        //TODO:?? hard-coded galaxy_main\n        if (menuOption.href) {\n            menuOption.href = urlRoot + menuOption.href;\n            menuOption.target = menuOption.target || \"galaxy_main\";\n        }\n\n        if (menuOption.confirm) {\n            menuOption.func = () => {\n                if (confirm(menuOption.confirm)) {\n                    galaxy_main.location = menuOption.href;\n                }\n            };\n        }\n        return true;\n    });\n}\n\nvar create = ($button, options) => {\n    options = options || {};\n    var isAnon = options.anonymous === undefined ? true : options.anonymous;\n    var purgeAllowed = options.purgeAllowed || false;\n    var menu = buildMenu(isAnon, purgeAllowed, Galaxy.root);\n    //console.debug( 'menu:', menu );\n    return new PopupMenu($button, menu);\n};\n\n// ============================================================================\nexport default create;\n"]}