{"version":3,"sources":["mvc/history/multi-panel.js"],"names":["HistoryViewColumn","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","tagName","className","id","this","model","get","initialize","options","purgeAllowed","_","isUndefined","setUpListeners","createPanel","panelOptions","_historyViewEdit2","HistoryViewEdit","defaults","dragItems","$scrollContainer","column","once","setUpPanelListeners","listenTo","panel","rendered","trigger","view:expanded view:rendered","view","inView","viewLeft","viewRight","columnLeft","$el","offset","left","width","$panel","columnRight","render","speed","undefined","modelData","toJSON","html","renderPanel","css","setUpBehaviors","template","data","isCurrentHistory","currentHistory","controlsLeftTemplate","history","setElement","$list","before","events","click .switch-to.btn","click .delete-history","_delete","done","click .undelete-history","undelete","click .purge-history","confirm","purge","click .copy-history","copy","_copyDialog2","controlsRightTemplate","_localization2","toString","join","variable","columnWidth","borderWidth","columnGap","headerHeight","footerHeight","controlsHeight","collection","MultiPanelColumns","multipanel","log","addClass","stopListening","setUpCollectionListeners","createColumns","perPage","hdaQueue","_ajaxQueue2","NamedAjaxQueue","columnMap","models","columnOptions","historySearch","datasetSearch","setCollection","histories","error","on","sort","_historyModel2","HistoryCollection","clear","addModels","setCurrentHistory","oldCurrentColumn","findWhere","addColumn","newCurrentColumn","_recalcFirstColumnHeight","errorHandler","add","all-fetched","_postFetchAll","new-current","addAsCurrentColumn","set-as-current","change:deleted change:purged","handleDeletedHistory","renderColumns","fetchData","$","remove","scrollLeft","status","xhr","height","currentHistoryId","includeDeleted","ajaxErrorModal","apply","removeColumn","readyState","message","title","setUpColumnListeners","_errorModal2","badGatewayErrorModal","_ajaxErrorHandler","newColumn","arguments","create","current","each","i","createColumn","config","allow_user_dataset_purge","fadeOut","checkColumnsInView","searchItems","queueHdaFetchDetails","currentColumnDropTargetOn","_dropData","queue","name","fn","widthToRemove","content","contents","in-view","queueHdaFetch","columnMapLength","view:draggable:dragstart","ev","JSON","parse","dataTransfer","getData","sortedFilteredColumns","filters","currentColumnDropTargetOff","droptarget:drop","sortedColumns","filter","json","index","isCopyable","filtered","currentPage","fetchPage","toCopy","sorted","forEach","start","Object","length","$middle","_addColumns","sortedAndFiltered","every","map","call","self","fxSpeed","mainTemplate","numExisting","columns","empty","allFetched","append","loadingIndicatorTemplate","fetchOptions","isNumber","fetchCurrentPage","children","_calcMiddleWidth","delegateEvents","appendTo","numColumns","needsContentsLoaded","contentsShown","silent","ids","values","storage","allExpanded","details","renderItems","toggleOptionsPopover","haveDetails","window","location","progressivelyFetchDetails","_renderEmptyMessage","running","toggleDeletedDatasets","renderInfo","msg","text","click .done.btn","show","click #include-deleted","toggleShowHidden","click #toggle-hidden","close","root","_clickToggleDeletedHistories","currentTarget","orderDescriptions","toggleDeletedHistories","currentHistoryModel","unshift","Galaxy","is","_scrollLeft","val","toggleShowDeleted","_clickToggleHiddenDatasets","_moreOptionsPopover","placeholder","onfirstsearch","_chooseOrder","onsearch","orderKey","onclear","slice","fetchFirst","searchInput","fetchAll","searchFor","matchesAll","debouncedInView","viewport","container","placement","optionsPopoverTemplate","progress","curr","total","deferred","middleHeight","controlHeight","$firstColumn","_viewport","$outerMiddle","resize","checkForEndOfScroll","parent","popover","currentColumn","first","find","columnsInView","vp","right","update_time","dataDropped","dropTargetOn","prototype","dataDrop","dropTarget","update_time-asc","name-dsc","size","size-asc"],"mappings":"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","file":"../../../scripts/mvc/history/multi-panel.js","sourcesContent":["import _l from \"utils/localization\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_VIEW_EDIT from \"mvc/history/history-view-edit\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport baseMVC from \"mvc/base-mvc\";\nimport ajaxQueue from \"utils/ajax-queue\";\nimport \"ui/mode-button\";\nimport \"ui/search-input\";\n\nvar logNamespace = \"history\";\n/* ==============================================================================\nTODO:\n\n============================================================================== */\n/** @class A container for a history panel that renders controls for that history (delete, copy, etc.) */\nvar HistoryViewColumn = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    tagName: \"div\",\n    className: \"history-column flex-column flex-row-container\",\n    id: function id() {\n        if (!this.model) {\n            return \"\";\n        }\n        return `history-column-${this.model.get(\"id\")}`;\n    },\n\n    // ------------------------------------------------------------------------ set up\n    /** set up passed-in panel (if any) and listeners */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.purgeAllowed = !_.isUndefined(options.purgeAllowed) ? options.purgeAllowed : false;\n        this.panel = options.panel || this.createPanel(options);\n\n        this.setUpListeners();\n    },\n\n    /** create a history panel for this column */\n    createPanel: function createPanel(panelOptions) {\n        return new HISTORY_VIEW_EDIT.HistoryViewEdit(\n            _.defaults(panelOptions, {\n                model: this.model,\n                // non-current panels should set their hdas to draggable\n                purgeAllowed: this.purgeAllowed,\n                dragItems: true,\n                $scrollContainer: function() {\n                    return this.$el;\n                }\n            })\n        );\n    },\n\n    /** set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        var column = this;\n        //this.log( 'setUpListeners', this );\n        this.once(\"rendered\", () => {\n            column.trigger(\"rendered:initial\", column);\n        });\n        this.setUpPanelListeners();\n    },\n\n    /** set listeners needed for panel */\n    setUpPanelListeners: function setUpPanelListeners() {\n        var column = this;\n        this.listenTo(\n            this.panel,\n            {\n                //'all': function(){ console.info( 'panel of ' + this, arguments ); },\n\n                // assumes panel will take the longest to render\n                rendered: function() {\n                    column.trigger(\"rendered\", column);\n                },\n                // when a panel's view expands turn off the click handler on the rerun button so that it uses it's href\n                // this allows the button to open the tool rerun form in a new tab (instead of erroring)\n                // TODO: hack\n                \"view:expanded view:rendered\": function(view) {\n                    view.$(\".rerun-btn\").off();\n                }\n            },\n            this\n        );\n    },\n\n    /** do the dimensions of this column overlap the given (horizontal) browser coords? */\n    inView: function(viewLeft, viewRight) {\n        var columnLeft = this.$el.offset().left;\n        var columnRight = columnLeft + this.$el.width();\n        if (columnRight < viewLeft) {\n            return false;\n        }\n        if (columnLeft > viewRight) {\n            return false;\n        }\n        return true;\n    },\n\n    /** shortcut to the panel */\n    $panel: function $panel() {\n        return this.$(\".history-panel\");\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** render ths column, its panel, and set up plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        //this.log( this + '.render', this.$el, this.el );\n        //TODO: not needed\n        var modelData = this.model ? this.model.toJSON() : {};\n        this.$el.html(this.template(modelData));\n        this.renderPanel(speed);\n        // jq 1.12 doesn't fade/show properly when display: flex, re-set here\n        this.panel.$el.css(\"display\", \"flex\");\n        // if model and not children\n        // template\n        // render controls\n        this.setUpBehaviors();\n        // add panel\n        return this;\n    },\n\n    /** set up plugins */\n    setUpBehaviors: function setUpBehaviors() {\n        //this.log( 'setUpBehaviors:', this );\n        //var column = this;\n        // on panel size change, ...\n    },\n\n    /** column body template with inner div for panel based on data (model json) */\n    template: function template(data) {\n        data = _.extend(data || {}, {\n            isCurrentHistory: this.currentHistory\n        });\n        return $(\n            [\n                '<div class=\"panel-controls clear flex-row\">',\n                this.controlsLeftTemplate({\n                    history: data,\n                    view: this\n                }),\n                //'<button class=\"btn btn-default\">Herp</button>',\n                this.controlsRightTemplate({\n                    history: data,\n                    view: this\n                }),\n                \"</div>\",\n                '<div class=\"inner flex-row flex-column-container\">',\n                '<div id=\"history-',\n                data.id,\n                '\" class=\"history-column history-panel flex-column\"></div>',\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    /** render the panel contained in the column using speed for fx speed */\n    renderPanel: function renderPanel(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        this.panel.setElement(this.$panel()).render(speed);\n        if (this.currentHistory) {\n            this.panel.$list().before(this.panel._renderDropTargetHelp());\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ behaviors and events\n    /** event map */\n    events: {\n        // will make this the current history\n        \"click .switch-to.btn\": function() {\n            this.model.setAsCurrent();\n        },\n        //TODO: remove boiler plate from next 3\n        \"click .delete-history\": function() {\n            var column = this;\n            this.model._delete().done(data => {\n                column.render();\n            });\n        },\n        \"click .undelete-history\": function() {\n            var column = this;\n            this.model.undelete().done(data => {\n                column.render();\n            });\n        },\n        \"click .purge-history\": function() {\n            if (confirm(_l(\"This will permanently remove the data. Are you sure?\"))) {\n                var column = this;\n                this.model.purge().done(data => {\n                    column.render();\n                });\n            }\n        },\n        // will copy this history and make the copy the current history\n        \"click .copy-history\": \"copy\"\n    },\n\n    // ------------------------------------------------------------------------ non-current controls\n    /** Open a modal to get a new history name, copy it (if not canceled), and makes the copy current */\n    copy: function copy() {\n        historyCopyDialog(this.model);\n    },\n\n    // ------------------------------------------------------------------------ templates\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsLeftTemplate: _.template(\n        [\n            '<div class=\"pull-left\">',\n            \"<% if( data.history.isCurrentHistory ){ %>\",\n            '<strong class=\"current-label\">',\n            _l(\"Current History\"),\n            \"</strong>\",\n            \"<% } else { %>\",\n            '<button class=\"switch-to btn btn-default\">',\n            _l(\"Switch to\"),\n            \"</button>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsRightTemplate: _.template(\n        [\n            '<div class=\"pull-right\">',\n            \"<% if( !data.history.purged ){ %>\",\n            '<div class=\"panel-menu btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n            \"<% if( !data.history.deleted ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"copy-history\">',\n            _l(\"Copy\"),\n            \"</a></li>\",\n            //'<li><a href=\"javascript:void(0);\" class=\"publish-history\">',\n            //    _l( 'Publish' ),\n            //'</a></li>',\n            '<li><a href=\"javascript:void(0);\" class=\"delete-history\">',\n            _l(\"Delete\"),\n            \"</a></li>\",\n            \"<% } else /* if is deleted */ { %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"undelete-history\">',\n            _l(\"Undelete\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"<% if( data.view.purgeAllowed ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"purge-history\">',\n            _l(\"Purge\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return `HistoryViewColumn(${this.panel ? this.panel : \"\"})`;\n    }\n});\n\n//==============================================================================\n/** @class A view of a HistoryCollection and displays histories similarly to the current history panel.\n */\nvar MultiPanelColumns = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    className: \"multi-panel-history\",\n\n    // ------------------------------------------------------------------------ set up\n    /** Set up internals, history collection, and columns to display the history */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.log(`${this}.init`, options);\n\n        // add the className here (since we gen. pass the el in options)\n        this.$el.addClass(this.className);\n\n        // --- instance vars\n        //TODO: move these to some defaults\n        this.options = {\n            columnWidth: 312,\n            borderWidth: 1,\n            columnGap: 8,\n            headerHeight: 29,\n            footerHeight: 0,\n            controlsHeight: 20\n        };\n\n        /** how many histories to get when fetching a new batch/page */\n        this.perPage = options.perPage || 10;\n\n        /** named ajax queue for loading hdas */\n        this.hdaQueue = new ajaxQueue.NamedAjaxQueue([], false);\n\n        // --- set up models, sub-views, and listeners\n        /** the original unfiltered and unordered collection of histories */\n        this.collection = null;\n        /** model id to column map */\n        this.columnMap = {};\n        /** model id to column map */\n        this.columnOptions = options.columnOptions || {};\n\n        /** what to search for within all histories */\n        this.historySearch = null;\n        /** what to search for within all datasets */\n        this.datasetSearch = null;\n\n        this.setCollection(options.histories);\n        this.setUpListeners();\n    },\n\n    /** Set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        var multipanel = this;\n        //multipanel.log( 'setUpListeners', multipanel );\n        this.on(\"end-of-scroll\", () => {\n            multipanel.collection.fetchMore();\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    setCollection: function setCollection(collection) {\n        // console.log( 'setCollection:', collection );\n        this.stopListening(this.collection);\n\n        this.collection = collection || new HISTORY_MODEL.HistoryCollection();\n        this.setUpCollectionListeners();\n\n        this.createColumns();\n        this.hdaQueue.clear();\n\n        this.trigger(\"new-collection\", this);\n        return this;\n    },\n\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    addModels: function addModels(models, collection, options) {\n        // console.log( 'addModels:', models, collection, options );\n        options = options || {};\n        var multipanel = this;\n        models = _.isArray(models) ? models : [models];\n        models.forEach(model => {\n            multipanel.addColumn(model, false);\n            // if this is from a fetch, sort will be called and it will call render\n        });\n        return this;\n    },\n\n    /** Set up listeners for the collection - handling: added histories, change of current, deletion, and sorting */\n    setUpCollectionListeners: function() {\n        var multipanel = this;\n        multipanel.listenTo(multipanel.collection, {\n            // handle ajax errors from the collection\n            error: multipanel.errorHandler,\n            // add multiple models\n            add: multipanel.addModels,\n            // when all the histories a user has have been fetched\n            \"all-fetched\": multipanel._postFetchAll,\n            // handle addition of histories, triggered by column copy and create new\n            \"new-current\": multipanel.addAsCurrentColumn,\n            // handle setting a history as current, triggered by history.setAsCurrent\n            \"set-as-current\": multipanel.setCurrentHistory,\n            // handle deleting a history (depends on whether panels is including deleted or not)\n            \"change:deleted change:purged\": multipanel.handleDeletedHistory,\n            // re-render columns after a sort\n            sort: function() {\n                multipanel.renderColumns(0);\n            }\n        });\n    },\n\n    _postFetchAll: function(fetchData) {\n        // console.log( '_postFetchAll' );\n        this.$(\".histories-loading-indicator\").remove();\n        // when new histories is fetched and the indicator is not required,\n        // the panel will jump slightly left - totally aesthetic but jarring\n        // TODO: this probably would be best handled elsewhere during a refinement cycle (if any)\n        if (!this.historySearch) {\n            var $scrollContainer = this.$(\".outer-middle\");\n            $scrollContainer.scrollLeft($scrollContainer.scrollLeft() + 24);\n        }\n    },\n\n    /** Re-render and set currentHistoryId to reflect a new current history */\n    setCurrentHistory: function setCurrentHistory(history) {\n        this.log(\"setCurrentHistory:\", history);\n        var oldCurrentColumn = _.findWhere(this.columnMap, {\n            currentHistory: true\n        });\n        if (oldCurrentColumn) {\n            oldCurrentColumn.currentHistory = false;\n            oldCurrentColumn.$el.height(\"\");\n        }\n\n        var newCurrentColumn = this.columnMap[this.collection.currentHistoryId];\n        newCurrentColumn.currentHistory = true;\n        this.collection.sort();\n        this._recalcFirstColumnHeight();\n        return newCurrentColumn;\n    },\n\n    /** Either remove a deleted history or re-render it to show the deleted message\n     *      based on collection.includeDeleted\n     */\n    handleDeletedHistory: function handleDeletedHistory(history) {\n        if (history.get(\"deleted\") || history.get(\"purged\")) {\n            this.log(\"handleDeletedHistory\", this.collection.includeDeleted, history);\n            var multipanel = this;\n            var column = multipanel.columnMap[history.id];\n            if (!column) {\n                return;\n            }\n\n            // if it's the current column, create a new, empty history as the new current\n            if (column.model.id === this.collection.currentHistoryId) {\n                //TODO: figuring out the order of async here is tricky\n                //  - for now let the user handle the two step process\n                //multipanel.collection.create().done( function(){\n                //    if( !multipanel.collection.includeDeleted ){ multipanel.removeColumn( column, false ); }\n                //});\n            } else if (!multipanel.collection.includeDeleted) {\n                multipanel.removeColumn(column);\n            }\n        }\n    },\n\n    // ........................................................................ error handling\n    /** Event handler for errors (from the history collection mainly)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  (e.g. this.trigger( 'error', 'Heres a message', 'Heres a title' ))\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n    errorHandler: function(model, xhr, options) {\n        // interrupted ajax or no connection\n        if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n            // return ERROR_MODAL.offlineErrorModal();\n            // fail silently\n            return;\n        }\n        // otherwise, leave something to report in the console\n        this.error(model, xhr, options);\n        // and feedback to a modal\n        // if sent two strings (and possibly details as 'options'), use those as message and title\n        if (_.isString(model) && _.isString(xhr)) {\n            var message = model;\n            var title = xhr;\n            return ERROR_MODAL.errorModal(message, title, options);\n        }\n        // bad gateway\n        // TODO: possibly to global handler\n        if (xhr && xhr.status === 502) {\n            return ERROR_MODAL.badGatewayErrorModal();\n        }\n        return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n    },\n\n    /** If Galaxy object is available handle error there, otherwise, locally (and crudely) */\n    _ajaxErrorHandler: function() {\n        ERROR_MODAL.ajaxErrorModal.apply(null, _.toArray(arguments));\n    },\n\n    /** create a new history and set it to current */\n    create: function(ev) {\n        return this.collection.create({ current: true });\n    },\n\n    // ------------------------------------------------------------------------ columns\n    /** create columns from collection */\n    createColumns: function createColumns(models, columnOptions) {\n        columnOptions = columnOptions || this.options.columnOptions;\n        var multipanel = this;\n        // clear column map\n        // TODO: make cummulative\n        multipanel.columnMap = {};\n        multipanel.collection.each((model, i) => {\n            var column = multipanel.createColumn(model, columnOptions);\n            multipanel.columnMap[model.id] = column;\n        });\n    },\n\n    /** create a column and its panel and set up any listeners to them */\n    createColumn: function createColumn(history, options) {\n        // options passed can be re-used, so extend them before adding the model to prevent pollution for the next\n        options = _.extend({}, options, {\n            model: history,\n            purgeAllowed: Galaxy.config.allow_user_dataset_purge\n        });\n        var column = new HistoryViewColumn(options);\n        if (history.id === this.collection.currentHistoryId) {\n            column.currentHistory = true;\n        }\n        this.setUpColumnListeners(column);\n        if (this.datasetSearch) {\n            column.panel.searchItems(this.datasetSearch);\n            this.queueHdaFetchDetails(column);\n        }\n        return column;\n    },\n\n    /** add a new column for history and render all columns if render is true */\n    addColumn: function add(history, render) {\n        // console.debug( 'adding column for:', history, render );\n        render = render !== undefined ? render : true;\n        var newColumn = this.createColumn(history);\n        this.columnMap[history.id] = newColumn;\n        if (render) {\n            this.renderColumns();\n        }\n        return newColumn;\n    },\n\n    /** add a new column for history and make it the current history/column */\n    addAsCurrentColumn: function add(history, collection, options) {\n        //this.log( 'adding current column for:', history );\n        var multipanel = this;\n\n        var newColumn = this.addColumn(history, false);\n        this.setCurrentHistory(history);\n        newColumn.once(\"rendered\", () => {\n            multipanel.queueHdaFetch(newColumn);\n        });\n        return newColumn;\n    },\n\n    /** remove the given column, it's listeners, and optionally render */\n    removeColumn: function remove(column, render) {\n        render = render !== undefined ? render : true;\n        this.log(\"removeColumn\", column);\n        if (!column) {\n            return;\n        }\n        var multipanel = this;\n        var widthToRemove = this.options.columnWidth + this.options.columnGap;\n        column.$el.fadeOut(\"fast\", function() {\n            if (render) {\n                $(this).remove();\n                multipanel.$(\".middle\").width(multipanel.$(\".middle\").width() - widthToRemove);\n                multipanel.checkColumnsInView();\n                multipanel._recalcFirstColumnHeight();\n            }\n\n            //TODO: to freeColumn (where Columns have freePanel)\n            multipanel.stopListening(column.panel);\n            multipanel.stopListening(column);\n            delete multipanel.columnMap[column.model.id];\n            column.remove();\n        });\n    },\n\n    /** set up listeners for a column and it's panel - handling: hda lazy-loading, drag and drop */\n    setUpColumnListeners: function setUpColumnListeners(column) {\n        var multipanel = this;\n        multipanel.listenTo(column, {\n            //'all': function(){ console.info( 'column ' + column + ':', arguments ) },\n            \"in-view\": multipanel.queueHdaFetch\n        });\n\n        multipanel.listenTo(column.panel, {\n            //'all': function(){ console.info( 'panel ' + column.panel + ':', arguments ) },\n\n            \"view:draggable:dragstart\": function(ev, view, panel, column) {\n                multipanel._dropData = JSON.parse(ev.dataTransfer.getData(\"text\"));\n                multipanel.currentColumnDropTargetOn();\n            },\n            \"view:draggable:dragend\": function(ev, view, panel, column) {\n                multipanel._dropData = null;\n                multipanel.currentColumnDropTargetOff();\n            },\n            \"droptarget:drop\": function(ev, data, panel) {\n                //note: bad copy sources fail silently\n                var toCopy = multipanel._dropData.filter(json => panel.model.contents.isCopyable(json));\n                multipanel._dropData = null;\n\n                var queue = new ajaxQueue.NamedAjaxQueue();\n                if (panel.model.contents.currentPage !== 0) {\n                    queue.add({\n                        name: \"fetch-front-page\",\n                        fn: function() {\n                            return panel.model.contents.fetchPage(0);\n                        }\n                    });\n                }\n                // need to reverse to better match expected order\n                // TODO: reconsider order in list-view._setUpItemViewListeners, dragstart (instead of here)\n                toCopy.reverse().forEach(content => {\n                    queue.add({\n                        name: `copy-${content.id}`,\n                        fn: function() {\n                            return panel.model.contents.copy(content);\n                        }\n                    });\n                });\n                queue.start();\n                queue.done(responses => {\n                    panel.model.fetch();\n                });\n            }\n        });\n    },\n\n    /** conv. fn to count the columns in columnMap */\n    columnMapLength: function() {\n        return Object.keys(this.columnMap).length;\n    },\n\n    /** return array of Columns filtered by filters and sorted to match the collection\n     *  @param: filters Function[] array of filter fns\n     */\n    sortedFilteredColumns: function(filters) {\n        filters = filters || this.filters;\n        if (!filters || !filters.length) {\n            return this.sortedColumns();\n        }\n        var multipanel = this;\n        return multipanel.sortedColumns().filter((column, index) => {\n            var filtered = column.currentHistory || _.every(filters.map(filter => filter.call(column)));\n            return filtered;\n        });\n    },\n\n    /** return array of Columns sorted to match the collection */\n    sortedColumns: function() {\n        var multipanel = this;\n        var sorted = this.collection.map((history, index) => multipanel.columnMap[history.id]);\n        return sorted;\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** Render this view, columns, and set up view plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        var multipanel = this;\n\n        multipanel.log(`${multipanel}.render`);\n        multipanel.$el.html(multipanel.mainTemplate(multipanel));\n        multipanel.renderColumns(speed);\n\n        // set the columns to full height allowed and set up behaviors for thie multipanel\n        multipanel.setUpBehaviors();\n        //TODO: wrong - has to wait for columns to render\n        //  - create a column listener that fires this when all columns are rendered\n        multipanel.trigger(\"rendered\", multipanel);\n        return multipanel;\n    },\n\n    /** Render the columns and panels */\n    renderColumns: function renderColumns(speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        // console.log( 'renderColumns:', speed );\n        // render columns and track the total number rendered, firing an event when all are rendered\n        var self = this;\n        var sortedAndFiltered = self.sortedFilteredColumns();\n        // console.log( '\\t sortedAndFiltered:', sortedAndFiltered );\n        var $middle = self.$(\".middle\").empty();\n\n        self._addColumns(sortedAndFiltered, speed);\n        if (!self.collection.allFetched) {\n            $middle.append(self.loadingIndicatorTemplate(self));\n        }\n        //TODO: sorta - at least their fx queue has started the re-rendering\n        self.trigger(\"columns-rendered\", sortedAndFiltered, self);\n\n        if (self.datasetSearch && sortedAndFiltered.length <= 1) {\n        } else {\n            // check for in-view, hda lazy-loading if so\n            self.checkColumnsInView();\n            // the first, current column has position: fixed and flex css will not apply - adjust height manually\n            self._recalcFirstColumnHeight();\n        }\n        return sortedAndFiltered;\n    },\n\n    _addColumns: function(columns, speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        var $middle = this.$(\".middle\");\n\n        var numExisting = $middle.children(\".history-column\").length;\n        $middle.width(this._calcMiddleWidth(columns.length + numExisting));\n\n        columns.forEach((column, i) => {\n            column\n                .delegateEvents()\n                .render(speed)\n                .$el.appendTo($middle);\n        });\n    },\n\n    _calcMiddleWidth: function(numColumns) {\n        var preventStackWidthAdj = 16;\n        return (\n            numColumns * (this.options.columnWidth + this.options.columnGap) +\n            // last column gap\n            this.options.columnGap +\n            // the amount that safely prevents stacking of columns when adding a new one\n            preventStackWidthAdj\n        );\n    },\n\n    //TODO: combine the following two more sensibly\n    //TODO: could have HistoryContents.haveDetails return false\n    //      if column.model.contents.length === 0 && !column.model.get( 'empty' ) then just check that\n    /** Get the *summary* contents of a column's history (and details on any expanded contents),\n     *      queueing the ajax call and using a named queue to prevent the call being sent twice\n     */\n    queueHdaFetch: function queueHdaFetch(column) {\n        // console.log( column.model + '.contentsShown:', column.model.contentsShown() );\n        var contents = column.model.contents;\n        // console.log( 'queueHdaFetch:', column, column.model.get( 'contents_active' ) );\n        // if the history model says it has hdas but none are present, queue an ajax req for them\n        if (contents.length === 0 && column.model.contentsShown()) {\n            var fetchOptions = { silent: true };\n            var ids = _.values(contents.storage.allExpanded()).join();\n            if (ids) {\n                fetchOptions.details = ids;\n            }\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents.fetchCurrentPage(fetchOptions).done(() => {\n                        column.panel.renderItems();\n                    });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** Get the *detailed* json for *all* of a column's history's contents - req'd for searching */\n    queueHdaFetchDetails: function(column) {\n        var contents = column.model.contents;\n        var needsContentsLoaded = contents.length === 0 && column.model.contentsShown();\n        if (needsContentsLoaded || !contents.haveDetails()) {\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents.progressivelyFetchDetails().done(() => {\n                        column.panel._renderEmptyMessage();\n                    });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** put a text msg in the header */\n    renderInfo: function(msg) {\n        return this.$(\".header .header-info\").text(msg);\n    },\n\n    // ------------------------------------------------------------------------ events/behaviors\n    events: {\n        // will move to the server root (gen. Analyze data)\n        \"click .done.btn\": \"close\",\n        // creates a new empty history and makes it current\n        \"click .create-new.btn\": \"create\",\n        \"click #include-deleted\": \"_clickToggleDeletedHistories\",\n        // these change the collection and column sort order\n        \"click .order .set-order\": \"_chooseOrder\",\n        \"click #toggle-deleted\": \"_clickToggleDeletedDatasets\",\n        \"click #toggle-hidden\": \"_clickToggleHiddenDatasets\"\n        //'dragstart .list-item .title-bar'                       : function( e ){ console.debug( 'ok' ); }\n    },\n\n    close: function(ev) {\n        //TODO: switch to pushState/router\n        window.location = Galaxy.root;\n    },\n\n    _clickToggleDeletedHistories: function(ev) {\n        this.toggleDeletedHistories($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    /** Include deleted histories in the collection */\n    toggleDeletedHistories: function(show) {\n        if (show) {\n            window.location = `${Galaxy.root}history/view_multiple?include_deleted_histories=True`;\n        } else {\n            window.location = `${Galaxy.root}history/view_multiple`;\n        }\n    },\n\n    _clickToggleDeletedDatasets: function(ev) {\n        this.toggleDeletedDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleDeletedDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach((column, i) => {\n            _.delay(() => {\n                column.panel.toggleShowDeleted(show, false);\n            }, i * 200);\n        });\n    },\n\n    _clickToggleHiddenDatasets: function(ev) {\n        this.toggleHiddenDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleHiddenDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach((column, i) => {\n            _.delay(() => {\n                column.panel.toggleShowHidden(show, false);\n            }, i * 200);\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    _chooseOrder: function(ev) {\n        var multipanel = this;\n        var collection = multipanel.collection;\n        var orderKey = $(ev.currentTarget).data(\"order\");\n        // set the sort order text also\n        multipanel.$(\".current-order\").text(multipanel.orderDescriptions[orderKey]);\n        multipanel.toggleOptionsPopover();\n        // set the order and re-fetch using the new order, saving the current history as the first\n        collection.setOrder(orderKey);\n        var currentHistoryModel = collection.slice(0, 1);\n        collection.fetchFirst().done(() => {\n            collection.unshift(currentHistoryModel, {\n                silent: true\n            });\n            multipanel.createColumns();\n            // need to clear this or previously fetched contents won't refetch now (bc of named queue)\n            multipanel.hdaQueue.clear();\n            multipanel.render();\n        });\n        multipanel.once(\"columns-rendered\", multipanel._scrollLeft);\n        //TODO: check allFetched and do not reset if so - just sort instead\n    },\n\n    /** scroll the column container right or left */\n    _scrollLeft: function(val) {\n        val = _.isNumber(val) ? val : 0;\n        this.$(\".outer-middle\").scrollLeft(val);\n    },\n\n    /** Set up any view plugins */\n    setUpBehaviors: function() {\n        var multipanel = this;\n        multipanel._moreOptionsPopover();\n\n        // input to search histories\n        multipanel.$(\"#search-histories\").searchInput({\n            name: \"search-histories\",\n            placeholder: _l(\"search histories\"),\n\n            onfirstsearch: function(searchFor) {\n                multipanel.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                multipanel.renderInfo(_l(\"loading all histories for search\"));\n                multipanel.collection.fetchAll().done(() => {\n                    multipanel.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                    multipanel.renderInfo(\"\");\n                });\n            },\n            onsearch: function(searchFor) {\n                multipanel.historySearch = searchFor;\n                multipanel.filters = [\n                    function() {\n                        return this.model.matchesAll(multipanel.historySearch);\n                    }\n                ];\n                multipanel.renderColumns(0);\n            },\n            onclear: function(searchFor) {\n                multipanel.historySearch = null;\n                //TODO: remove specifically not just reset\n                multipanel.filters = [];\n                multipanel.renderColumns(0);\n            }\n        });\n\n        // input to search datasets\n        multipanel.$(\"#search-datasets\").searchInput({\n            name: \"search-datasets\",\n            placeholder: _l(\"search all datasets\"),\n\n            onfirstsearch: function(searchFor) {\n                multipanel.hdaQueue.clear();\n                multipanel.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach(column => {\n                    column.panel.searchItems(searchFor);\n                    // load details for them that need\n                    multipanel.queueHdaFetchDetails(column);\n                });\n                multipanel.hdaQueue.progress(progress => {\n                    multipanel.renderInfo([_l(\"searching\"), progress.curr + 1, _l(\"of\"), progress.total].join(\" \"));\n                });\n                multipanel.hdaQueue.deferred.done(() => {\n                    multipanel.renderInfo(\"\");\n                    multipanel.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                });\n            },\n            onsearch: function(searchFor) {\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach(column => {\n                    column.panel.searchItems(searchFor);\n                });\n            },\n            onclear: function(searchFor) {\n                multipanel.datasetSearch = null;\n                multipanel.sortedFilteredColumns().forEach(column => {\n                    column.panel.clearSearch();\n                });\n            }\n        });\n\n        // resize first (fixed position) column on page resize\n        $(window).resize(() => {\n            multipanel._recalcFirstColumnHeight();\n        });\n\n        // when scrolling - check for histories now in view: they will fire 'in-view' and queueHdaLoading if necc.\n        //TODO:?? might be able to simplify and not use pub-sub\n        var debouncedInView = _.debounce(function _debouncedInner() {\n            var viewport = multipanel._viewport();\n            multipanel.checkColumnsInView(viewport);\n            multipanel.checkForEndOfScroll(viewport);\n        }, 100);\n        this.$(\".middle\")\n            .parent()\n            .scroll(debouncedInView);\n    },\n\n    /** create the options popover */\n    _moreOptionsPopover: function() {\n        return this.$(\".open-more-options.btn\").popover({\n            container: \".header\",\n            placement: \"bottom\",\n            html: true,\n            content: $(this.optionsPopoverTemplate(this))\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    toggleOptionsPopover: function(ev) {\n        // hide seems broken in our version\n        this.$(\".open-more-options.btn\").popover(\"toggle\");\n    },\n\n    /** Adjust the height of the first, current column since flex-boxes won't work with fixed postiion elements */\n    _recalcFirstColumnHeight: function() {\n        var $firstColumn = this.$(\".history-column\").first();\n        var middleHeight = this.$(\".middle\").height();\n        var controlHeight = $firstColumn.find(\".panel-controls\").height();\n        $firstColumn\n            .height(middleHeight)\n            .find(\".inner\")\n            .height(middleHeight - controlHeight);\n    },\n\n    /** Get the left and right pixel coords of the middle element */\n    _viewport: function() {\n        var $outerMiddle = this.$(\".middle\").parent();\n        var viewLeft = $outerMiddle.offset().left;\n        var width = $outerMiddle.width();\n        return {\n            left: viewLeft,\n            right: viewLeft + width\n        };\n    },\n\n    /** returns the columns currently in the viewport */\n    columnsInView: function(viewport) {\n        //TODO: uses offset which is render intensive\n        //TODO: 2N - could use arg filter (sortedFilteredColumns( filter )) instead\n        var vp = viewport || this._viewport();\n        return this.sortedFilteredColumns().filter(column => column.currentHistory || column.inView(vp.left, vp.right));\n    },\n\n    //TODO: sortByInView - return cols in view, then others\n    /** trigger in-view from columns in-view */\n    checkColumnsInView: function() {\n        //TODO: assbackward - don't fire from the column, fire from here and listen from here\n        this.columnsInView().forEach(column => {\n            column.trigger(\"in-view\", column);\n        });\n    },\n\n    /** is the middle, horizontally scrolling section scrolled fully to the right? */\n    checkForEndOfScroll: function(viewport) {\n        viewport = viewport || this._viewport();\n        var END_PADDING = 16;\n        var $middle = this.$(\".middle\");\n        var scrollRight = $middle.parent().scrollLeft() + viewport.right;\n        if (scrollRight >= $middle.width() - END_PADDING) {\n            this.trigger(\"end-of-scroll\");\n        }\n    },\n\n    /** Show and enable the current columns drop target */\n    currentColumnDropTargetOn: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        //TODO: fix this - shouldn't need monkeypatch\n        currentColumn.panel.dataDropped = data => {};\n        currentColumn.panel.dropTargetOn();\n    },\n\n    /** Hide and disable the current columns drop target */\n    currentColumnDropTargetOff: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        currentColumn.panel.dataDropped = HISTORY_VIEW_EDIT.HistoryViewEdit.prototype.dataDrop;\n        // slight override of dropTargetOff to not erase drop-target-help\n        currentColumn.panel.dropTarget = false;\n        currentColumn.panel.$(\".history-drop-target\").remove();\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return `MultiPanelColumns(${this.columns ? this.columns.length : 0})`;\n    },\n\n    // ------------------------------------------------------------------------ templates\n    mainTemplate: _.template(\n        [\n            '<div class=\"header flex-column-container\">',\n            '<div class=\"control-column control-column-left flex-column\">',\n            '<button class=\"done btn btn-default\" tabindex=\"1\">',\n            _l(\"Done\"),\n            \"</button>\",\n            '<div id=\"search-histories\" class=\"search-control\"></div>',\n            '<div id=\"search-datasets\" class=\"search-control\"></div>',\n            '<a class=\"open-more-options btn btn-default\" tabindex=\"3\">',\n            '<span class=\"fa fa-ellipsis-h\"></span>',\n            \"</a>\",\n            \"</div>\",\n            // feedback\n            '<div class=\"control-column control-column-center flex-column\">',\n            '<div class=\"header-info\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"control-column control-column-right flex-column\">',\n            '<button class=\"create-new btn btn-default\" tabindex=\"4\">',\n            _l(\"Create new\"),\n            \"</button> \",\n            \"</div>\",\n            \"</div>\",\n            // middle - where the columns go\n            '<div class=\"outer-middle flex-row flex-row-container\">',\n            '<div class=\"middle flex-column-container flex-row\"></div>',\n            \"</div>\",\n            // footer\n            '<div class=\"footer flex-column-container\"></div>'\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    loadingIndicatorTemplate: _.template(\n        [\n            '<div class=\"histories-loading-indicator\">',\n            '<span class=\"fa fa-spin fa-spinner\"></span>',\n            _l(\"Loading histories\"),\n            \"...\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    orderDescriptions: {\n        update_time: _l(\"most recent first\"),\n        \"update_time-asc\": _l(\"least recent first\"),\n        name: _l(\"name, a to z\"),\n        \"name-dsc\": _l(\"name, z to a\"),\n        size: _l(\"size, large to small\"),\n        \"size-asc\": _l(\"size, small to large\")\n    },\n\n    optionsPopoverTemplate: _.template(\n        [\n            '<div class=\"more-options\">',\n            '<div class=\"order btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            `${_l(\"Order histories by\")} `,\n            '<span class=\"current-order\"><%- view.orderDescriptions[ view.collection.order ] %></span> ',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( view.orderDescriptions, function( text, order ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"set-order\" data-order=\"<%- order %>\">',\n            \"<%- text %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n\n            '<div class=\"checkbox\"><label><input id=\"include-deleted\" type=\"checkbox\"',\n            '<%= view.collection.includeDeleted? \" checked\" : \"\" %>>',\n            _l(\"Include deleted histories\"),\n            \"</label></div>\",\n\n            \"<hr />\",\n\n            '<div class=\"checkbox\"><label><input id=\"toggle-deleted\" type=\"checkbox\">',\n            _l(\"Include deleted datasets\"),\n            \"</label></div>\",\n            '<div class=\"checkbox\"><label><input id=\"toggle-hidden\" type=\"checkbox\">',\n            _l(\"Include hidden datasets\"),\n            \"</label></div>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    )\n});\n\n//==============================================================================\nexport default {\n    MultiPanelColumns: MultiPanelColumns\n};\n"]}