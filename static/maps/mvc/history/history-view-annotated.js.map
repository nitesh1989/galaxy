{"version":3,"sources":["mvc/history/history-view-annotated.js"],"names":["_super","_historyView2","default","HistoryView","AnnotatedHistoryView","extend","className","prototype","_buildNewRender","call","this","renderHistoryAnnotation","$newRender","annotation","model","get","text","$whereTo","$el","$controls","find","remove","$","_localization2","appendTo","self","views","renderItems","append","view","events","_","clone","click .contents-container","ev","stopPropagation","_renderItemView$el","click","$currTarget","length","attr","dropdown","_clickSectionLink","sectionNumber","parent","data","openSection","toString"],"mappings":"4UAUIA,EAASC,EAAAC,QAAaC,YAStBC,EAAuBJ,EAAOK,QAE1BC,UAAcN,EAAOO,UAAUD,UAA/B,2BAIAE,gBAAiB,WAfrBR,IAAAA,EAASA,EAAAO,UAAaJ,gBAA1BM,KAAAC,MAEA,OADAA,KAAAC,wBAAAC,GACAA,GAqBQD,wBAAyB,SAASC,GAC9B,IAAIC,EAAaH,KAAKI,MAAMC,IAAI,cAC3BF,GAdTP,EAAcN,KAAOO,yBAArBS,KAAAH,IAIAL,YAAAA,SAAiBS,GACbA,EAAAA,GAAAP,KAAAQ,IACAlB,EAAIY,UAAaZ,YAAOO,KAAUC,KAAAA,GAElC,IAAAW,EAAOP,EAAPQ,KAAA,eATqCD,EAAAC,KAAA,+BAAAC,SAYzCC,EAAA,6CACAX,QACQE,EAAAA,yCAAJG,MAAA,EAAAO,EAAArB,SAAA,YACKW,EAAAA,yCAAYG,MAAA,EAAAO,EAAArB,SAAA,iBAEhBsB,SAAAL,GAjBoC,OAAAM,KAAAC,OAwBrC1B,mBAAA,SAAiB2B,GAkBjB,OAAOL,EAAE,qCAAqCM,QAhB1CT,EAAAA,OAAYF,GAAAA,IAChBE,EAAAA,kCAAeH,KAAfa,EAA8CR,MAA9CN,IAAA,eAAA,OAUHe,OArCwCC,EAAA1B,OAAA0B,EAAAC,MAAAhC,EAAAO,UAAAuB,SAuCzCG,4BAAA,SAAAC,GACAA,EAAAC,kBACAC,EAAAA,EAAAA,eACahB,KAAA,yBA1C4BiB,SAiDzCP,kBAAmBE,SAAazB,GAC5B2B,EAAAC,kBAGIb,IAAEY,EAAFZ,EACKF,EAAAA,eALsCkB,EAAAC,QAAA,aAAAD,EAAAE,KAAA,gBAQ/CF,EAAAG,SAAA,aAKIC,kBAAIJ,SAAgBJ,GACpB,IAAAS,EAAgBJ,EAAAA,EAAAA,eACZD,SACHM,SACJC,KAAA,WAlEoCnC,KAAAoC,YAAAH,IA2ExCI,SA3EwC,WAgFrC,MAAA,yBAA+BrC,KAAKI,MAAQJ,KAAKI,MAAMC,IAAI,QAAU,IAArE,kBAORX,qBAAsBA","file":"../../../scripts/mvc/history/history-view-annotated.js","sourcesContent":["import HISTORY_VIEW from \"mvc/history/history-view\";\nimport HDA_LI from \"mvc/history/hda-li\";\nimport HDCA_LI from \"mvc/history/hdca-li\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\nvar _super = HISTORY_VIEW.HistoryView;\n// used in history/display.mako and history/embed.mako\n/** @class View/Controller for a tabular view of the history model.\n *\n *  As ReadOnlyHistoryView, but with:\n *      history annotation always shown\n *      datasets displayed in a table:\n *          datasets in left cells, dataset annotations in the right\n */\nvar AnnotatedHistoryView = _super.extend(\n    /** @lends AnnotatedHistoryView.prototype */ {\n        className: `${_super.prototype.className} annotated-history-panel`,\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** In this override, add the history annotation */\n        _buildNewRender: function() {\n            //TODO: shouldn't this display regardless (on all non-current panels)?\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            this.renderHistoryAnnotation($newRender);\n            return $newRender;\n        },\n\n        /** render the history's annotation as its own field */\n        renderHistoryAnnotation: function($newRender) {\n            var annotation = this.model.get(\"annotation\");\n            if (!annotation) {\n                return;\n            }\n            $newRender.find(\"> .controls .subtitle\").text(annotation);\n        },\n\n        /** override to add headers to indicate the dataset, annotation columns */\n        renderItems: function($whereTo) {\n            $whereTo = $whereTo || this.$el;\n            _super.prototype.renderItems.call(this, $whereTo);\n\n            var $controls = $whereTo.find(\"> .controls\");\n            $controls.find(\".contents-container.headers\").remove();\n\n            var $headers = $('<div class=\"contents-container headers\"/>')\n                .append([\n                    $('<div class=\"history-content header\"/>').text(_l(\"Dataset\")),\n                    $('<div class=\"additional-info header\"/>').text(_l(\"Annotation\"))\n                ])\n                .appendTo($controls);\n\n            return self.views;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** override to wrap each subview */\n        _renderItemView$el: function(view) {\n            return $('<div class=\"contents-container\"/>').append([\n                view.render(0).$el,\n                $('<div class=\"additional-info\"/>').text(view.model.get(\"annotation\") || \"\")\n            ]);\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        events: _.extend(_.clone(_super.prototype.events), {\n            // clicking on any part of the row will expand the items\n            \"click .contents-container\": function(ev) {\n                ev.stopPropagation();\n                $(ev.currentTarget)\n                    .find(\".list-item .title-bar\")\n                    .click();\n            },\n            // prevent propagation on icon btns so they won't bubble up to tr and toggleBodyVisibility\n            \"click .icon-btn\": function(ev) {\n                ev.stopPropagation();\n                // stopProp will prevent bootstrap from getting the click needed to open a dropdown\n                //  in the case of metafile download buttons - workaround here\n                var $currTarget = $(ev.currentTarget);\n                if ($currTarget.length && $currTarget.attr(\"data-toggle\") === \"dropdown\") {\n                    $currTarget.dropdown(\"toggle\");\n                }\n            }\n        }),\n\n        _clickSectionLink: function(ev) {\n            var sectionNumber = $(ev.currentTarget)\n                .parent()\n                .parent()\n                .data(\"section\");\n            this.openSection(sectionNumber);\n        },\n\n        // ........................................................................ misc\n        /** Return a string rep of the history */\n        toString: function() {\n            return `AnnotatedHistoryView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    AnnotatedHistoryView: AnnotatedHistoryView\n};\n"]}