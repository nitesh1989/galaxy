{"version":3,"sources":["mvc/history/history-contents.js"],"names":["_super","_controlledFetchCollection2","default","PaginatedCollection","HistoryContents","extend","_baseMvc2","LoggableMixin","_logNamespace","limitPerPage","limitPerProgressiveFetch","order","urlRoot","Galaxy","root","url","this","historyId","initialize","models","options","prototype","call","setHistoryId","includeDeleted","includeHidden","model","_hdaModel2","HistoryDatasetAssociation","attrs","history","history_content_type","_hdcaModel2","HistoryListPairedDatasetCollection","HistoryListOfListsDatasetCollection","msg","collection_type","console","validationError","newId","_setUpWebStorage","initialSettings","storage","id","_historyPreferences2","HistoryPrefs","historyStorageKey","on","include-deleted","newVal","include-hidden","comparators","trigger","_","clone","name","buildComparator","ascending","name-dsc","hid","hid-asc","running","c","inReadyState","runningAndActive","filter","get","getByHid","findWhere","all","hasDetails","hidden","deleted","visibleAndUndeleted","haveDetails","setting","isBoolean","result","setIncludeHidden","fetch","details","prefs","toJSON","isEmpty","expandedIds","values","join","_buildFetchData","v","_fetchParams","concat","_buildFetchFilters","superFilters","filters","purged","defaults","contentsShown","fetchUpdated","since","update_time-ge","toISOString","visible","getTotalItemCount","self","always","fetchHidden","data","detailsFlag","remove","_filterAndUpdate","filterParams","updateWhat","fetchAllDetails","idAttribute","updateArgs","then","fetched","reduce","modelArray","currJson","i","fetchCollectionCounts","ajaxQueue","collection","_ajaxQueue2","AjaxQueue","slice","reverse","fn","isString","ajaxFn","content","deferred","progressivelyFetchDetails","offset","_options","view","keys","detailKeys","limit","reset","limitPerCall","done","response","searchAttributes","allFetched","_recursivelyFetch","jQuery","Deferred","notify","contains","copyableModelClasses","contentsJSON","model_class","copy","json","type","contentType","isCopyable","LibraryDatasetDatasetAssociation","HistoryDatasetCollectionAssociation","method","parse","fail","xhr","message","JSON","collectionType","hideSourceItems","history_id","hide_source_items","element_identifiers","elementIdentifiers","haveSearchDetails","has","attributes","matches","matchesWhat","Backbone","Collection","toString","length"],"mappings":"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","file":"../../../scripts/mvc/history/history-contents.js","sourcesContent":["import CONTROLLED_FETCH_COLLECTION from \"mvc/base/controlled-fetch-collection\";\nimport HDA_MODEL from \"mvc/history/hda-model\";\nimport HDCA_MODEL from \"mvc/history/hdca-model\";\nimport HISTORY_PREFS from \"mvc/history/history-preferences\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport AJAX_QUEUE from \"utils/ajax-queue\";\n\n//==============================================================================\nvar _super = CONTROLLED_FETCH_COLLECTION.PaginatedCollection;\n/** @class Backbone collection for history content.\n *      NOTE: history content seems like a dataset collection, but differs in that it is mixed:\n *          each element can be either an HDA (dataset) or a DatasetCollection and co-exist on\n *          the same level.\n *      Dataset collections on the other hand are not mixed and (so far) can only contain either\n *          HDAs or child dataset collections on one level.\n *      This is why this does not inherit from any of the DatasetCollections (currently).\n */\nvar HistoryContents = _super.extend(BASE_MVC.LoggableMixin).extend({\n    _logNamespace: \"history\",\n\n    // ........................................................................ set up\n    limitPerPage: 500,\n\n    /** @type {Integer} how many contents per call to fetch when using progressivelyFetchDetails */\n    limitPerProgressiveFetch: 500,\n\n    /** @type {String} order used here and when fetching from server */\n    order: \"hid\",\n\n    /** root api url */\n    urlRoot: `${Galaxy.root}api/histories`,\n\n    /** complete api url */\n    url: function() {\n        return `${this.urlRoot}/${this.historyId}/contents`;\n    },\n\n    /** Set up */\n    initialize: function(models, options) {\n        options = options || {};\n        _super.prototype.initialize.call(this, models, options);\n\n        this.history = options.history || null;\n        this.setHistoryId(options.historyId || null);\n        /** @type {Boolean} does this collection contain and fetch deleted elements */\n        this.includeDeleted = options.includeDeleted || this.includeDeleted;\n        /** @type {Boolean} does this collection contain and fetch non-visible elements */\n        this.includeHidden = options.includeHidden || this.includeHidden;\n\n        // backbonejs uses collection.model.prototype.idAttribute to determine if a model is *already* in a collection\n        //  and either merged or replaced. In this case, our 'model' is a function so we need to add idAttribute\n        //  manually here - if we don't, contents will not merge but be replaced/swapped.\n        this.model.prototype.idAttribute = \"type_id\";\n    },\n\n    // ........................................................................ composite collection\n    /** since history content is a mix, override model fn into a factory, creating based on history_content_type */\n    model: function(attrs, options) {\n        if (attrs.history_content_type === \"dataset\") {\n            return new HDA_MODEL.HistoryDatasetAssociation(attrs, options);\n        } else if (attrs.history_content_type === \"dataset_collection\") {\n            switch (attrs.collection_type) {\n                case \"list\":\n                    return new HDCA_MODEL.HistoryListDatasetCollection(attrs, options);\n                case \"paired\":\n                    return new HDCA_MODEL.HistoryPairDatasetCollection(attrs, options);\n                case \"list:paired\":\n                    return new HDCA_MODEL.HistoryListPairedDatasetCollection(attrs, options);\n                case \"list:list\":\n                    return new HDCA_MODEL.HistoryListOfListsDatasetCollection(attrs, options);\n            }\n            // This is a hack inside a hack:\n            // Raise a plain object with validationError to fake a model.validationError\n            // (since we don't have a model to use validate with)\n            // (the outer hack being the mixed content/model function in this collection)\n            var msg = `Unknown collection_type: ${attrs.collection_type}`;\n            console.warn(msg, attrs);\n            return { validationError: msg };\n        }\n        return {\n            validationError: `Unknown history_content_type: ${attrs.history_content_type}`\n        };\n    },\n\n    setHistoryId: function(newId) {\n        this.historyId = newId;\n        this._setUpWebStorage();\n    },\n\n    /** Set up client side storage. Currently PersistanStorage keyed under 'history:<id>' */\n    _setUpWebStorage: function(initialSettings) {\n        // TODO: use initialSettings\n        if (!this.historyId) {\n            return;\n        }\n        this.storage = new HISTORY_PREFS.HistoryPrefs({\n            id: HISTORY_PREFS.HistoryPrefs.historyStorageKey(this.historyId)\n        });\n        this.trigger(\"new-storage\", this.storage, this);\n\n        this.on({\n            \"include-deleted\": function(newVal) {\n                this.storage.includeDeleted(newVal);\n            },\n            \"include-hidden\": function(newVal) {\n                this.storage.includeHidden(newVal);\n            }\n        });\n\n        this.includeDeleted = this.storage.includeDeleted() || false;\n        this.includeHidden = this.storage.includeHidden() || false;\n        return this;\n    },\n\n    // ........................................................................ common queries\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: _.extend(_.clone(_super.prototype.comparators), {\n        name: BASE_MVC.buildComparator(\"name\", { ascending: true }),\n        \"name-dsc\": BASE_MVC.buildComparator(\"name\", {\n            ascending: false\n        }),\n        hid: BASE_MVC.buildComparator(\"hid\", { ascending: false }),\n        \"hid-asc\": BASE_MVC.buildComparator(\"hid\", { ascending: true })\n    }),\n\n    /** Get every model in this collection not in a 'ready' state (running). */\n    running: function() {\n        return this.filter(c => !c.inReadyState());\n    },\n\n    /** return contents that are not ready and not deleted/hidden */\n    runningAndActive: function() {\n        return this.filter(\n            c =>\n                !c.inReadyState() &&\n                c.get(\"visible\") &&\n                // TODO: deletedOrPurged?\n                !c.get(\"deleted\")\n        );\n    },\n\n    /** Get the model with the given hid\n     *  @param {Int} hid the hid to search for\n     *  @returns {HistoryDatasetAssociation} the model with the given hid or undefined if not found\n     */\n    getByHid: function(hid) {\n        // note: there *can* be more than one content with a given hid, this finds the first based on order\n        return this.findWhere({ hid: hid });\n    },\n\n    /** return true if all contents have details */\n    haveDetails: function() {\n        return this.all(c => c.hasDetails());\n    },\n\n    // ........................................................................ hidden / deleted\n    /** return a new contents collection of only hidden items */\n    hidden: function() {\n        return this.filter(c => c.hidden());\n    },\n\n    /** return a new contents collection of only hidden items */\n    deleted: function() {\n        return this.filter(c => c.get(\"deleted\"));\n    },\n\n    /** return a new contents collection of only hidden items */\n    visibleAndUndeleted: function() {\n        return this.filter(\n            c =>\n                c.get(\"visible\") &&\n                // TODO: deletedOrPurged?\n                !c.get(\"deleted\")\n        );\n    },\n\n    /** create a setter in order to publish the change */\n    setIncludeDeleted: function(setting, options) {\n        if (_.isBoolean(setting) && setting !== this.includeDeleted) {\n            this.includeDeleted = setting;\n            if (_.result(options, \"silent\")) {\n                return;\n            }\n            this.trigger(\"include-deleted\", setting, this);\n        }\n    },\n\n    /** create a setter in order to publish the change */\n    setIncludeHidden: function(setting, options) {\n        if (_.isBoolean(setting) && setting !== this.includeHidden) {\n            this.includeHidden = setting;\n            options = options || {};\n            if (_.result(options, \"silent\")) {\n                return;\n            }\n            this.trigger(\"include-hidden\", setting, this);\n        }\n    },\n\n    // ........................................................................ ajax\n    // ............ controlled fetch collection\n    /** override to get expanded ids from sessionStorage and pass to API as details */\n    fetch: function(options) {\n        options = options || {};\n        if (this.historyId && !options.details) {\n            var prefs = HISTORY_PREFS.HistoryPrefs.get(this.historyId).toJSON();\n            if (!_.isEmpty(prefs.expandedIds)) {\n                options.details = _.values(prefs.expandedIds).join(\",\");\n            }\n        }\n        return _super.prototype.fetch.call(this, options);\n    },\n\n    // ............. ControlledFetch stuff\n    /** override to include the API versioning flag */\n    _buildFetchData: function(options) {\n        return _.extend(_super.prototype._buildFetchData.call(this, options), {\n            v: \"dev\"\n        });\n    },\n\n    /** Extend to include details and version */\n    _fetchParams: _super.prototype._fetchParams.concat([\n        // TODO: remove (the need for) both\n        /** version */\n        \"v\",\n        /** dataset ids to get full details of */\n        \"details\"\n    ]),\n\n    /** override to add deleted/hidden filters */\n    _buildFetchFilters: function(options) {\n        var superFilters = _super.prototype._buildFetchFilters.call(this, options) || {};\n        var filters = {};\n        if (!this.includeDeleted) {\n            filters.deleted = false;\n            filters.purged = false;\n        }\n        if (!this.includeHidden) {\n            filters.visible = true;\n        }\n        return _.defaults(superFilters, filters);\n    },\n\n    // ............ paginated collection\n    getTotalItemCount: function() {\n        return this.history.contentsShown();\n    },\n\n    // ............ history contents specific ajax\n    /** override to filter requested contents to those updated after the Date 'since' */\n    fetchUpdated: function(since, options) {\n        if (since) {\n            options = options || { filters: {} };\n            options.remove = false;\n            options.filters = {\n                \"update_time-ge\": since.toISOString(),\n                // workflows will produce hidden datasets (non-output datasets) that still\n                // need to be updated in the collection or they'll update forever\n                // we can remove the default visible filter by using an 'empty' value\n                visible: \"\"\n            };\n        }\n        return this.fetch(options);\n    },\n\n    /** fetch all the deleted==true contents of this collection */\n    fetchDeleted: function(options) {\n        options = options || {};\n        var self = this;\n        options.filters = _.extend(options.filters, {\n            // all deleted, purged or not\n            deleted: true,\n            purged: undefined\n        });\n        options.remove = false;\n\n        self.trigger(\"fetching-deleted\", self);\n        return self.fetch(options).always(() => {\n            self.trigger(\"fetching-deleted-done\", self);\n        });\n    },\n\n    /** fetch all the visible==false contents of this collection */\n    fetchHidden: function(options) {\n        options = options || {};\n        var self = this;\n        options.filters = _.extend(options.filters, {\n            visible: false\n        });\n        options.remove = false;\n\n        self.trigger(\"fetching-hidden\", self);\n        return self.fetch(options).always(() => {\n            self.trigger(\"fetching-hidden-done\", self);\n        });\n    },\n\n    /** fetch detailed model data for all contents in this collection */\n    fetchAllDetails: function(options) {\n        options = options || {};\n        var detailsFlag = { details: \"all\" };\n        options.data = _.extend(options.data || {}, detailsFlag);\n        return this.fetch(options);\n    },\n\n    /** specialty fetch method for retrieving the element_counts of all hdcas in the history */\n    fetchCollectionCounts: function(options) {\n        options = options || {};\n        options.keys = [\"type_id\", \"element_count\"].join(\",\");\n        options.filters = _.extend(options.filters || {}, {\n            history_content_type: \"dataset_collection\"\n        });\n        options.remove = false;\n        return this.fetch(options);\n    },\n\n    // ............. quasi-batch ops\n    // TODO: to batch\n    /** helper that fetches using filterParams then calls save on each fetched using updateWhat as the save params */\n    _filterAndUpdate: function(filterParams, updateWhat) {\n        var self = this;\n        var idAttribute = self.model.prototype.idAttribute;\n        var updateArgs = [updateWhat];\n\n        return self.fetch({ filters: filterParams, remove: false }).then(fetched => {\n            // convert filtered json array to model array\n            fetched = fetched.reduce((modelArray, currJson, i) => {\n                var model = self.get(currJson[idAttribute]);\n                return model ? modelArray.concat(model) : modelArray;\n            }, []);\n            return self.ajaxQueue(\"save\", updateArgs, fetched);\n        });\n    },\n\n    /** using a queue, perform ajaxFn on each of the models in this collection */\n    ajaxQueue: function(ajaxFn, args, collection) {\n        collection = collection || this.models;\n        return new AJAX_QUEUE.AjaxQueue(\n            collection\n                .slice()\n                .reverse()\n                .map((content, i) => {\n                    var fn = _.isString(ajaxFn) ? content[ajaxFn] : ajaxFn;\n                    return () => fn.apply(content, args);\n                })\n        ).deferred;\n    },\n\n    /** fetch contents' details in batches of limitPerCall - note: only get searchable details here */\n    progressivelyFetchDetails: function(options) {\n        options = options || {};\n        var deferred = jQuery.Deferred();\n        var self = this;\n        var limit = options.limitPerCall || self.limitPerProgressiveFetch;\n        // TODO: only fetch tags and annotations if specifically requested\n        var searchAttributes = HDA_MODEL.HistoryDatasetAssociation.prototype.searchAttributes;\n        var detailKeys = searchAttributes.join(\",\");\n\n        function _recursivelyFetch(offset) {\n            offset = offset || 0;\n            var _options = _.extend(_.clone(options), {\n                view: \"summary\",\n                keys: detailKeys,\n                limit: limit,\n                offset: offset,\n                reset: offset === 0,\n                remove: false\n            });\n\n            _.defer(() => {\n                self.fetch\n                    .call(self, _options)\n                    .fail(deferred.reject)\n                    .done(response => {\n                        deferred.notify(response, limit, offset);\n                        if (response.length !== limit) {\n                            self.allFetched = true;\n                            deferred.resolve(response, limit, offset);\n                        } else {\n                            _recursivelyFetch(offset + limit);\n                        }\n                    });\n            });\n        }\n        _recursivelyFetch();\n        return deferred;\n    },\n\n    /** does some bit of JSON represent something that can be copied into this contents collection */\n    isCopyable: function(contentsJSON) {\n        var copyableModelClasses = [\"HistoryDatasetAssociation\", \"HistoryDatasetCollectionAssociation\"];\n        return (\n            _.isObject(contentsJSON) && contentsJSON.id && _.contains(copyableModelClasses, contentsJSON.model_class)\n        );\n    },\n\n    /** copy an existing, accessible hda into this collection */\n    copy: function(json) {\n        // TODO: somehow showhorn all this into 'save'\n        var id;\n\n        var type;\n        var contentType;\n        if (_.isString(json)) {\n            id = json;\n            contentType = \"hda\";\n            type = \"dataset\";\n        } else {\n            id = json.id;\n            contentType =\n                {\n                    HistoryDatasetAssociation: \"hda\",\n                    LibraryDatasetDatasetAssociation: \"ldda\",\n                    HistoryDatasetCollectionAssociation: \"hdca\"\n                }[json.model_class] || \"hda\";\n            type = contentType === \"hdca\" ? \"dataset_collection\" : \"dataset\";\n        }\n        var collection = this;\n\n        var xhr = jQuery\n            .ajax(this.url(), {\n                method: \"POST\",\n                contentType: \"application/json\",\n                data: JSON.stringify({\n                    content: id,\n                    source: contentType,\n                    type: type\n                })\n            })\n            .done(response => {\n                collection.add([response], { parse: true });\n            })\n            .fail((error, status, message) => {\n                collection.trigger(\"error\", collection, xhr, {}, \"Error copying contents\", {\n                    type: type,\n                    id: id,\n                    source: contentType\n                });\n            });\n\n        return xhr;\n    },\n\n    /** create a new HDCA in this collection */\n    createHDCA: function(elementIdentifiers, collectionType, name, hideSourceItems, options) {\n        // normally collection.create returns the new model, but we need the promise from the ajax, so we fake create\n        //precondition: elementIdentifiers is an array of plain js objects\n        //  in the proper form to create the collectionType\n        var hdca = this.model({\n            history_content_type: \"dataset_collection\",\n            collection_type: collectionType,\n            history_id: this.historyId,\n            name: name,\n            hide_source_items: hideSourceItems || false,\n            // should probably be able to just send in a bunch of json here and restruct per class\n            // note: element_identifiers is now (incorrectly) an attribute\n            element_identifiers: elementIdentifiers\n            // do not create the model on the client until the ajax returns\n        });\n        return hdca.save(options);\n    },\n\n    // ........................................................................ searching\n    /** return true if all contents have the searchable attributes */\n    haveSearchDetails: function() {\n        return (\n            this.allFetched &&\n            this.all((\n                content // null (which is a valid returned annotation value)\n            ) =>\n                // will return false when using content.has( 'annotation' )\n                //TODO: a bit hacky - formalize\n                _.has(content.attributes, \"annotation\")\n            )\n        );\n    },\n\n    /** return a new collection of contents whose attributes contain the substring matchesWhat */\n    matches: function(matchesWhat) {\n        return this.filter(content => content.matches(matchesWhat));\n    },\n\n    // ........................................................................ misc\n    /** In this override, copy the historyId to the clone */\n    clone: function() {\n        var clone = Backbone.Collection.prototype.clone.call(this);\n        clone.historyId = this.historyId;\n        return clone;\n    },\n\n    /** String representation. */\n    toString: function() {\n        return [\"HistoryContents(\", [this.historyId, this.length].join(), \")\"].join(\"\");\n    }\n});\n\n//==============================================================================\nexport default {\n    HistoryContents: HistoryContents\n};\n"]}