{"version":3,"sources":["mvc/history/history-view.js"],"names":["_super","_listView2","default","ModelListPanel","HistoryView","extend","_logNamespace","HDAViewClass","_hdaLi2","HDAListItemView","HDCAViewClass","_hdcaLi2","HDCAListItemView","collectionClass","_historyContents2","HistoryContents","modelCollectionKey","tagName","className","prototype","emptyMsg","_localization2","noneFoundMsg","initialize","attributes","call","this","linkTarget","detailedFetchTimeoutId","_createDefaultCollection","history","model","freeModel","_clearDetailedFetchTimeout","clearTimeout","_setUpListeners","error","xhr","options","msg","details","clearUpdateTimeout","loading-done","self","_","delay","fetchCollectionCounts","views:ready view:attached view:removed","view","_renderSelectButton","view:attached","scrollTo","loadHistory","errorHandler","contentsOptions","silent","info","historyId","setModel","_historyModel2","History","id","FETCH_COLLECTION_COUNTS_DELAY","always","render","trigger","refreshContents","refresh","$","when","_setUpCollectionListeners","collection","_toggleContentsLoadingIndicator","fetchWithContents","_showLoadingIndicator","speed","callback","$indicator","$el","text","slideDown","isUndefined","fxSpeed","remove","_buildNewRender","$newRender","$where","html","_hideLoadingIndicator","hideSelectors","find","$existing","length","title","classes","faIcon","_renderEmptyMessage","$whereTo","$emptyMsg","$emptyMessage","get","active","empty","append","contents","haveSearchDetails","views","show","$scrollContainer","$list","renderItems","_filterCollection","models","_renderSomeItems","toggle","$paginationControls","searchFor","shouldPaginate","currentPage","last","getLastPage","map","m","_createItemView","push","_renderItemView$el","_filterItem","includeHidden","hidden","includeDeleted","isDeletedOrPurged","_getItemViewClass","contentType","TypeError","_getItemViewOptions","storage","isExpanded","expanded","ownedByCurrUser","_setUpItemViewListeners","panel","listenTo","addExpanded","v","collapsed","removeExpanded","collapseAll","clearExpanded","getSelectedModels","events","clone","click > .controls .prev","click > .controls .next","change > .controls .pages","click .messages [class$=message]","_clickPrevPage","ev","_clickNextPage","_changePageSelect","page","val","currentTarget","toggleShowDeleted","undefined","setIncludeDeleted","fetchCurrentPage","renderAll","toggleShowHidden","store","setIncludeHidden","_firstSearch","inputSelector","searchInput","progressivelyFetchDetails","limit","offset","done","searchItems","clearSearch","status","readyState","isString","errorModal","message","_errorModal2","badGatewayErrorModal","ajaxErrorModal","$messages","children","fadeOut","scrollToHid","hid","scrollToItem","first","viewsWhereModel","ordinalIndicator","number","numStr","charAt","toString","templates","mainTemplate","controlsTemplate","wrapTemplate","controls","pagination","paginationTemplate","_baseMvc2","el"],"mappings":"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","file":"../../../scripts/mvc/history/history-view.js","sourcesContent":["import LIST_VIEW from \"mvc/list/list-view\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport HISTORY_PREFS from \"mvc/history/history-preferences\";\nimport HDA_LI from \"mvc/history/hda-li\";\nimport HDCA_LI from \"mvc/history/hdca-li\";\nimport USER from \"mvc/user/user-model\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/search-input\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar HistoryView = _super.extend(\n    /** @lends HistoryView.prototype */ {\n        _logNamespace: \"history\",\n\n        /** class to use for constructing the HDA views */\n        HDAViewClass: HDA_LI.HDAListItemView,\n        /** class to use for constructing the HDCA views */\n        HDCAViewClass: HDCA_LI.HDCAListItemView,\n        /** class to used for constructing collection of sub-view models */\n        collectionClass: HISTORY_CONTENTS.HistoryContents,\n        /** key of attribute in model to assign to this.collection */\n        modelCollectionKey: \"contents\",\n\n        tagName: \"div\",\n        className: `${_super.prototype.className} history-panel`,\n\n        /** string to display when the collection is empty */\n        emptyMsg: _l(\"This history is empty\"),\n        /** displayed when no items match the search terms */\n        noneFoundMsg: _l(\"No matching datasets found\"),\n        /** string used for search placeholder */\n        searchPlaceholder: _l(\"search datasets\"),\n\n        /** @type {Number} ms to wait after history load to fetch/decorate hdcas with element_count */\n        FETCH_COLLECTION_COUNTS_DELAY: 2000,\n\n        // ......................................................................... SET UP\n        /** Set up the view, bind listeners.\n     *  @param {Object} attributes optional settings for the panel\n     */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            // ---- instance vars\n            // control contents/behavior based on where (and in what context) the panel is being used\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n\n            /** timeout id for detailed fetch of collection counts, etc... */\n            this.detailedFetchTimeoutId = null;\n        },\n\n        /** create and return a collection for when none is initially passed */\n        _createDefaultCollection: function() {\n            // override\n            return new this.collectionClass([], {\n                history: this.model\n            });\n        },\n\n        /** In this override, clear the update timer on the model */\n        freeModel: function() {\n            _super.prototype.freeModel.call(this);\n            if (this.model) {\n                this.model.clearUpdateTimeout();\n            }\n            this._clearDetailedFetchTimeout();\n            return this;\n        },\n\n        /** clear the timeout and the cached timeout id */\n        _clearDetailedFetchTimeout: function() {\n            if (this.detailedFetchTimeoutId) {\n                clearTimeout(this.detailedFetchTimeoutId);\n                this.detailedFetchTimeoutId = null;\n            }\n        },\n\n        /** create any event listeners for the panel\n     *  @fires: rendered:initial    on the first render\n     *  @fires: empty-history       when switching to a history with no contents or creating a new history\n     */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            this.on({\n                error: function(model, xhr, options, msg, details) {\n                    this.errorHandler(model, xhr, options, msg, details);\n                },\n                \"loading-done\": function() {\n                    var self = this;\n                    // after the initial load, decorate with more time consuming fields (like HDCA element_counts)\n                    self.detailedFetchTimeoutId = _.delay(() => {\n                        self.detailedFetchTimeoutId = null;\n                        self.model.contents.fetchCollectionCounts();\n                    }, self.FETCH_COLLECTION_COUNTS_DELAY);\n                },\n                \"views:ready view:attached view:removed\": function(view) {\n                    this._renderSelectButton();\n                },\n                \"view:attached\": function(view) {\n                    this.scrollTo(0);\n                }\n            });\n            // this.on( 'all', function(){ console.debug( arguments ); });\n        },\n\n        // ------------------------------------------------------------------------ loading history/hda models\n        /** load the history with the given id then it's contents, sending ajax options to both */\n        loadHistory: function(historyId, options, contentsOptions) {\n            contentsOptions = _.extend(contentsOptions || { silent: true });\n            this.info(\"loadHistory:\", historyId, options, contentsOptions);\n            var self = this;\n            self.setModel(new HISTORY_MODEL.History({ id: historyId }));\n\n            contentsOptions.silent = true;\n            self.trigger(\"loading\");\n            return self.model.fetchWithContents(options, contentsOptions).always(() => {\n                self.render();\n                self.trigger(\"loading-done\");\n            });\n        },\n\n        /** convenience alias to the model. Updates the item list only (not the history) */\n        refreshContents: function(options) {\n            if (this.model) {\n                return this.model.refresh(options);\n            }\n            // may have callbacks - so return an empty promise\n            return $.when();\n        },\n\n        /** Override to reset web storage when the id changes (since it needs the id) */\n        _setUpCollectionListeners: function() {\n            _super.prototype._setUpCollectionListeners.call(this);\n            return this.listenTo(this.collection, {\n                // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n                \"fetching-more\": function() {\n                    this._toggleContentsLoadingIndicator(true);\n                    this.$emptyMessage().hide();\n                },\n                \"fetching-more-done\": function() {\n                    this._toggleContentsLoadingIndicator(false);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n        _showLoadingIndicator: function(msg, speed, callback) {\n            var $indicator = $('<div class=\"loading-indicator\"/>');\n            this.$el.html($indicator.text(msg).slideDown(!_.isUndefined(speed) ? speed : this.fxSpeed));\n        },\n\n        /** hide the loading indicator */\n        _hideLoadingIndicator: function(speed) {\n            // make speed a bit slower to compensate for slow rendering of up to 500 contents\n            this.$(\".loading-indicator\").slideUp(!_.isUndefined(speed) ? speed : this.fxSpeed + 200, function() {\n                $(this).remove();\n            });\n        },\n\n        /** In this override, add a btn to toggle the selectors */\n        _buildNewRender: function() {\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            this._renderSelectButton($newRender);\n            return $newRender;\n        },\n\n        /** button for starting select mode */\n        _renderSelectButton: function($where) {\n            $where = $where || this.$el;\n            // do not render selector option if no actions\n            if (!this.multiselectActions().length) {\n                return null;\n            }\n            // do not render (and remove even) if nothing to select\n            if (!this.views.length) {\n                this.hideSelectors();\n                $where.find(\".controls .actions .show-selectors-btn\").remove();\n                return null;\n            }\n            // don't bother rendering if there's one already\n            var $existing = $where.find(\".controls .actions .show-selectors-btn\");\n            if ($existing.length) {\n                return $existing;\n            }\n\n            return faIconButton({\n                title: _l(\"Operations on multiple datasets\"),\n                classes: \"show-selectors-btn\",\n                faIcon: \"fa-check-square-o\"\n            }).prependTo($where.find(\".controls .actions\"));\n        },\n\n        /** override to avoid showing intial empty message using contents_active */\n        _renderEmptyMessage: function($whereTo) {\n            var self = this;\n            var $emptyMsg = self.$emptyMessage($whereTo);\n\n            var empty = self.model.get(\"contents_active\").active <= 0;\n            if (empty) {\n                return $emptyMsg\n                    .empty()\n                    .append(self.emptyMsg)\n                    .show();\n            } else if (self.searchFor && self.model.contents.haveSearchDetails() && !self.views.length) {\n                return $emptyMsg\n                    .empty()\n                    .append(self.noneFoundMsg)\n                    .show();\n            }\n            $emptyMsg.hide();\n            return $();\n        },\n\n        /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n        $scrollContainer: function($where) {\n            // override or set via attributes.$scrollContainer\n            return this.$list($where);\n        },\n\n        // ------------------------------------------------------------------------ subviews\n        _toggleContentsLoadingIndicator: function(show) {\n            if (!show) {\n                this.$list()\n                    .find(\".contents-loading-indicator\")\n                    .remove();\n            } else {\n                this.$list().html(\n                    '<div class=\"contents-loading-indicator\">' + '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>'\n                );\n            }\n        },\n\n        /** override to render pagination also */\n        renderItems: function($whereTo) {\n            // console.log( this + '.renderItems-----------------', new Date() );\n            $whereTo = $whereTo || this.$el;\n            var self = this;\n            var $list = self.$list($whereTo);\n\n            // TODO: bootstrap hack to remove orphaned tooltips\n            $(\".tooltip\").remove();\n\n            $list.empty();\n            self.views = [];\n\n            var models = self._filterCollection();\n            if (models.length) {\n                self._renderPagination($whereTo);\n                self.views = self._renderSomeItems(models, $list);\n            } else {\n                // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n                $whereTo.find(\"> .controls .list-pagination\").empty();\n            }\n            self._renderEmptyMessage($whereTo).toggle(!models.length);\n\n            self.trigger(\"views:ready\", self.views);\n            return self.views;\n        },\n\n        /** render pagination controls if not searching and contents says we're paginating */\n        _renderPagination: function($whereTo) {\n            var $paginationControls = $whereTo.find(\"> .controls .list-pagination\");\n            if (this.searchFor || !this.model.contents.shouldPaginate()) return $paginationControls.empty();\n\n            $paginationControls.html(\n                this.templates.pagination(\n                    {\n                        // pagination is 1-based for the user\n                        current: this.model.contents.currentPage + 1,\n                        last: this.model.contents.getLastPage() + 1\n                    },\n                    this\n                )\n            );\n            $paginationControls.find(\"select.pages\").tooltip();\n            return $paginationControls;\n        },\n\n        /** render a subset of the entire collection (client-side pagination) */\n        _renderSomeItems: function(models, $list) {\n            var self = this;\n            var views = [];\n            $list.append(\n                models.map(m => {\n                    var view = self._createItemView(m);\n                    views.push(view);\n                    return self._renderItemView$el(view);\n                })\n            );\n            return views;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** in this override, check if the contents would also display based on includeDeleted/hidden */\n        _filterItem: function(model) {\n            var self = this;\n            var contents = self.model.contents;\n            return (\n                (contents.includeHidden || !model.hidden()) &&\n                (contents.includeDeleted || !model.isDeletedOrPurged()) &&\n                _super.prototype._filterItem.call(self, model)\n            );\n        },\n\n        /** In this override, since history contents are mixed,\n     *      get the appropo view class based on history_content_type\n     */\n        _getItemViewClass: function(model) {\n            var contentType = model.get(\"history_content_type\");\n            switch (contentType) {\n                case \"dataset\":\n                    return this.HDAViewClass;\n                case \"dataset_collection\":\n                    return this.HDCAViewClass;\n            }\n            throw new TypeError(`Unknown history_content_type: ${contentType}`);\n        },\n\n        /** in this override, add a linktarget, and expand if id is in web storage */\n        _getItemViewOptions: function(model) {\n            var options = _super.prototype._getItemViewOptions.call(this, model);\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                expanded: this.model.contents.storage.isExpanded(model.id),\n                hasUser: this.model.ownedByCurrUser()\n            });\n        },\n\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n            //TODO: send from content view: this.model.collection.storage.addExpanded\n            // maintain a list of items whose bodies are expanded\n            return panel.listenTo(view, {\n                expanded: function(v) {\n                    panel.model.contents.storage.addExpanded(v.model);\n                },\n                collapsed: function(v) {\n                    panel.model.contents.storage.removeExpanded(v.model);\n                }\n            });\n        },\n\n        /** override to remove expandedIds from webstorage */\n        collapseAll: function() {\n            this.model.contents.storage.clearExpanded();\n            _super.prototype.collapseAll.call(this);\n        },\n\n        // ------------------------------------------------------------------------ selection\n        /** Override to correctly set the historyId of the new collection */\n        getSelectedModels: function() {\n            var collection = _super.prototype.getSelectedModels.call(this);\n            collection.historyId = this.collection.historyId;\n            return collection;\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .show-selectors-btn\": \"toggleSelectors\",\n            \"click > .controls .prev\": \"_clickPrevPage\",\n            \"click > .controls .next\": \"_clickNextPage\",\n            \"change > .controls .pages\": \"_changePageSelect\",\n            // allow (error) messages to be clicked away\n            \"click .messages [class$=message]\": \"clearMessages\"\n        }),\n\n        _clickPrevPage: function(ev) {\n            this.model.clearUpdateTimeout();\n            this.model.contents.fetchPrevPage();\n        },\n\n        _clickNextPage: function(ev) {\n            this.model.clearUpdateTimeout();\n            this.model.contents.fetchNextPage();\n        },\n\n        _changePageSelect: function(ev) {\n            this.model.clearUpdateTimeout();\n            var page = $(ev.currentTarget).val();\n            this.model.contents.fetchPage(page);\n        },\n\n        /** Toggle and store the deleted visibility and re-render items\n     * @returns {Boolean} new setting\n     */\n        toggleShowDeleted: function(show, options) {\n            show = show !== undefined ? show : !this.model.contents.includeDeleted;\n            var self = this;\n            var contents = self.model.contents;\n            contents.setIncludeDeleted(show, options);\n            self.trigger(\"show-deleted\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** Toggle and store whether to render explicity hidden contents\n     * @returns {Boolean} new setting\n     */\n        toggleShowHidden: function(show, store, options) {\n            // console.log( 'toggleShowHidden', show, store );\n            show = show !== undefined ? show : !this.model.contents.includeHidden;\n            var self = this;\n            var contents = self.model.contents;\n            contents.setIncludeHidden(show, options);\n            self.trigger(\"show-hidden\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** On the first search, if there are no details - load them, then search */\n        _firstSearch: function(searchFor) {\n            var self = this;\n            var inputSelector = \"> .controls .search-input\";\n            this.log(\"onFirstSearch\", searchFor);\n\n            // if the contents already have enough details to search, search and return now\n            if (self.model.contents.haveSearchDetails()) {\n                self.searchItems(searchFor);\n                return;\n            }\n\n            // otherwise, load the details progressively here\n            self.$(inputSelector).searchInput(\"toggle-loading\");\n            // set this now so that only results will show during progress\n            self.searchFor = searchFor;\n            var xhr = self.model.contents\n                .progressivelyFetchDetails({ silent: true })\n                .progress((response, limit, offset) => {\n                    self.renderItems();\n                    self.trigger(\"search:loading-progress\", limit, offset);\n                })\n                .always(() => {\n                    self.$el.find(inputSelector).searchInput(\"toggle-loading\");\n                })\n                .done(() => {\n                    self.searchItems(searchFor, \"force\");\n                });\n        },\n\n        /** clear the search filters and show all views that are normally shown */\n        clearSearch: function(searchFor) {\n            var self = this;\n            if (!self.searchFor) return self;\n            //self.log( 'onSearchClear', self );\n            self.searchFor = \"\";\n            self.trigger(\"search:clear\", self);\n            self.$(\"> .controls .search-query\").val(\"\");\n            // NOTE: silent + render prevents collection update event with merge only\n            // - which causes an empty page due to event handler above\n            self.model.contents.fetchCurrentPage({ silent: true }).done(() => {\n                self.renderItems();\n            });\n            return self;\n        },\n\n        // ........................................................................ error handling\n        /** Event handler for errors (from the panel, the history, or the history's contents)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n        errorHandler: function(model, xhr, options) {\n            //TODO: to mixin or base model\n            // interrupted ajax or no connection\n            if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                // return ERROR_MODAL.offlineErrorModal();\n                // fail silently\n                return;\n            }\n            // otherwise, leave something to report in the console\n            this.error(model, xhr, options);\n            // and feedback to a modal\n            // if sent two strings (and possibly details as 'options'), use those as message and title\n            if (_.isString(model) && _.isString(xhr)) {\n                var message = model;\n                var title = xhr;\n                return ERROR_MODAL.errorModal(message, title, options);\n            }\n            // bad gateway\n            // TODO: possibly to global handler\n            if (xhr && xhr.status === 502) {\n                return ERROR_MODAL.badGatewayErrorModal();\n            }\n            return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n        },\n\n        /** Remove all messages from the panel. */\n        clearMessages: function(ev) {\n            var $target = !_.isUndefined(ev) ? $(ev.currentTarget) : this.$messages().children('[class$=\"message\"]');\n            $target.fadeOut(this.fxSpeed, function() {\n                $(this).remove();\n            });\n            return this;\n        },\n\n        // ........................................................................ scrolling\n        /** Scrolls the panel to show the content sub-view with the given hid.\n     *  @param {Integer} hid    the hid of item to scroll into view\n     *  @returns {HistoryView} the panel\n     */\n        scrollToHid: function(hid) {\n            return this.scrollToItem(_.first(this.viewsWhereModel({ hid: hid })));\n        },\n\n        // ........................................................................ misc\n        /** utility for adding -st, -nd, -rd, -th to numbers */\n        ordinalIndicator: function(number) {\n            var numStr = `${number}`;\n            switch (numStr.charAt(numStr.length - 1)) {\n                case \"1\":\n                    return `${numStr}st`;\n                case \"2\":\n                    return `${numStr}nd`;\n                case \"3\":\n                    return `${numStr}rd`;\n                default:\n                    return `${numStr}th`;\n            }\n        },\n\n        /** Return a string rep of the history */\n        toString: function() {\n            return `HistoryView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nHistoryView.prototype.templates = (() => {\n    var mainTemplate = BASE_MVC.wrapTemplate([\n        // temp container\n        \"<div>\",\n        '<div class=\"controls\"></div>',\n        '<ul class=\"list-items\"></ul>',\n        '<div class=\"empty-message infomessagesmall\"></div>',\n        \"</div>\"\n    ]);\n\n    var controlsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"controls\">',\n            '<div class=\"title\">',\n            '<div class=\"name\"><%- history.name %></div>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            '<div class=\"history-size\"><%- history.nice_size %></div>',\n\n            '<div class=\"actions\"></div>',\n\n            '<div class=\"messages\">',\n            \"<% if( history.deleted && history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged and deleted\"),\n            \"</div>\",\n            \"<% } else if( history.deleted ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been deleted\"),\n            \"</div>\",\n            \"<% } else if( history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged\"),\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( history.message ){ %>\",\n            // should already be localized\n            '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">',\n            \"<%= history.message.text %>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\",\n\n            // add tags and annotations\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"search\">',\n            '<div class=\"search-input\"></div>',\n            \"</div>\",\n\n            '<div class=\"list-actions\">',\n            '<div class=\"btn-group\">',\n            '<button class=\"select-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"All\"),\n            \"</button>\",\n            '<button class=\"deselect-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"None\"),\n            \"</button>\",\n            \"</div>\",\n            '<div class=\"list-action-menu btn-group\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"list-pagination form-inline\"></div>',\n            \"</div>\"\n        ],\n        \"history\"\n    );\n\n    var paginationTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>',\n            '<select class=\"pages form-control\" ',\n            'title=\"',\n            _l(\"Click to open and select a page. Begin typing a page number to select it\"),\n            '\">',\n            \"<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>\",\n            '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>',\n            \"<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages\",\n            \"</option>\",\n            \"<% }); %>\",\n            \"</select>\",\n            '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>'\n        ],\n        \"pages\"\n    );\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        el: mainTemplate,\n        controls: controlsTemplate,\n        pagination: paginationTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    HistoryView: HistoryView\n};\n"]}