{"version":3,"sources":["mvc/history/history-content-model.js"],"names":["HistoryContentMixin","defaults","history_id","history_content_type","hid","visible","this","get","isVisible","includeDeleted","includeHidden","idAttribute","hidden","urlRoot","Galaxy","root","url","hide","options","jQuery","when","save","toString","join"],"mappings":"sQAOIA,GAEAC,UAEIC,WAAY,KAEZC,qBAAsB,KAEtBC,IAAK,KAELC,SAAS,GARbJ,YAAAA,UAIIE,OAAAA,WACA,OAAAG,KAAAC,IAAA,YASJC,UAAA,SAAAC,EAAAC,GACAC,IAAAA,GAAa,EAsBT,OANKF,IAAmBH,KAAKC,IAAI,aAAcD,KAAKC,IAAI,YAd5DC,GAAA,GAEAI,GAAQN,KAAWC,IAAA,aACfC,GAAQ,GAiBDA,GAMXK,QAAYC,OAAOC,KAAnB,iBAZIC,IAAA,WACIR,IAAAA,EAAAA,KAAAA,QAAAF,KAAAC,IAAA,cAAAC,aAAAF,KAAAC,IAAA,wBAAAC,KAAAF,KAAAC,IACH,MAEGC,OAAAA,GAmBRS,KAAM,SAASC,GAdf,OAAAZ,KAAAC,IAAA,WAGAM,KAAYC,MAAOC,SAAnB,GAAAG,GAFAC,OAAAC,QAKAJ,OAAAA,SAAKE,GACD,OAAAZ,KAAIU,IAAAA,WAGGA,OAAPI,OAeOd,KAAKe,MAAOhB,SAAS,GAAQa,IAThCI,SAAA,WACH,OAAAhB,KAAAC,IAAA,WAAAD,KAAAC,IAAA,OAAAD,KAAAC,IAAA,SAAAgB,KAAA,kBAMGvB,oBAAOmB","file":"../../../scripts/mvc/history/history-content-model.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\n/** @class Mixin for HistoryContents content (HDAs, HDCAs).\n */\nvar HistoryContentMixin = {\n    /** default attributes for a model */\n    defaults: {\n        /** parent (containing) history */\n        history_id: null,\n        /** some content_type (HistoryContents can contain mixed model classes) */\n        history_content_type: null,\n        /** indicating when/what order the content was generated in the context of the history */\n        hid: null,\n        /** whether the user wants the content shown (visible) */\n        visible: true\n    },\n\n    // ........................................................................ mixed content element\n    // In order to be part of a MIXED bbone collection, we can't rely on the id\n    //  (which may collide btwn models of different classes)\n    // Instead, use type_id which prefixes the history_content_type so the bbone collection can differentiate\n    idAttribute: \"type_id\",\n\n    // ........................................................................ common queries\n    /** the more common alias of visible */\n    hidden: function() {\n        return !this.get(\"visible\");\n    },\n\n    //TODO: remove\n    /** based on includeDeleted, includeHidden (gen. from the container control),\n     *      would this ds show in the list of ds's?\n     *  @param {Boolean} includeDeleted are we showing deleted hdas?\n     *  @param {Boolean} includeHidden are we showing hidden hdas?\n     */\n    isVisible: function(includeDeleted, includeHidden) {\n        var isVisible = true;\n        if (!includeDeleted && (this.get(\"deleted\") || this.get(\"purged\"))) {\n            isVisible = false;\n        }\n        if (!includeHidden && !this.get(\"visible\")) {\n            isVisible = false;\n        }\n        return isVisible;\n    },\n\n    // ........................................................................ ajax\n    //TODO?: these are probably better done on the leaf classes\n    /** history content goes through the 'api/histories' API */\n    urlRoot: `${Galaxy.root}api/histories/`,\n\n    /** full url spec. for this content */\n    url: function() {\n        var url = `${this.urlRoot + this.get(\"history_id\")}/contents/${this.get(\"history_content_type\")}s/${this.get(\n            \"id\"\n        )}`;\n        return url;\n    },\n\n    /** save this content as not visible */\n    hide: function(options) {\n        if (!this.get(\"visible\")) {\n            return jQuery.when();\n        }\n        return this.save({ visible: false }, options);\n    },\n    /** save this content as visible */\n    unhide: function(options) {\n        if (this.get(\"visible\")) {\n            return jQuery.when();\n        }\n        return this.save({ visible: true }, options);\n    },\n\n    // ........................................................................ misc\n    toString: function() {\n        return [this.get(\"type_id\"), this.get(\"hid\"), this.get(\"name\")].join(\":\");\n    }\n};\n\n//==============================================================================\nexport default {\n    HistoryContentMixin: HistoryContentMixin\n};\n"]}