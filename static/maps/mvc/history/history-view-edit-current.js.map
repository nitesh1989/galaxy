{"version":3,"sources":["mvc/history/history-view-edit-current.js"],"names":["HistoryViewPrefs","_baseMvc2","default","SessionStorageModel","extend","defaults","tagsEditorShown","annotationEditorShown","scrollPosition","toString","JSON","stringify","this","toJSON","storageKey","_super","_historyViewEdit2","HistoryViewEdit","CurrentHistoryView","className","prototype","HDCAViewClass","emptyMsg","_localization2","attributes","_","id","initialize","call","panelStack","currentContentId","_setUpListeners","panel","preferences","set","loadCurrentHistory","loadHistory","url","Galaxy","root","switchToHistory","user","isAnonymous","trigger","$","when","historyId","createNewHistory","setModel","render","model","log","checkForUpdates","_setUpModelListeners","listenTo","change:nice_size change:size","arguments","change:id","once","_setUpCollectionListeners","collection","storage","includeHidden","oldState","removeItemView","$where","$el","_buildNewRender","_setUpBehaviors","_debouncedScrollCaptureHandler","debounce","scrollTop","$scrollContainer","off","on","$newRender","_renderQuotaMessage","find","prependTo","$whereTo","_renderTags","templates","quotaMsg","tagsEditor","toggle","hidden","_renderAnnotation","get","annotationEditor","_swapNewRender","delay","pos","scrollTo","_attachItems","addItemView","view","_setCurrentContentById","options","_setUpItemViewListeners","_collapseDrilldownPanel","expanded:drilldown","v","drilldown","_expandDrilldownPanel","collapsed:drilldown","setCurrentContent","removeClass","viewFromModelId","$controls","$list","hide","parentName","delegateEvents","appendTo","$toolMenu","add","show","events","clone","click .uploader-link","ev","upload","click .get-data-link","pathToMatch","fullpath","useToURLRegexMap","display","click","listenToGalaxy","galaxy","center-frame:load","data","hdaId","edit","report_error","rerun","show_params","regex","use","quotaMeter","connectToQuotaMeter","result","match","center-panel:load","$target","showQuotaMessage","fadeOut","fxSpeed","hideQuotaMessage","isOverQuota","clearMessages","isUndefined","$messages","children","currentTarget","not","remove","$msg","is","slideDown","self","slideUp","deleteHidden","confirm","contents","visible","deleted","purged","done","renderItems","jQuery","quotaMsgTemplate","_filterAndUpdate","wrapTemplate"],"mappings":"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","file":"../../../scripts/mvc/history/history-view-edit-current.js","sourcesContent":["import HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_VIEW_EDIT from \"mvc/history/history-view-edit\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n// ============================================================================\n/** session storage for history panel preferences (and to maintain state)\n */\nvar HistoryViewPrefs = BASE_MVC.SessionStorageModel.extend(\n    /** @lends HistoryViewPrefs.prototype */ {\n        defaults: {\n            /** should the tags editor be shown or hidden initially? */\n            tagsEditorShown: false,\n            /** should the annotation editor be shown or hidden initially? */\n            annotationEditorShown: false,\n            ///** what is the currently focused content (dataset or collection) in the current history?\n            // *      (the history panel will highlight and scroll to the focused content view)\n            // */\n            //focusedContentId : null\n            /** Current scroll position */\n            scrollPosition: 0\n        },\n        toString: function() {\n            return `HistoryViewPrefs(${JSON.stringify(this.toJSON())})`;\n        }\n    }\n);\n\n/** key string to store panel prefs (made accessible on class so you can access sessionStorage directly) */\nHistoryViewPrefs.storageKey = function storageKey() {\n    return \"history-panel\";\n};\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\nvar _super = HISTORY_VIEW_EDIT.HistoryViewEdit;\n// used in root/index.mako\n/** @class View/Controller for the user's current history model as used in the history\n *      panel (current right hand panel) of the analysis page.\n *\n *  The only history panel that:\n *      will poll for updates.\n *      displays datasets in reverse hid order.\n */\nvar CurrentHistoryView = _super.extend(\n    /** @lends CurrentHistoryView.prototype */ {\n        className: `${_super.prototype.className} current-history-panel`,\n\n        /** override to use drilldown (and not foldout) for how collections are displayed */\n        HDCAViewClass: _super.prototype.HDCAViewClass.extend({\n            foldoutStyle: \"drilldown\"\n        }),\n\n        emptyMsg: [\n            _l(\"This history is empty\"),\n            \". \",\n            _l(\"You can \"),\n            '<a class=\"uploader-link\" href=\"javascript:void(0)\">',\n            _l(\"load your own data\"),\n            \"</a>\",\n            _l(\" or \"),\n            '<a class=\"get-data-link\" href=\"javascript:void(0)\">',\n            _l(\"get data from an external source\"),\n            \"</a>\"\n        ].join(\"\"),\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events */\n        initialize: function(attributes) {\n            attributes = attributes || {};\n\n            // ---- persistent preferences\n            /** maintain state / preferences over page loads */\n            this.preferences = new HistoryViewPrefs(\n                _.extend(\n                    {\n                        id: HistoryViewPrefs.storageKey()\n                    },\n                    _.pick(attributes, _.keys(HistoryViewPrefs.prototype.defaults))\n                )\n            );\n\n            _super.prototype.initialize.call(this, attributes);\n\n            /** sub-views that will overlay this panel (collections) */\n            this.panelStack = [];\n\n            /** id of currently focused content */\n            this.currentContentId = attributes.currentContentId || null;\n            //NOTE: purposely not sent to localstorage since panel recreation roughly lines up with a reset of this value\n        },\n\n        /** Override to cache the current scroll position with a listener */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n\n            var panel = this;\n            // reset scroll position when there's a new history\n            this.on(\"new-model\", () => {\n                panel.preferences.set(\"scrollPosition\", 0);\n            });\n        },\n\n        // ------------------------------------------------------------------------ loading history/item models\n        // TODO: next three more appropriate moved to the app level\n        /** (re-)loads the user's current history & contents w/ details */\n        loadCurrentHistory: function() {\n            return this.loadHistory(null, {\n                url: `${Galaxy.root}history/current_history_json`\n            });\n        },\n\n        /** loads a history & contents w/ details and makes them the current history */\n        switchToHistory: function(historyId, attributes) {\n            if (Galaxy.user.isAnonymous()) {\n                this.trigger(\"error\", _l(\"You must be logged in to switch histories\"), _l(\"Anonymous user\"));\n                return $.when();\n            }\n            return this.loadHistory(historyId, {\n                url: `${Galaxy.root}history/set_as_current?id=${historyId}`\n            });\n        },\n\n        /** creates a new history on the server and sets it as the user's current history */\n        createNewHistory: function(attributes) {\n            if (Galaxy.user.isAnonymous()) {\n                this.trigger(\"error\", _l(\"You must be logged in to create histories\"), _l(\"Anonymous user\"));\n                return $.when();\n            }\n            return this.loadHistory(null, {\n                url: `${Galaxy.root}history/create_new_current`\n            });\n        },\n\n        /** release/free/shutdown old models and set up panel for new models */\n        setModel: function(model, attributes, render) {\n            _super.prototype.setModel.call(this, model, attributes, render);\n            if (this.model && this.model.id) {\n                this.log(\"checking for updates\");\n                this.model.checkForUpdates();\n            }\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ history/content event listening\n        /** listening for history events */\n        _setUpModelListeners: function() {\n            _super.prototype._setUpModelListeners.call(this);\n            // re-broadcast any model change events so that listeners don't have to re-bind to each history\n            return this.listenTo(this.model, {\n                \"change:nice_size change:size\": function() {\n                    this.trigger(\"history-size-change\", this, this.model, arguments);\n                },\n                \"change:id\": function() {\n                    this.once(\"loading-done\", function() {\n                        this.model.checkForUpdates();\n                    });\n                }\n            });\n        },\n\n        /** listening for collection events */\n        _setUpCollectionListeners: function() {\n            _super.prototype._setUpCollectionListeners.call(this);\n            // if a hidden item is created (gen. by a workflow), moves thru the updater to the ready state,\n            //  then: remove it from the collection if the panel is set to NOT show hidden datasets\n            this.listenTo(this.collection, \"state:ready\", function(model, newState, oldState) {\n                if (!model.get(\"visible\") && !this.collection.storage.includeHidden()) {\n                    this.removeItemView(model);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** override to add a handler to capture the scroll position when the parent scrolls */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            // console.log( '_setUpBehaviors', this.$scrollContainer( $where ).get(0), this.$list( $where ) );\n            // we need to call this in _setUpBehaviors which is called after render since the $el\n            // may not be attached to $el.parent and $scrollContainer() may not work\n            var panel = this;\n            _super.prototype._setUpBehaviors.call(panel, $where);\n\n            // cache the handler to remove and re-add so we don't pile up the handlers\n            if (!this._debouncedScrollCaptureHandler) {\n                this._debouncedScrollCaptureHandler = _.debounce(function scrollCapture() {\n                    // cache the scroll position (only if visible)\n                    if (panel.$el.is(\":visible\")) {\n                        panel.preferences.set(\"scrollPosition\", $(this).scrollTop());\n                    }\n                }, 40);\n            }\n\n            panel\n                .$scrollContainer($where)\n                .off(\"scroll\", this._debouncedScrollCaptureHandler)\n                .on(\"scroll\", this._debouncedScrollCaptureHandler);\n            return panel;\n        },\n\n        /** In this override, handle null models and move the search input to the top */\n        _buildNewRender: function() {\n            if (!this.model) {\n                return $();\n            }\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            $newRender.find(\".search\").prependTo($newRender.find(\"> .controls\"));\n            this._renderQuotaMessage($newRender);\n            return $newRender;\n        },\n\n        /** render the message displayed when a user is over quota and can't run jobs */\n        _renderQuotaMessage: function($whereTo) {\n            $whereTo = $whereTo || this.$el;\n            return $(this.templates.quotaMsg({}, this)).prependTo($whereTo.find(\".messages\"));\n        },\n\n        /** In this override, get and set current panel preferences when editor is used */\n        _renderTags: function($where) {\n            var panel = this;\n            // render tags and show/hide based on preferences\n            _super.prototype._renderTags.call(panel, $where);\n            if (panel.preferences.get(\"tagsEditorShown\")) {\n                panel.tagsEditor.toggle(true);\n            }\n            // store preference when shown or hidden\n            panel.listenTo(panel.tagsEditor, \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\", tagsEditor => {\n                panel.preferences.set(\"tagsEditorShown\", tagsEditor.hidden);\n            });\n        },\n\n        /** In this override, get and set current panel preferences when editor is used */\n        _renderAnnotation: function($where) {\n            var panel = this;\n            // render annotation and show/hide based on preferences\n            _super.prototype._renderAnnotation.call(panel, $where);\n            if (panel.preferences.get(\"annotationEditorShown\")) {\n                panel.annotationEditor.toggle(true);\n            }\n            // store preference when shown or hidden\n            panel.listenTo(\n                panel.annotationEditor,\n                \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\",\n                annotationEditor => {\n                    panel.preferences.set(\"annotationEditorShown\", annotationEditor.hidden);\n                }\n            );\n        },\n\n        /** Override to scroll to cached position (in prefs) after swapping */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            var panel = this;\n            _.delay(() => {\n                var pos = panel.preferences.get(\"scrollPosition\");\n                if (pos) {\n                    panel.scrollTo(pos, 0);\n                }\n            }, 10);\n            //TODO: is this enough of a delay on larger histories?\n\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** Override to add the current-content highlight class to currentContentId's view */\n        _attachItems: function($whereTo) {\n            _super.prototype._attachItems.call(this, $whereTo);\n            var panel = this;\n            if (panel.currentContentId) {\n                panel._setCurrentContentById(panel.currentContentId);\n            }\n            return this;\n        },\n\n        /** Override to remove any drill down panels */\n        addItemView: function(model, collection, options) {\n            var view = _super.prototype.addItemView.call(this, model, collection, options);\n            if (!view) {\n                return view;\n            }\n            if (this.panelStack.length) {\n                return this._collapseDrilldownPanel();\n            }\n            return view;\n        },\n\n        // ------------------------------------------------------------------------ collection sub-views\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n            // use pub-sub to: handle drilldown expansion and collapse\n            return panel.listenTo(view, {\n                \"expanded:drilldown\": function(v, drilldown) {\n                    this._expandDrilldownPanel(drilldown);\n                },\n                \"collapsed:drilldown\": function(v, drilldown) {\n                    this._collapseDrilldownPanel(drilldown);\n                }\n            });\n        },\n\n        /** display 'current content': add a visible highlight and store the id of a content item */\n        setCurrentContent: function(view) {\n            this.$(\".history-content.current-content\").removeClass(\"current-content\");\n            if (view) {\n                view.$el.addClass(\"current-content\");\n                this.currentContentId = view.model.id;\n            } else {\n                this.currentContentId = null;\n            }\n        },\n\n        /** find the view with the id and then call setCurrentContent on it */\n        _setCurrentContentById: function(id) {\n            var view = this.viewFromModelId(id) || null;\n            this.setCurrentContent(view);\n        },\n\n        /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n        _expandDrilldownPanel: function(drilldown) {\n            this.panelStack.push(drilldown);\n            // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n            this.$controls()\n                .add(this.$list())\n                .hide();\n            drilldown.parentName = this.model.get(\"name\");\n            drilldown\n                .delegateEvents()\n                .render()\n                .$el.appendTo(this.$el);\n        },\n\n        /** Handle drilldown close by freeing the panel and re-rendering this panel */\n        _collapseDrilldownPanel: function(drilldown) {\n            this.panelStack.pop();\n            //TODO: MEM: free the panel\n            this.$controls()\n                .add(this.$list())\n                .show();\n        },\n\n        // ........................................................................ panel events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            // the two links in the empty message\n            \"click .uploader-link\": function(ev) {\n                Galaxy.upload.show(ev);\n            },\n            \"click .get-data-link\": function(ev) {\n                var $toolMenu = $(\".toolMenuContainer\");\n                $toolMenu.parent().scrollTop(0);\n                $toolMenu.find('span:contains(\"Get Data\")').click();\n            }\n        }),\n\n        // ........................................................................ external objects/MVC\n        listenToGalaxy: function(galaxy) {\n            this.listenTo(galaxy, {\n                // when the galaxy_main iframe is loaded with a new page,\n                // compare the url to the following list and if there's a match\n                // pull the id from url and indicate in the history view that\n                // the dataset with that id is the 'current'ly active dataset\n                \"center-frame:load\": function(data) {\n                    var pathToMatch = data.fullpath;\n                    var hdaId = null;\n                    var useToURLRegexMap = {\n                        display: /datasets\\/([a-f0-9]+)\\/display/,\n                        edit: /datasets\\/([a-f0-9]+)\\/edit/,\n                        report_error: /dataset\\/errors\\?id=([a-f0-9]+)/,\n                        rerun: /tool_runner\\/rerun\\?id=([a-f0-9]+)/,\n                        show_params: /datasets\\/([a-f0-9]+)\\/show_params/\n                        // no great way to do this here? (leave it in the dataset event handlers above?)\n                        // 'visualization' : 'visualization',\n                    };\n                    _.find(useToURLRegexMap, (regex, use) => {\n                        // grab the more specific match result (1), save, and use it as the find flag\n                        hdaId = _.result(pathToMatch.match(regex), 1);\n                        return hdaId;\n                    });\n                    // need to type mangle to go from web route to history contents\n                    this._setCurrentContentById(hdaId ? `dataset-${hdaId}` : null);\n                },\n                // when the center panel is given a new view, clear the current indicator\n                \"center-panel:load\": function(view) {\n                    this._setCurrentContentById();\n                }\n            });\n        },\n\n        //TODO: remove quota meter from panel and remove this\n        /** add listeners to an external quota meter (mvc/user/user-quotameter.js) */\n        connectToQuotaMeter: function(quotaMeter) {\n            if (!quotaMeter) {\n                return this;\n            }\n            // show/hide the 'over quota message' in the history when the meter tells it to\n            this.listenTo(quotaMeter, \"quota:over\", this.showQuotaMessage);\n            this.listenTo(quotaMeter, \"quota:under\", this.hideQuotaMessage);\n\n            // having to add this to handle re-render of hview while overquota (the above do not fire)\n            this.on(\"rendered rendered:initial\", function() {\n                if (quotaMeter && quotaMeter.isOverQuota()) {\n                    this.showQuotaMessage();\n                }\n            });\n            return this;\n        },\n\n        /** Override to preserve the quota message */\n        clearMessages: function(ev) {\n            var $target = !_.isUndefined(ev) ? $(ev.currentTarget) : this.$messages().children('[class$=\"message\"]');\n            $target = $target.not(\".quota-message\");\n            $target.fadeOut(this.fxSpeed, function() {\n                $(this).remove();\n            });\n            return this;\n        },\n\n        /** Show the over quota message (which happens to be in the history panel).\n     */\n        showQuotaMessage: function() {\n            var $msg = this.$(\".quota-message\");\n            if ($msg.is(\":hidden\")) {\n                $msg.slideDown(this.fxSpeed);\n            }\n        },\n\n        /** Hide the over quota message (which happens to be in the history panel).\n     */\n        hideQuotaMessage: function() {\n            var $msg = this.$(\".quota-message\");\n            if (!$msg.is(\":hidden\")) {\n                $msg.slideUp(this.fxSpeed);\n            }\n        },\n\n        // ........................................................................ options menu\n        //TODO: remove to batch\n        /** unhide any hidden datasets */\n        unhideHidden: function() {\n            var self = this;\n            if (confirm(_l(\"Really unhide all hidden datasets?\"))) {\n                // get all hidden, regardless of deleted/purged\n                return self.model.contents\n                    ._filterAndUpdate({ visible: false, deleted: \"\", purged: \"\" }, { visible: true })\n                    .done(() => {\n                        // TODO: would be better to render these as they're unhidden instead of all at once\n                        if (!self.model.contents.includeHidden) {\n                            self.renderItems();\n                        }\n                    });\n            }\n            return jQuery.when();\n        },\n\n        /** delete any hidden datasets */\n        deleteHidden: function() {\n            var self = this;\n            if (confirm(_l(\"Really delete all hidden datasets?\"))) {\n                return self.model.contents._filterAndUpdate(\n                    // get all hidden, regardless of deleted/purged\n                    { visible: false, deleted: \"\", purged: \"\" },\n                    // both delete *and* unhide them\n                    { deleted: true, visible: true }\n                );\n            }\n            return jQuery.when();\n        },\n\n        /** Return a string rep of the history */\n        toString: function() {\n            return `CurrentHistoryView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nCurrentHistoryView.prototype.templates = (() => {\n    var quotaMsgTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"quota-message errormessage\">',\n            _l(\"You are over your disk quota\"),\n            \". \",\n            _l(\"Tool execution is on hold until your disk usage drops below your allocated quota\"),\n            \".\",\n            \"</div>\"\n        ],\n        \"history\"\n    );\n    return _.extend(_.clone(_super.prototype.templates), {\n        quotaMsg: quotaMsgTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    CurrentHistoryView: CurrentHistoryView\n};\n"]}