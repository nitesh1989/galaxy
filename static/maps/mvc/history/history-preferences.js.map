{"version":3,"sources":["mvc/history/history-preferences.js"],"names":["HistoryPrefs","default","SessionStorageModel","extend","defaults","expandedIds","show_deleted","show_hidden","addExpanded","model","this","get","current","id","save","isExpanded","contentId","allExpanded","_","values","clearExpanded","set","includeDeleted","val","isUndefined","toString","storageKeyPrefix","historyStorageKey","historyId","Error","clearAll","key","indexOf","sessionStorage","removeItem"],"mappings":"oJAMIA,uDAAeC,QAASC,oBAAoBC,QAGxCC,UAEIC,eACAC,cAAc,EACdC,aAAa,GATzBC,YAAA,SAAAC,GAEIT,IAAAA,EAAeU,KAAAC,IAAA,eACfC,EAAAH,EAAAI,IAAAJ,EAAAE,IAAqC,MACjCD,KAAAI,KAAA,cAAAF,IAIIN,eAAAA,SAHMG,GAINF,IAAAA,EAAaG,KAAAC,IAAA,sBANgBC,EAAAH,EAAAI,IAqB7BH,KAAKI,KAAK,cAAeF,IAVzBG,WAAA,SAAAC,GACA,OAAIJ,EAAAA,OAAUF,KAAKC,IAAI,eAAvBK,GAAA,IAGHC,YAfgC,WA6B7B,OAAOC,EAAEC,OAAOT,KAAKC,IAAI,iBAVzBS,cAAIR,WACJF,KAAAW,IAAOT,mBAgBXU,eAAgB,SAASC,GAPrB,OA7B6BL,EAAAM,YAAAD,IAwCzBb,KAAKW,IAAI,eAAgBE,GAXtBL,KAAEC,IAAO,iBAGpBC,cAAe,SAAAG,GAKX,OArC6BL,EAAAM,YAAAD,IAgDzBb,KAAKW,IAAI,cAAeE,GAX5Bb,KAAAC,IAAA,gBAGIc,SAAA,WACH,MAAA,gBAAAf,KAAAG,GAAA,OAMDa,iBAAOF,WAGPG,kBAAO,SAAPC,GAlD6B,IAAAA,EAiEzB,MAAM,IAAIC,MAAJ,kDAA4DD,GAVzE,OAAA5B,EAAA0B,iBAAAE,GAKDF,IAAAA,SAAkBE,GAad,OAAO,IAAI5B,GAXfa,GAAAb,EAAA2B,kBAAAC,MAKIE,SAAA,SAAAF,GACA,IAAA,IAAO5B,KAAAA,eAXf,IAAA+B,EAAAC,QAAAhC,EAAA0B,mBAyBgBO,eAAeC,WAAWH,iBAHtCD,aAAU9B","file":"../../../scripts/mvc/history/history-preferences.js","sourcesContent":["import BASE_MVC from \"mvc/base-mvc\";\n\nvar logNamespace = \"history\";\n\n// ============================================================================\n/** session storage for individual history preferences */\nvar HistoryPrefs = BASE_MVC.SessionStorageModel.extend(\n    /** @lends HistoryPrefs.prototype */ {\n        //TODO:?? move to user prefs?\n        defaults: {\n            //TODO:?? expandedIds to array?\n            expandedIds: {},\n            show_deleted: false,\n            show_hidden: false\n        },\n\n        /** add an hda id to the hash of expanded hdas */\n        addExpanded: function(model) {\n            //TODO: use type_id and not model\n            var current = this.get(\"expandedIds\");\n            current[model.id] = model.get(\"id\");\n            this.save(\"expandedIds\", current);\n        },\n\n        /** remove an hda id from the hash of expanded hdas */\n        removeExpanded: function(model) {\n            var current = this.get(\"expandedIds\");\n            delete current[model.id];\n            this.save(\"expandedIds\", current);\n        },\n\n        isExpanded: function(contentId) {\n            return _.result(this.get(\"expandedIds\"), contentId, false);\n        },\n\n        allExpanded: function() {\n            return _.values(this.get(\"expandedIds\"));\n        },\n\n        clearExpanded: function() {\n            this.set(\"expandedIds\", {});\n        },\n\n        includeDeleted: function(val) {\n            // moving the invocation here so other components don't need to know the key\n            // TODO: change this key later\n            if (!_.isUndefined(val)) {\n                this.set(\"show_deleted\", val);\n            }\n            return this.get(\"show_deleted\");\n        },\n\n        includeHidden: function(val) {\n            // TODO: change this key later\n            if (!_.isUndefined(val)) {\n                this.set(\"show_hidden\", val);\n            }\n            return this.get(\"show_hidden\");\n        },\n\n        toString: function() {\n            return `HistoryPrefs(${this.id})`;\n        }\n    },\n    {\n        // ........................................................................ class vars\n        // class lvl for access w/o instantiation\n        storageKeyPrefix: \"history:\",\n\n        /** key string to store each histories settings under */\n        historyStorageKey: function historyStorageKey(historyId) {\n            if (!historyId) {\n                throw new Error(`HistoryPrefs.historyStorageKey needs valid id: ${historyId}`);\n            }\n            // single point of change\n            return HistoryPrefs.storageKeyPrefix + historyId;\n        },\n\n        /** return the existing storage for the history with the given id (or create one if it doesn't exist) */\n        get: function get(historyId) {\n            return new HistoryPrefs({\n                id: HistoryPrefs.historyStorageKey(historyId)\n            });\n        },\n\n        /** clear all history related items in sessionStorage */\n        clearAll: function clearAll(historyId) {\n            for (var key in sessionStorage) {\n                if (key.indexOf(HistoryPrefs.storageKeyPrefix) === 0) {\n                    sessionStorage.removeItem(key);\n                }\n            }\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    HistoryPrefs: HistoryPrefs\n};\n"]}