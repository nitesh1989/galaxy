{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["reset_tool_search","initValue","tool_menu_frame","$","contents","length","document","this","removeClass","Toastr","find","hide","show","each","attr","hasClass","val","add_node_icon","$to_el","nodeType","window","workflow_globals","iconStyle","$icon","addClass","initialize","options","set","css","hide_overview","show_overview","app","urls","eventObj","success_callback","self","check_changes_in_active_form","before","has_changes","hide_modal","_utils2","default","url","id","close_editor","workflow","success","do_close","text","message","onbeforeunload","errlist","show_modal","i","v","Cancel","save_current_workflow","body","append","location","name","stored","show_message","errors","rectify_workflow_outputs","request","response","err_msg","Ok","focus","keyup","value","showWorkflowParameters","timer","error","setTimeout","tool_search","q","data","s","lastValue","n","index","parent","this_label","next","no_visible_tools","map","is","_workflowCanvas2","reset","datatypes","parse","ajax","Galaxy","root","async","responseText","datatypes_mapping","JSON","ext_to_type","class_to_classes","_workflowLoadAjax","type_to_type","from_simple","fit_canvas_to_nodes","draw_overview","scroll_to_nodes","_","upgrade_message","step_id","m","details","nodes","Continue","beforeSubmit","make_popupmenu","Save","Save As","rename_annotation","type","workflow_name","rename_name","workflow_annotation","workflow_data","workflow_save_as","done","undefined","fail","edit_workflow_outputs","clear_active_node","Run","Edit Attributes","Auto Re-layout","overview_size","width","height","Close","workflow_index","search_input","jStorage","get","op","bind","e","d","offsetParent","offset","new_size","Math","max","offsetX","opo","left","offsetY","top","click","workflows","last_expanded","slideUp","wrap","slideDown","_buildToolPanelWorkflows","rename_async","tooltip","onclick","title","Copy","add_node_for_subworkflow","$section","ButtonIcon","icon","cls","step_count","copy_into_workflow","workflowId","buttons","upgrade_messages","$add","latest_id","copy","cc","cv","k","parseInt","vv","node","activate_node","_workflowManager2","add_node_for_tool","tool_id","merge","add_node_for_module","load_workflow","create_node","dataType","_moduleInitAjax","cache","addlist","request_data","parameter_re","workflow_parameters","wf_parm_container","deepeach","matches","post_job_actions","action_arguments","content_id","out_terminal","output_terminals","wf_parm_box","html","new_parameter_content","showAttributes","config_form","inputs","form_matches","match","content","$el","pja","action_argument","arg_matches","concat","element","inArray","push","isSubType","child","substring","prebuildNode","$f","tmp","$container","_workflowIcons2","appendTo","o","position","p","_workflowForms2","form","emit","debug","prependTo","scrollTop","node_changed","canvas_manager","title_text","$title","x","_workflowNode2","terminal","redraw","destroy","po","y"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Workflow from \"mvc/workflow/workflow-manager\";\nimport WorkflowCanvas from \"mvc/workflow/workflow-canvas\";\nimport Node from \"mvc/workflow/workflow-node\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nimport FormWrappers from \"mvc/workflow/workflow-forms\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport async_save_text from \"utils/async-save-text\";\nimport * as Toastr from \"libs/toastr\";\nimport \"ui/editable-text\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = WorkflowIcons[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = (window.workflow_globals.app = this);\n        this.options = options;\n        this.urls = (options && options.urls) || {};\n        var close_editor = () => {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = () => {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\n                    \"Close workflow editor\",\n                    \"There are unsaved changes to your workflow which will be lost.\",\n                    {\n                        Cancel: hide_modal,\n                        \"Save Changes\": function() {\n                            save_current_workflow(null, do_close);\n                        }\n                    },\n                    {\n                        \"Don't Save\": do_close\n                    }\n                );\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = (eventObj, success_callback) => {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            Utils.request({\n                url: `${Galaxy.root}api/workflows/${self.options.id}`,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, (i, v) => {\n                            $(\"<li/>\")\n                                .text(v)\n                                .appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function(response) {\n                    window.show_modal(\"Saving workflow failed.\", response.err_msg, { Ok: hide_modal });\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\")\n            .click(function() {\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup(function() {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if (this.value.length < 3) {\n                    reset_tool_search(false);\n                } else if (this.value != this.lastValue) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(() => {\n                        $.get(\n                            self.urls.tool_search,\n                            { q: q },\n                            data => {\n                                // input.removeClass(config.loadingClass);\n                                // Show live-search if results and search-term aren't empty\n                                $(\"#search-no-results\").hide();\n                                // Hide all tool sections.\n                                $(\".toolSectionWrapper\").hide();\n                                // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                $(\".toolSectionWrapper\")\n                                    .find(\".toolTitle\")\n                                    .hide();\n                                if (data.length != 0) {\n                                    // Map tool ids to element ids and join them.\n                                    var s = $.map(data, (n, i) => `link-${n}`);\n                                    // First pass to show matching tools and their parents.\n                                    $(s).each((index, id) => {\n                                        // Add class to denote match.\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .addClass(\"search_match\");\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .show();\n                                    });\n                                    // Hide labels that have no visible children.\n                                    $(\".toolPanelLabel\").each(function() {\n                                        var this_label = $(this);\n                                        var next = this_label.next();\n                                        var no_visible_tools = true;\n                                        // Look through tools following label and, if none are visible, hide label.\n                                        while (next.length !== 0 && next.hasClass(\"toolTitle\")) {\n                                            if (next.is(\":visible\")) {\n                                                no_visible_tools = false;\n                                                break;\n                                            } else {\n                                                next = next.next();\n                                            }\n                                        }\n                                        if (no_visible_tools) {\n                                            this_label.hide();\n                                        }\n                                    });\n                                } else {\n                                    $(\"#search-no-results\").show();\n                                }\n                                $(\"#search-spinner\").hide();\n                            },\n                            \"json\"\n                        );\n                    }, 400);\n                }\n                this.lastValue = this.value;\n            });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new WorkflowCanvas(\n            this,\n            $(\"#canvas-viewport\"),\n            $(\"#overview\")\n        );\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes`,\n                async: false\n            }).responseText\n        );\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes/mapping`,\n                async: false\n            }).responseText\n        );\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, (step, step_id) => {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += `<li>${step.errors}</li>`;\n                    }\n                    _.each(data.upgrade_messages[step_id], m => {\n                        details += `<li>${m}</li>`;\n                    });\n                    if (details) {\n                        upgrade_message += `<li>Step ${parseInt(step_id, 10) + 1}: ${self.workflow.nodes[step_id]\n                            .name}<ul>${details}</ul></li>`;\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Issues loading this workflow\",\n                        `Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>${upgrade_message}</ul></p>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu &&\n            make_popupmenu($(\"#workflow-options-button\"), {\n                Save: save_current_workflow,\n                \"Save As\": workflow_save_as,\n                Run: function() {\n                    window.location = `${Galaxy.root}workflow/run?id=${self.options.id}`;\n                },\n                \"Edit Attributes\": function() {\n                    self.workflow.clear_active_node();\n                },\n                \"Auto Re-layout\": layout_editor,\n                Close: close_editor\n            });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $(\n                '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                    '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n            );\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function() {\n                    var rename_name =\n                        $(\"#workflow_rename\").val().length > 0\n                            ? $(\"#workflow_rename\").val()\n                            : `SavedAs_${self.workflow.name}`;\n                    var rename_annotation = $(\"#wf_annotation\").val().length > 0 ? $(\"#wf_annotation\").val() : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function() {\n                                return JSON.stringify(self.workflow.to_simple());\n                            }\n                        }\n                    })\n                        .done(id => {\n                            window.onbeforeunload = undefined;\n                            window.location = `${Galaxy.root}workflow/editor?id=${id}`;\n                            hide_modal();\n                        })\n                        .fail(() => {\n                            hide_modal();\n                            alert(\"Saving this workflow failed. Please contact this site's administrator.\");\n                        });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content += `<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step ${node.id} - ${node.name}</div>`;\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${output.name}' checked /></p>`;\n                        } else {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${output.name}' /></p>`;\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function() {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $.jStorage.set(\"overview-size\", `${new_size}px`);\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(() => {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = () => {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 &&\n            $(\"#left\")\n                .find(\".toolMenu\")\n                .append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function() {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(() => {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        async_save_text(\"workflow-name\", \"workflow-name\", self.urls.rename_async, \"new_name\");\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(() => {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        async_save_text(\n            \"workflow-annotation\",\n            \"workflow-annotation\",\n            self.urls.annotate_async,\n            \"new_annotation\",\n            25,\n            true,\n            4\n        );\n    },\n\n    _buildToolPanelWorkflows: function() {\n        var self = this;\n        var $section = $(\n            '<div class=\"toolSectionWrapper\">' +\n                '<div class=\"toolSectionTitle\">' +\n                '<a href=\"#\"><span>Workflows</span></a>' +\n                \"</div>\" +\n                '<div class=\"toolSectionBody\">' +\n                '<div class=\"toolSectionBg\"/>' +\n                \"</div>\" +\n                \"</div>\"\n        );\n        _.each(this.options.workflows, workflow => {\n            if (workflow.id !== self.options.id) {\n                var copy = new Ui.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Copy and insert individual steps\",\n                    onclick: function() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: \"Warning\",\n                                body: `This will copy ${workflow.step_count} new steps into your workflow.`,\n                                buttons: {\n                                    Cancel: function() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(workflow.id, workflow.name);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\")\n                    .attr(\"href\", \"#\")\n                    .html(workflow.name)\n                    .on(\"click\", () => {\n                        self.add_node_for_subworkflow(workflow.latest_id, workflow.name);\n                    });\n                $section.find(\".toolSectionBg\").append(\n                    $(\"<div/>\")\n                        .addClass(\"toolTitle\")\n                        .append($add)\n                        .append(copy.$el)\n                );\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, (k, v) => {\n                    upgrade_message += `<li>Step ${parseInt(k, 10) + 1}: ${self.workflow.nodes[k].name}<ul>`;\n                    $.each(v, (i, vv) => {\n                        upgrade_message += `<li>${vv}</li>`;\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Subworkflow embedded with changes\",\n                        `Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>${upgrade_message}</ul>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new Workflow(this, $(\"#canvas-container\"));\n    },\n\n    scroll_to_nodes: function() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top;\n        var left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function(workflowId, options) {\n        $.ajax(\n            Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, _: \"true\" },\n                dataType: \"json\",\n                cache: false\n            })\n        );\n    },\n\n    _moduleInitAjax: function(node, request_data) {\n        var self = this;\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/workflows/build_module`,\n            data: request_data,\n            success: function(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    display_file_list: function(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist += `<option value='${out_terminal}'>${out_terminal}</option>`;\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    showWorkflowParameters: function() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, (k, node) => {\n            if (node.config_form && node.config_form.inputs) {\n                Utils.deepeach(node.config_form.inputs, d => {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (k, pja) => {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, (k, action_argument) => {\n                            var arg_matches = action_argument.match(parameter_re);\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, (k, element) => {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, (k, element) => {\n                new_parameter_content += `<div>${element.substring(2, element.length - 1)}</div>`;\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = `${cls}-${node.id}`;\n        var $container = $(`#${cls}`);\n        if (content && $container.find(`#${id}`).length == 0) {\n            var $el = $(`<div id=\"${id}\" class=\"${cls}\"/>`);\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = WorkflowIcons[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new FormWrappers[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\"workflow-view::initialize()\", \"Node not found in workflow.\");\n            }\n        }\n        $(`.${cls}`).hide();\n        $container.find(`#${id}`).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(`<div class='toolFormTitle unselectable'><span class='nodeTitle'>${title_text}</div></div>`);\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new Node(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp = `<div><img height='16' align='middle' src='${Galaxy.root}static/images/loading_small_white_bg.gif'/> loading tool info...</div>`;\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        buttons.append(\n            $(\"<div/>\")\n                .addClass(\"fa-icon-button fa fa-times\")\n                .click(e => {\n                    node.destroy();\n                })\n        );\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f\n            .bind(\"dragstart\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"dragend\", function() {\n                self.workflow.node_changed(this);\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            })\n            .bind(\"dragclickonly\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"drag\", function(e, d) {\n                // Move\n                var po = $(this)\n                    .offsetParent()\n                    .offset();\n\n                var x = d.offsetX - po.left;\n                var y = d.offsetY - po.top;\n                $(this).css({ left: x, top: y });\n                // Redraw\n                $(this)\n                    .find(\".terminal\")\n                    .each(function() {\n                        this.terminal.redraw();\n                    });\n            });\n        return node;\n    }\n});\n"]}