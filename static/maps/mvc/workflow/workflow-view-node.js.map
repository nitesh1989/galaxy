{"version":3,"sources":["mvc/workflow/workflow-view-node.js"],"names":["_","Backbone","View","extend","initialize","options","this","node","output_width","Math","max","$el","width","tool_body","find","remove","newInputsDiv","appendTo","terminalViews","outputViews","render","renderToolLabel","renderToolErrors","css","min","$","text","label","name","errors","addClass","removeClass","updateMaxWidth","newWidth","addRule","append","addDataInput","input","skipResize","body","terminalView","terminalViewClass","_workflowViewTerminals2","default","InputCollectionTerminalView","InputTerminalView","el","terminal","destroy","update","terminalElement","ib","_workflowViewData2","DataInputView","nodeView","prepend","terminalElements","addDataOutput","output","redrawWorkflowOutputs","each","outputView","inputView","output_terminals"],"mappings":"uRAAYA,qLAGGC,SAASC,KAAKC,QACzBC,WAAY,SAASC,GACjBC,KAAKC,KAAOF,EAAQE,KACpBD,KAAKE,aAAeC,KAAKC,IAAI,IAAKJ,KAAKK,IAAIC,SANvCZ,KAOCa,UAAYP,KAAKK,IAAIG,KAAK,iBAC/BR,KAAKO,UAAUC,KAAK,OAAOC,SAC3BT,KAAKU,eAAeC,SAASX,KAAKO,WAClCP,KAAKY,iBACLZ,KAAKa,gBAGTC,OAAQ,WACJd,KAAKe,kBACLf,KAAKgB,mBACLhB,KAAKK,IAAIY,IAAI,QAASd,KAAKe,IAAI,IAAKf,KAAKC,IAAIJ,KAAKK,IAAIC,QAASN,KAAKE,iBAGxEa,gBAAiB,WACbf,KAAKmB,EAAE,cAAcC,KAAKpB,KAAKC,KAAKoB,OAASrB,KAAKC,KAAKqB,OAG3DN,iBAAkB,WACdhB,KAAKC,KAAKsB,OAASvB,KAAKK,IAAImB,SAAS,mBAAqBxB,KAAKK,IAAIoB,YAAY,oBAGnFf,aAAc,WACV,OAAOS,EAAE,UAAUK,SAAS,WAGhCE,eAAgB,SAASC,GACrB3B,KAAKE,aAAeC,KAAKC,IAAIJ,KAAKE,aAAcyB,IAGpDC,QAAS,WAhCT9B,KAAAA,UAAY+B,OAAAV,EAAA,UAASpB,SAAS,UAG1B+B,aAAKvB,SAALwB,EAAsB1B,GACtB,IAAA2B,GAAKzB,EACL0B,IACAA,EAAKrB,KAAAA,EAAAA,WAoCDoB,GAAa,GA/BjB,IAAAE,EAAKnB,KAALH,cAAAmB,EAAAT,MACAa,EACA,sBAAAJ,EAAK1B,WAduB+B,EAAAC,QAAAC,4BAiDlBF,EAAAC,QAAcE,kBA5B5BvB,IAJAD,GAAiBmB,aAAWC,IACxBD,EAAOM,GAAAC,SAAPC,UAlB4BR,EAAA,MAqBhClB,EAKI,CA1B4B,IAAAyB,EAAAP,EAAAM,GAAAC,SA6DxBA,EAASE,OAAOZ,GAhCxBL,EAAAA,iCAPIQ,EAAUX,IAASY,GAtBSlC,KAAAD,KAAAC,KAyDpB8B,MAAOA,IA1BlB/B,KA/B+BY,cAAAmB,EAAAT,MAAAY,EAiE5B,IAAIU,EAAkBV,EAAaM,GA1BnCK,EANK,IAAAC,EAAAT,QAAWU,eAChBH,gBAAef,EAlCaE,MAAAA,EAqExBiB,SAAUhD,KAhClB8B,WAAcE,IAEC3B,IAEP,OADA4B,EAAAA,OAAAA,EAAOgB,QAAOf,EAAdgB,qBACAhB,GAGHiB,cAAA,SAAAC,GACD,IAMIlB,EAAAA,IANekB,EAAKxC,WACxBwB,EAAAC,QAAIF,6BAIJC,EAAAC,QAAIH,qBAEAA,KAAAA,KAAAA,KACHkB,OAAAA,IAEGlB,EAAAA,IAAAA,EAAAA,QAAmBC,gBACflC,OAAAA,EACA8B,gBAAOA,EAAAA,GAF0BiB,SAArChD,OAKAA,KAAAa,YAAI4B,EAAWP,MAAAA,EACfO,KAAAA,UAAAA,OAASE,EAATtC,IAAAwB,OAAAK,EAAAgB,sBAGJG,sBAAKzC,WACLlB,EAAA4D,KAAAtD,KAAI4C,YAAAA,SAAAA,GACJW,EAAIC,0BAIAxB,iBAAAA,SAAYA,GAJhBhC,KAAAC,KAAAwD,iBAAAL,EAAA9B,MAMSkC,OAAAA","file":"../../../scripts/mvc/workflow/workflow-view-node.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport TerminalViews from \"mvc/workflow/workflow-view-terminals\";\nimport DataViews from \"mvc/workflow/workflow-view-data\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        this.node = options.node;\n        this.output_width = Math.max(150, this.$el.width());\n        this.tool_body = this.$el.find(\".toolFormBody\");\n        this.tool_body.find(\"div\").remove();\n        this.newInputsDiv().appendTo(this.tool_body);\n        this.terminalViews = {};\n        this.outputViews = {};\n    },\n\n    render: function() {\n        this.renderToolLabel();\n        this.renderToolErrors();\n        this.$el.css(\"width\", Math.min(250, Math.max(this.$el.width(), this.output_width)));\n    },\n\n    renderToolLabel: function() {\n        this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n    },\n\n    renderToolErrors: function() {\n        this.node.errors ? this.$el.addClass(\"tool-node-error\") : this.$el.removeClass(\"tool-node-error\");\n    },\n\n    newInputsDiv: function() {\n        return $(\"<div/>\").addClass(\"inputs\");\n    },\n\n    updateMaxWidth: function(newWidth) {\n        this.output_width = Math.max(this.output_width, newWidth);\n    },\n\n    addRule: function() {\n        this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n    },\n\n    addDataInput: function(input, body) {\n        var skipResize = true;\n        if (!body) {\n            body = this.$(\".inputs\");\n            // initial addition to node - resize input to help calculate node\n            // width.\n            skipResize = false;\n        }\n        var terminalView = this.terminalViews[input.name];\n        var terminalViewClass =\n            input.input_type == \"dataset_collection\"\n                ? TerminalViews.InputCollectionTerminalView\n                : TerminalViews.InputTerminalView;\n        if (terminalView && !(terminalView instanceof terminalViewClass)) {\n            terminalView.el.terminal.destroy();\n            terminalView = null;\n        }\n        if (!terminalView) {\n            terminalView = new terminalViewClass({\n                node: this.node,\n                input: input\n            });\n        } else {\n            var terminal = terminalView.el.terminal;\n            terminal.update(input);\n            terminal.destroyInvalidConnections();\n        }\n        this.terminalViews[input.name] = terminalView;\n        var terminalElement = terminalView.el;\n        var inputView = new DataViews.DataInputView({\n            terminalElement: terminalElement,\n            input: input,\n            nodeView: this,\n            skipResize: skipResize\n        });\n        var ib = inputView.$el;\n        body.append(ib.prepend(terminalView.terminalElements()));\n        return terminalView;\n    },\n\n    addDataOutput: function(output) {\n        var terminalViewClass = output.collection\n            ? TerminalViews.OutputCollectionTerminalView\n            : TerminalViews.OutputTerminalView;\n        var terminalView = new terminalViewClass({\n            node: this.node,\n            output: output\n        });\n        var outputView = new DataViews.DataOutputView({\n            output: output,\n            terminalElement: terminalView.el,\n            nodeView: this\n        });\n        this.outputViews[output.name] = outputView;\n        this.tool_body.append(outputView.$el.append(terminalView.terminalElements()));\n    },\n\n    redrawWorkflowOutputs: function() {\n        _.each(this.outputViews, outputView => {\n            outputView.redrawWorkflowOutput();\n        });\n    },\n\n    updateDataOutput: function(output) {\n        var outputTerminal = this.node.output_terminals[output.name];\n        outputTerminal.update(output);\n    }\n});\n"]}