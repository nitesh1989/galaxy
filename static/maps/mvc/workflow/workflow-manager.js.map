{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["Workflow","app","canvas_container","this","id_counter","nodes","name","has_changes","Toastr","workflowOutputLabels","$","extend","prototype","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","active_form_has_changes","node","outputName","nodeView","title_text","content_id","prebuildNode","type","add_node","fit_canvas_to_nodes","canvas_manager","draw_overview","id","workflow","remove_node","clear_active_node","attemptUpdateOutputLabel","each","k","v","destroy","wf","create_node","using_workflow_outputs","has_existing_pjas","activate_node","workflow_outputs","length","post_job_actions","pja_id","pja","action_type","element","active_node","node_changed","pjas_to_rem","push","rectify_workflow_outputs","i","pja_name","output_terminals","ot_id","ot","isWorkflowOutput","output_name","self","reload_active_node","to_simple","input_terminals","input_connections","t","connectors","create_pja","c","handle1","action_arguments","attributes","input","input_subworkflow_step_id","undefined","cons","con_dict","act","node_data","tool_version","config_form","version","tool_state","errors","position","uuid","steps","data","offset","max_id","step","top","parseInt","from_simple","initialImport","initialImport_","workflow_output","init_field_data","left","_workflowConnector2","default","connect","other_node","x","addWorkflowOutput","find","Galaxy","root","callout","check_changes_in_active_form","showForm","force","showWorkflowParameters","layout","n_pred","successors","showAttributes","j","node_ids_by_level","pred_k","level_parents","sk","all_nodes","ids","sort","a","b","max_width","css","Math","width","_","redraw","bounds_for_all_nodes","p","xmin","Infinity","xmax","ymin","ymax","h_pad","e","min","max","round_up","n","bounds","parent","xmin_delta","ymin_delta","height","new_pos","ceil"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["import Connector from \"mvc/workflow/workflow-connector\";\nimport * as Toastr from \"libs/toastr\";\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\n                `Workflow contains duplicate workflow output labels ${toLabel}. This must be fixed before it can be saved.`\n            );\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", `wf-node-step-${node.id}`);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function() {\n        var wf = this;\n        $.each(this.nodes, (k, v) => {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, (k, node) => {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, (pja_id, pja) => {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, (k, node) => {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, (pja_id, pja) => {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, (i, pja_name) => {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, (ot_id, ot) => {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[`HideDatasetAction${ot.name}`] = null;\n                                node.post_job_actions[`HideDatasetAction${ot.name}`] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function() {\n        var nodes = {};\n        $.each(this.nodes, (i, node) => {\n            var input_connections = {};\n            $.each(node.input_terminals, (k, t) => {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, (i, c) => {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (i, act) => {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function(data, initialImport_) {\n        var initialImport = initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, (id, step) => {\n            var node = wf.app.prebuildNode(step.type, step.name, step.content_id);\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, (name, workflow_output) => {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], (pja_id, pja) => {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, (id, step) => {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, (k, v) => {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, (l, x) => {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new Connector();\n                        c.connect(other_node.output_terminals[x.output_name], node.input_terminals[k]);\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, (ot_id, ot) => {\n                    if (node.post_job_actions[`HideDatasetAction${ot.name}`] === undefined) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(`.callout.${ot.name}`);\n                        callout.find(\"img\").attr(\"src\", `${Galaxy.root}static/images/fugue/asterisk-small.png`);\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\")\n                .find(\"form\")\n                .submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        this.app.showAttributes();\n    },\n    activate_node: function(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, (id, node) => {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, (id, node) => {\n            $.each(node.input_terminals, (j, t) => {\n                $.each(t.connectors, (k, c) => {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, (i, ids) => {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort((a, b) => $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top);\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, (j, id) => {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, (_, node) => {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function() {\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n        var p;\n        $.each(this.nodes, (id, node) => {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function() {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexport default Workflow;\n"]}