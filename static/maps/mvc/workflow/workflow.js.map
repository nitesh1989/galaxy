{"version":3,"sources":["mvc/workflow/workflow.js"],"names":["mod_toastr","WorkflowItemView","Backbone","View","extend","tagName","initialize","_","bindAll","this","options","timeOut","events","click #show-in-tool-panel","click #delete-workflow","click #rename-workflow","click #copy-workflow","render","$","el","html","_rowTemplate","showInToolPanel","model","set","get","save","window","location","Galaxy","root","wfName","success","remove","renameWorkflow","prompt","oldName","newName","name","copyWorkflow","self","id","wfJson","currentOwner","user","attributes","username","create","error","errorThrown","jqXHR","textStatus","responseJSON","err_msg","show","wfId","escape","at","_templateActions","checkboxHtml","renderTagEditor","TagEditor","_tag2","default","TagsEditor","workflow_mode","trHtml","WorkflowListView","title","setElement","_workflowModel2","WorkflowCollection","collection","done","fetch","appendItem","dragleave","drop","ev","dragover","addClass","unhighlightDropZone","removeClass","e","preventDefault","f","files","i","readWorkflowFiles","reader","FileReader","onload","wf_json","JSON","parse","result","wait","resp","readAsText","_showArgErrors","once","msg_text","_queryStringParsing2","msg_status","header","_templateHeader","templateActions","_templateActionButtons","tableTemplate","$el","_templateWorkflowTable","models","each","item","searchWorkflow","minQueryLength","adjustActiondropdown","workflowItemView","append","confirmDelete","workflow","$el_shared_wf_link","$el_searchinput","$el_tabletr","min_querylen","on","val","query","length","regular_expression","RegExp","test","text","css","_templateNoWorkflow","ImportWorkflowView","getJSON","empty","_mainTemplate","url","myexperiment_target_url"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow.js","sourcesContent":["/** Workflow view */\nimport * as mod_toastr from \"libs/toastr\";\nimport TAGS from \"mvc/tag\";\nimport WORKFLOWS from \"mvc/workflow/workflow-model\";\nimport QueryStringParsing from \"utils/query-string-parsing\";\n/** View of the individual workflows */\nvar WorkflowItemView = Backbone.View.extend({\n    tagName: \"tr\", // name of (orphan) root tag in this.el\n    initialize: function() {\n        _.bindAll(\n            this,\n            \"render\",\n            \"_rowTemplate\",\n            \"renderTagEditor\",\n            \"_templateActions\",\n            \"removeWorkflow\",\n            \"copyWorkflow\"\n        ); // every function that uses 'this' as the current object should be in here\n        mod_toastr.options.timeOut = 1500;\n    },\n\n    events: {\n        \"click #show-in-tool-panel\": \"showInToolPanel\",\n        \"click #delete-workflow\": \"removeWorkflow\",\n        \"click #rename-workflow\": \"renameWorkflow\",\n        \"click #copy-workflow\": \"copyWorkflow\"\n    },\n\n    render: function() {\n        $(this.el).html(this._rowTemplate());\n        return this;\n    },\n\n    showInToolPanel: function() {\n        this.model.set(\"show_in_tool_panel\", !this.model.get(\"show_in_tool_panel\"));\n        this.model.save();\n        // This reloads the whole page, so that the workflow appears in the tool panel.\n        // Ideally we would notify only the tool panel of a change\n        window.location = `${Galaxy.root}workflow`;\n    },\n\n    removeWorkflow: function() {\n        var wfName = this.model.get(\"name\");\n        if (window.confirm(`Are you sure you want to delete workflow '${wfName}'?`)) {\n            this.model.destroy({\n                success: function() {\n                    mod_toastr.success(`Successfully deleted workflow '${wfName}'`);\n                }\n            });\n            this.remove();\n        }\n    },\n\n    renameWorkflow: function() {\n        var oldName = this.model.get(\"name\");\n        var newName = window.prompt(`Enter a new Name for workflow '${oldName}'`, oldName);\n        if (newName) {\n            this.model.save(\n                { name: newName },\n                {\n                    success: function() {\n                        mod_toastr.success(`Successfully renamed workflow '${oldName}' to '${newName}'`);\n                    }\n                }\n            );\n            this.render();\n        }\n    },\n\n    copyWorkflow: function() {\n        var self = this;\n        var oldName = this.model.get(\"name\");\n        $.getJSON(`${this.model.urlRoot}/${this.model.id}/download`, wfJson => {\n            var newName = `Copy of ${oldName}`;\n            var currentOwner = self.model.get(\"owner\");\n            if (currentOwner != Galaxy.user.attributes.username) {\n                newName += ` shared by user ${currentOwner}`;\n            }\n            wfJson.name = newName;\n            self.collection.create(wfJson, {\n                at: 0,\n                wait: true,\n                success: function() {\n                    mod_toastr.success(`Successfully copied workflow '${oldName}' to '${newName}'`);\n                },\n                error: function(model, resp, options) {\n                    // signature seems to have changed over the course of backbone dev\n                    // see https://github.com/jashkenas/backbone/issues/2606#issuecomment-19289483\n                    mod_toastr.error(options.errorThrown);\n                }\n            });\n        }).error((jqXHR, textStatus, errorThrown) => {\n            mod_toastr.error(jqXHR.responseJSON.err_msg);\n        });\n    },\n\n    _rowTemplate: function() {\n        var show = this.model.get(\"show_in_tool_panel\");\n        var wfId = this.model.id;\n        var checkboxHtml = `<input id=\"show-in-tool-panel\" type=\"checkbox\" class=\"show-in-tool-panel\" ${show\n            ? `checked=\"${show}\"`\n            : \"\"} value=\"${wfId}\">`;\n        var trHtml = `<td><div class=\"dropdown\"><button class=\"menubutton\" type=\"button\" data-toggle=\"dropdown\">${_.escape(\n            this.model.get(\"name\")\n        )}<span class=\"caret\"></span></button>${this._templateActions()}</div></td><td><span><div class=\"${wfId} tags-display\"></div></td><td>${this.model.get(\n            \"owner\"\n        ) === Galaxy.user.attributes.username\n            ? \"You\"\n            : this.model.get(\"owner\")}</span></td><td>${this.model.get(\"number_of_steps\")}</td><td>${this.model.get(\n            \"published\"\n        )\n            ? \"Yes\"\n            : \"No\"}</td><td>${checkboxHtml}</td>`;\n        return trHtml;\n    },\n\n    renderTagEditor: function() {\n        var TagEditor = new TAGS.TagsEditor({\n            model: this.model,\n            el: $.find(`.${this.model.id}.tags-display`),\n            workflow_mode: true\n        });\n        TagEditor.toggle(true);\n        TagEditor.render();\n    },\n\n    /** Template for user actions for workflows */\n    _templateActions: function() {\n        if (this.model.get(\"owner\") === Galaxy.user.attributes.username) {\n            return `<ul class=\"dropdown-menu action-dpd\"><li><a href=\"${Galaxy.root}workflow/editor?id=${this.model\n                .id}\">Edit</a></li><li><a href=\"${Galaxy.root}workflow/run?id=${this.model\n                .id}\">Run</a></li><li><a href=\"${Galaxy.root}workflow/sharing?id=${this.model\n                .id}\">Share</a></li><li><a href=\"${Galaxy.root}api/workflows/${this.model\n                .id}/download?format=json-download\">Download</a></li><li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li><li><a id=\"rename-workflow\" style=\"cursor: pointer;\">Rename</a></li><li><a href=\"${Galaxy.root}workflow/display_by_id?id=${this\n                .model.id}\">View</a></li><li><a id=\"delete-workflow\" style=\"cursor: pointer;\">Delete</a></li></ul>`;\n        } else {\n            return `<ul class=\"dropdown-menu action-dpd\"><li><a href=\"${Galaxy.root}workflow/display_by_username_and_slug?username=${this.model.get(\n                \"owner\"\n            )}&slug=${this.model.get(\"slug\")}\">View</a></li><li><a href=\"${Galaxy.root}workflow/run?id=${this.model\n                .id}\">Run</a></li><li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li><li><a class=\"link-confirm-shared-${this\n                .model.id}\" href=\"${Galaxy.root}workflow/sharing?unshare_me=True&id=${this.model\n                .id}\">Remove</a></li></ul>`;\n        }\n    }\n});\n\n/** View of the main workflow list page */\nvar WorkflowListView = Backbone.View.extend({\n    title: \"Workflows\",\n    initialize: function() {\n        this.setElement(\"<div/>\");\n        _.bindAll(this, \"adjustActiondropdown\");\n        this.collection = new WORKFLOWS.WorkflowCollection();\n        this.collection.fetch().done(this.render());\n        this.collection.bind(\"add\", this.appendItem);\n        this.collection.on(\"sync\", this.render, this);\n    },\n\n    events: {\n        dragleave: \"unhighlightDropZone\",\n        drop: \"drop\",\n        dragover: function(ev) {\n            $(\".hidden_description_layer\").addClass(\"dragover\");\n            $(\".menubutton\").addClass(\"background-none\");\n            ev.preventDefault();\n        }\n    },\n\n    unhighlightDropZone: function() {\n        $(\".hidden_description_layer\").removeClass(\"dragover\");\n        $(\".menubutton\").removeClass(\"background-none\");\n    },\n\n    drop: function(e) {\n        // TODO: check that file is valid galaxy workflow\n        this.unhighlightDropZone();\n        e.preventDefault();\n        var files = e.dataTransfer.files;\n        var self = this;\n        for (var i = 0, f; (f = files[i]); i++) {\n            self.readWorkflowFiles(f);\n        }\n    },\n\n    readWorkflowFiles: function(f) {\n        var self = this;\n        var reader = new FileReader();\n        reader.onload = theFile => {\n            var wf_json;\n            try {\n                wf_json = JSON.parse(reader.result);\n            } catch (e) {\n                mod_toastr.error(`Could not read file '${f.name}'. Verify it is a valid Galaxy workflow`);\n                wf_json = null;\n            }\n            if (wf_json) {\n                self.collection.create(wf_json, {\n                    at: 0,\n                    wait: true,\n                    success: function() {\n                        mod_toastr.success(`Successfully imported workflow '${wf_json.name}'`);\n                    },\n                    error: function(model, resp, options) {\n                        mod_toastr.error(options.errorThrown);\n                    }\n                });\n            }\n        };\n        reader.readAsText(f, \"utf-8\");\n    },\n\n    _showArgErrors: _.once(() => {\n        // Parse args out of params, display if there's a message.\n        var msg_text = QueryStringParsing.get(\"message\");\n        var msg_status = QueryStringParsing.get(\"status\");\n        if (msg_status === \"error\") {\n            mod_toastr.error(_.escape(msg_text || \"Unknown Error, please report this to an administrator.\"));\n        } else if (msg_text) {\n            mod_toastr.info(_.escape(msg_text));\n        }\n    }),\n\n    render: function() {\n        // Add workflow header\n        var header = this._templateHeader();\n        // Add the actions buttons\n        var templateActions = this._templateActionButtons();\n        var tableTemplate = this._templateWorkflowTable();\n        this.$el.html(header + templateActions + tableTemplate);\n        var self = this;\n        _(this.collection.models).each(item => {\n            // in case collection is not empty\n            self.appendItem(item);\n            self.confirmDelete(item);\n        }, this);\n        var minQueryLength = 3;\n        this.searchWorkflow(this.$(\".search-wf\"), this.$(\".workflow-search tr\"), minQueryLength);\n        this.adjustActiondropdown();\n        this._showArgErrors();\n        return this;\n    },\n\n    appendItem: function(item) {\n        var workflowItemView = new WorkflowItemView({\n            model: item,\n            collection: this.collection\n        });\n        $(\".workflow-search\").append(workflowItemView.render().el);\n        workflowItemView.renderTagEditor();\n    },\n\n    /** Add confirm box before removing/unsharing workflow */\n    confirmDelete: function(workflow) {\n        var $el_shared_wf_link = this.$(`.link-confirm-shared-${workflow.id}`);\n        $el_shared_wf_link.click(() =>\n            window.confirm(`Are you sure you want to remove the shared workflow '${workflow.attributes.name}'?`)\n        );\n    },\n\n    /** Implement client side workflow search/filtering */\n    searchWorkflow: function($el_searchinput, $el_tabletr, min_querylen) {\n        $el_searchinput.on(\"keyup\", function() {\n            var query = $(this).val();\n            // Filter when query is at least 3 characters\n            // otherwise show all rows\n            if (query.length >= min_querylen) {\n                // Ignore the query's case using 'i'\n                var regular_expression = new RegExp(query, \"i\");\n                $el_tabletr.hide();\n                $el_tabletr\n                    .filter(function() {\n                        // Apply regular expression on each row's text\n                        // and show when there is a match\n                        return regular_expression.test($(this).text());\n                    })\n                    .show();\n            } else {\n                $el_tabletr.show();\n            }\n        });\n    },\n\n    /** Ajust the position of dropdown with respect to table */\n    adjustActiondropdown: function() {\n        $(this.el).on(\"show.bs.dropdown\", function() {\n            $(this.el).css(\"overflow\", \"inherit\");\n        });\n        $(this.el).on(\"hide.bs.dropdown\", function() {\n            $(this.el).css(\"overflow\", \"auto\");\n        });\n    },\n\n    /** Template for no workflow */\n    _templateNoWorkflow: function() {\n        return '<div class=\"wf-nodata\"> You have no workflows. </div>';\n    },\n\n    /** Template for actions buttons */\n    _templateActionButtons: function() {\n        return `<ul class=\"manage-table-actions\"><li><input class=\"search-wf form-control\" type=\"text\" autocomplete=\"off\" placeholder=\"search for workflow...\"></li><li><a class=\"action-button fa fa-plus wf-action\" id=\"new-workflow\" title=\"Create new workflow\" href=\"${Galaxy.root}workflow/create\"></a></li><li><a class=\"action-button fa fa-upload wf-action\" id=\"import-workflow\" title=\"Upload or import workflow\" href=\"${Galaxy.root}workflow/import_workflow\"></a></li></ul>`;\n    },\n\n    /** Template for workflow table */\n    _templateWorkflowTable: function() {\n        var tableHtml =\n            '<table class=\"table colored\"><thead>' +\n            '<tr class=\"header\">' +\n            \"<th>Name</th>\" +\n            \"<th>Tags</th>\" +\n            \"<th>Owner</th>\" +\n            \"<th># of Steps</th>\" +\n            \"<th>Published</th>\" +\n            \"<th>Show in tools panel</th>\" +\n            \"</tr></thead>\";\n        return `${tableHtml}<tbody class=\"workflow-search \"><div class=\"hidden_description_layer\"><p>Drop workflow files here to import</p></tbody></table></div>`;\n    },\n\n    /** Main template */\n    _templateHeader: function() {\n        return (\n            '<div class=\"page-container\">' +\n            '<div class=\"user-workflows wf\">' +\n            '<div class=\"response-message\"></div>' +\n            \"<h2>Your workflows</h2>\" +\n            \"</div>\" +\n            \"</div>\"\n        );\n    }\n});\n\nvar ImportWorkflowView = Backbone.View.extend({\n    initialize: function() {\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Open page to import workflow */\n    render: function() {\n        var self = this;\n        $.getJSON(`${Galaxy.root}workflow/upload_import_workflow`, options => {\n            self.$el.empty().append(self._mainTemplate(options));\n        });\n    },\n\n    /** Template for the import workflow page */\n    _mainTemplate: function(options) {\n        return `<div class='toolForm'><div class='toolFormTitle'>Import Galaxy workflow</div><div class='toolFormBody'><form name='import_workflow' id='import_workflow' action='${Galaxy.root}workflow/upload_import_workflow' enctype='multipart/form-data' method='POST'><div class='form-row'><label>Galaxy workflow URL:</label><input type='text' name='url' class='input-url' value='${options.url}' size='40'><div class='toolParamHelp' style='clear: both;'>If the workflow is accessible via a URL, enter the URL above and click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><label>Galaxy workflow file:</label><div class='form-row-input'><input type='file' name='file_data' class='input-file'/></div><div class='toolParamHelp' style='clear: both;'>If the workflow is in a file on your computer, choose it and then click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><input type='submit' class='primary-button wf-import' name='import_button' value='Import'></div></form><hr/><div class='form-row'><label>Import a Galaxy workflow from myExperiment:</label><div class='form-row-input'><a href='${options.myexperiment_target_url}'> Visit myExperiment</a></div><div class='toolParamHelp' style='clear: both;'>Click the link above to visit myExperiment and browse for Galaxy workflows.</div><div style='clear: both'></div></div></div></div>`;\n    }\n});\n\nexport default {\n    View: WorkflowListView,\n    ImportWorkflowView: ImportWorkflowView\n};\n"]}