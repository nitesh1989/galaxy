{"version":3,"sources":["mvc/workflow/workflow-view-terminals.js"],"names":["window","workflow_globals","TerminalMappingView","Backbone","View","extend","tagName","className","initialize","options","this","$el","tooltip","delay","title","model","bind","_","render","mapOver","isCollection","show","events","click","mouseenter","mouseleave","onMouseEnter","terminal","connected","hide","onMouseLeave","e","css","resetMapping","TerminalView","setupMappingView","terminalMappingClass","onClick","terminalMappingViewClass","terminalMappingView","terminalElements","el","terminalMapping","BaseInputTerminalView","node","input","multiple","name","input_terminals","dropstart","dropend","drop","hover","onDropInit","hasClass","canAccept","d","drag","onDropStart","dropinit","connectors","inner_color","proxy","onDrop","_workflowConnector2","default","redraw","element","length","display","appendTo","append","$","addClass","each","x","t","remove","destroy","top","offset","left","width","InputTerminalView","_workflowTerminals2","TerminalMapping","terminalForInput","InputCollectionTerminalView","BaseOutputTerminalView","output","dragend","onmove","onDrag","po","offsetX","y","offsetY","canvas_manager","get","onDragStart","test","workflow","check_changes_in_active_form","h","c","dragging","OutputTerminal","onDragEnd","connect","connector","available","removeClass","OutputTerminalView","datatypes","type","terminalForOutput","extensions","OutputCollectionTerminalView","collection_type","collection_type_source","OutputCollectionTerminal"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view-terminals.js","sourcesContent":["import Terminals from \"mvc/workflow/workflow-terminals\";\nimport Connector from \"mvc/workflow/workflow-connector\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\nvar TerminalMappingView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"fa-icon-button fa fa-folder-o\",\n    initialize: function(options) {\n        var mapText = \"Run tool in parallel over collection\";\n        this.$el.tooltip({ delay: 500, title: mapText });\n        this.model.bind(\"change\", _.bind(this.render, this));\n    },\n    render: function() {\n        if (this.model.mapOver.isCollection) {\n            this.$el.show();\n        } else {\n            this.$el.hide();\n        }\n    }\n});\n\nvar InputTerminalMappingView = TerminalMappingView.extend({\n    events: {\n        click: \"onClick\",\n        mouseenter: \"onMouseEnter\",\n        mouseleave: \"onMouseLeave\"\n    },\n    onMouseEnter: function(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            this.$el.css(\"color\", \"red\");\n        }\n    },\n    onMouseLeave: function(e) {\n        this.$el.css(\"color\", \"black\");\n    },\n    onClick: function(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            // TODO: Consider prompting...\n            model.terminal.resetMapping();\n        }\n    }\n});\n\nvar TerminalView = Backbone.View.extend({\n    setupMappingView: function(terminal) {\n        var terminalMapping = new this.terminalMappingClass({\n            terminal: terminal\n        });\n        var terminalMappingView = new this.terminalMappingViewClass({\n            model: terminalMapping\n        });\n        terminalMappingView.render();\n        terminal.terminalMappingView = terminalMappingView;\n        this.terminalMappingView = terminalMappingView;\n    },\n    terminalElements: function() {\n        if (this.terminalMappingView) {\n            return [this.terminalMappingView.el, this.el];\n        } else {\n            return [this.el];\n        }\n    }\n});\n\nvar BaseInputTerminalView = TerminalView.extend({\n    className: \"terminal input-terminal\",\n    initialize: function(options) {\n        var node = options.node;\n        var input = options.input;\n        var name = input.name;\n        var terminal = this.terminalForInput(input);\n        if (!terminal.multiple) {\n            this.setupMappingView(terminal);\n        }\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.input_terminals[name] = terminal;\n    },\n    events: {\n        dropinit: \"onDropInit\",\n        dropstart: \"onDropStart\",\n        dropend: \"onDropEnd\",\n        drop: \"onDrop\",\n        hover: \"onHover\"\n    },\n    onDropInit: function(e, d) {\n        var terminal = this.el.terminal;\n        // Accept a dragable if it is an output terminal and has a\n        // compatible type\n        return $(d.drag).hasClass(\"output-terminal\") && terminal.canAccept(d.drag.terminal);\n    },\n    onDropStart: function(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n        }\n    },\n    onDropEnd: function(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n        }\n    },\n    onDrop: function(e, d) {\n        var terminal = this.el.terminal;\n        new Connector(d.drag.terminal, terminal).redraw();\n    },\n    onHover: function() {\n        var element = this.el;\n        var terminal = element.terminal;\n        // If connected, create a popup to allow disconnection\n        if (terminal.connectors.length > 0) {\n            // Create callout\n            var t = $(\"<div class='callout'></div>\")\n                .css({ display: \"none\" })\n                .appendTo(\"body\")\n                .append(\n                    $(\"<div class='button'></div>\").append(\n                        $(\"<div/>\")\n                            .addClass(\"fa-icon-button fa fa-times\")\n                            .click(() => {\n                                $.each(terminal.connectors, (_, x) => {\n                                    if (x) {\n                                        x.destroy();\n                                    }\n                                });\n                                t.remove();\n                            })\n                    )\n                )\n                .bind(\"mouseleave\", function() {\n                    $(this).remove();\n                });\n            // Position it and show\n            t\n                .css({\n                    top: $(element).offset().top - 2,\n                    left: $(element).offset().left - t.width(),\n                    \"padding-right\": $(element).width()\n                })\n                .show();\n        }\n    }\n});\n\nvar InputTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function(input) {\n        return new Terminals.InputTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar InputCollectionTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function(input) {\n        return new Terminals.InputCollectionTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar BaseOutputTerminalView = TerminalView.extend({\n    className: \"terminal output-terminal\",\n    initialize: function(options) {\n        var node = options.node;\n        var output = options.output;\n        var name = output.name;\n        var terminal = this.terminalForOutput(output);\n        this.setupMappingView(terminal);\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.output_terminals[name] = terminal;\n    },\n    events: {\n        drag: \"onDrag\",\n        dragstart: \"onDragStart\",\n        dragend: \"onDragEnd\"\n    },\n    onDrag: function(e, d) {\n        var onmove = () => {\n            var po = $(d.proxy)\n                .offsetParent()\n                .offset();\n\n            var x = d.offsetX - po.left;\n            var y = d.offsetY - po.top;\n            $(d.proxy).css({ left: x, top: y });\n            d.proxy.terminal.redraw();\n            // FIXME: global\n            window.workflow_globals.canvas_manager.update_viewport_overlay();\n        };\n        onmove();\n        $(\"#canvas-container\")\n            .get(0)\n            .scroll_panel.test(e, onmove);\n    },\n    onDragStart: function(e, d) {\n        $(d.available).addClass(\"input-terminal-active\");\n        // Save PJAs in the case of change datatype actions.\n        window.workflow_globals.workflow.check_changes_in_active_form();\n        // Drag proxy div\n        var h = $('<div class=\"drag-terminal\" style=\"position: absolute;\"></div>')\n            .appendTo(\"#canvas-container\")\n            .get(0);\n        // Terminal and connection to display noodle while dragging\n        h.terminal = new Terminals.OutputTerminal({ element: h });\n        var c = new Connector();\n        c.dragging = true;\n        c.connect(this.el.terminal, h.terminal);\n        return h;\n    },\n    onDragEnd: function(e, d) {\n        var connector = d.proxy.terminal.connectors[0];\n        // check_changes_in_active_form may change the state and cause a\n        // the connection to have already been destroyed. There must be better\n        // ways to handle this but the following check fixes some serious GUI\n        // bugs for now.\n        if (connector) {\n            connector.destroy();\n        }\n        $(d.proxy).remove();\n        $(d.available).removeClass(\"input-terminal-active\");\n        $(\"#canvas-container\")\n            .get(0)\n            .scroll_panel.stop();\n    }\n});\n\nvar OutputTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function(output) {\n        var type = output.extensions;\n        var terminal = new Terminals.OutputTerminal({\n            element: this.el,\n            datatypes: type\n        });\n        return terminal;\n    }\n});\n\nvar OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function(output) {\n        var collection_type = output.collection_type;\n        var collection_type_source = output.collection_type_source;\n        var terminal = new Terminals.OutputCollectionTerminal({\n            element: this.el,\n            collection_type: collection_type,\n            collection_type_source: collection_type_source,\n            datatypes: output.extensions\n        });\n        return terminal;\n    }\n});\n\nexport default {\n    InputTerminalView: InputTerminalView,\n    OutputTerminalView: OutputTerminalView,\n    InputCollectionTerminalView: InputCollectionTerminalView,\n    OutputCollectionTerminalView: OutputCollectionTerminalView\n};\n"]}