{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["CanvasManager","app","canvas_viewport","overview","this","cv","cc","find","oc","ov","init_drag","ScrollPanel","panel","$","extend","prototype","self","move","x","y","width","Math","max","height","top","each","scroll_panel","y_adjust","bind","o","p","position","x_adjust","left","e","d","offsetY","workflow","fit_canvas_to_nodes","draw_overview","removeClass","hasClass","o_w","o_h","in_w","new_x_offset","pageX","offset","new_y_offset","pageY","in_h","offsetX","addClass","op","offsetParent","opo","new_size","update_viewport_overlay","cc_pos","css","shift_h","shift_w","size","canvas_el","parent","c","get","getContext","cv_w","cv_h","ceil","attr","strokeStyle","nodes","id","node","lineWidth","node_element","element","w","h","fillStyle","undefined","workflow_outputs","length","fillRect","strokeRect","clearTimeout","test","panel_pos","panel_w","panel_h","viewport","viewport_w","viewport_offset","viewport_h","min_x","min_y","max_y","max_x","p_min_x","p_min_y","p_max_y","p_max_x","moved","nudge","min","t","onmove","timeout","setTimeout","stop","ui"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["function CanvasManager(app, canvas_viewport, overview) {\n    this.app = app;\n    this.cv = canvas_viewport;\n    this.cc = this.cv.find(\"#canvas-container\");\n    this.overview = overview;\n    this.oc = overview.find(\"#overview-canvas\");\n    this.ov = overview.find(\"#overview-viewport\");\n    // Make overview box draggable\n    this.init_drag();\n}\n$.extend(CanvasManager.prototype, {\n    init_drag: function() {\n        var self = this;\n        var move = (x, y) => {\n            x = Math.min(x, self.cv.width() / 2);\n            x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n            y = Math.min(y, self.cv.height() / 2);\n            y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n            self.cc.css({\n                left: x,\n                top: y\n            });\n            self.cv.css({\n                \"background-position-x\": x,\n                \"background-position-y\": y\n            });\n            self.update_viewport_overlay();\n        };\n        // Dragging within canvas background\n        this.cc.each(function() {\n            this.scroll_panel = new ScrollPanel(this);\n        });\n        var x_adjust;\n        var y_adjust;\n        this.cv\n            .bind(\"dragstart\", function() {\n                var o = $(this).offset();\n                var p = self.cc.position();\n                y_adjust = p.top - o.top;\n                x_adjust = p.left - o.left;\n            })\n            .bind(\"drag\", (e, d) => {\n                move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n            })\n            .bind(\"dragend\", () => {\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        this.overview.click(e => {\n            if (self.overview.hasClass(\"blockaclick\")) {\n                self.overview.removeClass(\"blockaclick\");\n            } else {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n\n                var new_x_offset = e.pageX - self.oc.offset().left - self.ov.width() / 2;\n\n                var new_y_offset = e.pageY - self.oc.offset().top - self.ov.height() / 2;\n\n                move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            }\n        });\n        // Dragging for overview pane\n        this.ov\n            .bind(\"drag\", (e, d) => {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n                var new_x_offset = d.offsetX - self.overview.offset().left;\n                var new_y_offset = d.offsetY - self.overview.offset().top;\n                move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n            })\n            .bind(\"dragend\", () => {\n                self.overview.addClass(\"blockaclick\");\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        // Dragging for overview border (resize)\n        $(\"#overview-border\").bind(\"drag\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $(this).css({\n                width: new_size,\n                height: new_size\n            });\n            self.draw_overview();\n        });\n\n        /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n        $(\"#overview-border div\").bind(\"drag\", () => {});\n    },\n    update_viewport_overlay: function() {\n        var cc = this.cc;\n        var cv = this.cv;\n        var oc = this.oc;\n        var ov = this.ov;\n        var in_w = cc.width();\n        var in_h = cc.height();\n        var o_w = oc.width();\n        var o_h = oc.height();\n        var cc_pos = cc.position();\n        ov.css({\n            left: -(cc_pos.left / in_w * o_w),\n            top: -(cc_pos.top / in_h * o_h),\n            // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n            width: cv.width() / in_w * o_w - 2,\n            height: cv.height() / in_h * o_h - 2\n        });\n    },\n    draw_overview: function() {\n        var canvas_el = $(\"#overview-canvas\");\n\n        var size = canvas_el\n            .parent()\n            .parent()\n            .width();\n\n        var c = canvas_el.get(0).getContext(\"2d\");\n        var in_w = $(\"#canvas-container\").width();\n        var in_h = $(\"#canvas-container\").height();\n        var o_h;\n        var shift_h;\n        var o_w;\n        var shift_w;\n        // Fit canvas into overview area\n        var cv_w = this.cv.width();\n        var cv_h = this.cv.height();\n        if (in_w < cv_w && in_h < cv_h) {\n            // Canvas is smaller than viewport\n            o_w = in_w / cv_w * size;\n            shift_w = (size - o_w) / 2;\n            o_h = in_h / cv_h * size;\n            shift_h = (size - o_h) / 2;\n        } else if (in_w < in_h) {\n            // Taller than wide\n            shift_h = 0;\n            o_h = size;\n            o_w = Math.ceil(o_h * in_w / in_h);\n            shift_w = (size - o_w) / 2;\n        } else {\n            // Wider than tall\n            o_w = size;\n            shift_w = 0;\n            o_h = Math.ceil(o_w * in_h / in_w);\n            shift_h = (size - o_h) / 2;\n        }\n        canvas_el.parent().css({\n            left: shift_w,\n            top: shift_h,\n            width: o_w,\n            height: o_h\n        });\n        canvas_el.attr(\"width\", o_w);\n        canvas_el.attr(\"height\", o_h);\n        // Draw overview\n        $.each(this.app.workflow.nodes, (id, node) => {\n            c.fillStyle = \"#D2C099\";\n            c.strokeStyle = \"#D8B365\";\n            c.lineWidth = 1;\n            var node_element = $(node.element);\n            var position = node_element.position();\n            var x = position.left / in_w * o_w;\n            var y = position.top / in_h * o_h;\n            var w = node_element.width() / in_w * o_w;\n            var h = node_element.height() / in_h * o_h;\n            if (node.errors) {\n                c.fillStyle = \"#FFCCCC\";\n                c.strokeStyle = \"#AA6666\";\n            } else if (node.workflow_outputs !== undefined && node.workflow_outputs.length > 0) {\n                c.fillStyle = \"#E8A92D\";\n                c.strokeStyle = \"#E8A92D\";\n            }\n            c.fillRect(x, y, w, h);\n            c.strokeRect(x, y, w, h);\n        });\n        this.update_viewport_overlay();\n    }\n});\n\n// FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\nfunction ScrollPanel(panel) {\n    this.panel = panel;\n}\n$.extend(ScrollPanel.prototype, {\n    test: function(e, onmove) {\n        clearTimeout(this.timeout);\n        var x = e.pageX;\n        var y = e.pageY;\n\n        var // Panel size and position\n        panel = $(this.panel);\n\n        var panel_pos = panel.position();\n        var panel_w = panel.width();\n        var panel_h = panel.height();\n\n        var // Viewport size and offset\n        viewport = panel.parent();\n\n        var viewport_w = viewport.width();\n        var viewport_h = viewport.height();\n        var viewport_offset = viewport.offset();\n\n        var // Edges of viewport (in page coordinates)\n        min_x = viewport_offset.left;\n\n        var min_y = viewport_offset.top;\n        var max_x = min_x + viewport.width();\n        var max_y = min_y + viewport.height();\n\n        var // Legal panel range\n        p_min_x = -(panel_w - viewport_w / 2);\n\n        var p_min_y = -(panel_h - viewport_h / 2);\n        var p_max_x = viewport_w / 2;\n        var p_max_y = viewport_h / 2;\n\n        var // Did the panel move?\n        moved = false;\n\n        var // Constants\n        close_dist = 5;\n\n        var nudge = 23;\n        if (x - close_dist < min_x) {\n            if (panel_pos.left < p_max_x) {\n                var t = Math.min(nudge, p_max_x - panel_pos.left);\n                panel.css(\"left\", panel_pos.left + t);\n                moved = true;\n            }\n        } else if (x + close_dist > max_x) {\n            if (panel_pos.left > p_min_x) {\n                var t = Math.min(nudge, panel_pos.left - p_min_x);\n                panel.css(\"left\", panel_pos.left - t);\n                moved = true;\n            }\n        } else if (y - close_dist < min_y) {\n            if (panel_pos.top < p_max_y) {\n                var t = Math.min(nudge, p_max_y - panel_pos.top);\n                panel.css(\"top\", panel_pos.top + t);\n                moved = true;\n            }\n        } else if (y + close_dist > max_y) {\n            if (panel_pos.top > p_min_y) {\n                var t = Math.min(nudge, panel_pos.top - p_min_x);\n                panel.css(\"top\", `${panel_pos.top - t}px`);\n                moved = true;\n            }\n        }\n        if (moved) {\n            // Keep moving even if mouse doesn't move\n            onmove();\n            var panel = this;\n            this.timeout = setTimeout(() => {\n                panel.test(e, onmove);\n            }, 50);\n        }\n    },\n    stop: function(e, ui) {\n        clearTimeout(this.timeout);\n    }\n});\nexport default CanvasManager;\n"]}