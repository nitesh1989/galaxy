{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["Node","Backbone","Model","extend","initialize","app","attr","this","element","input_terminals","output_terminals","errors","workflow_outputs","getWorkflowOutput","outputName","_","findWhere","output_name","isWorkflowOutput","undefined","removeWorkflowOutput","splice","addWorkflowOutput","label","output","push","labelWorkflowOutput","changed","oldLabel","workflowOutput","workflow","updateOutputLabel","markChanged","connectedOutputTerminals","connectedTerminals","t","connectors","length","hasConnectedOutputTerminals","_connectedTerminals","outputTerminals","connectedMappedInputTerminals","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputTerminals","inputTerminal","isMappedOver","terminals","mapped_outputs","$","each","isCollection","mappedInputTerminals","_mappedTerminals","mapOver","mappedTerminals","hasMappedOverInputTerminals","found","redraw","destroy","k","remove","addClass","make_inactive","get","p","parentNode","make_active","data","type","name","config_form","tool_version","version","tool_state","removeChild","appendChild","tooltip","annotation","post_job_actions","removeClass","uuid","init_field_data","node","nodeView","el","data_outputs","i","update_field_data","data_inputs","unused_outputs","addDataOutput","cur_name","output_view","cur_name_in_data_outputs","data_names","data_name","terminalElement","terminal","x","outputViews","unused_output","wf_output","extensions","pja_in","old_body","new_body","newTerminalViews","input","terminalView","addDataInput","difference","values","terminalViews","unusedView","replaceWith","error","text","b","find","tmp","node_changed"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["import NodeView from \"mvc/workflow/workflow-view-node\";\nvar Node = Backbone.Model.extend({\n    initialize: function(app, attr) {\n        this.app = app;\n        this.element = attr.element;\n        this.input_terminals = {};\n        this.output_terminals = {};\n        this.errors = {};\n        this.workflow_outputs = [];\n    },\n    getWorkflowOutput: function(outputName) {\n        return _.findWhere(this.workflow_outputs, {\n            output_name: outputName\n        });\n    },\n    isWorkflowOutput: function(outputName) {\n        return this.getWorkflowOutput(outputName) != undefined;\n    },\n    removeWorkflowOutput: function(outputName) {\n        while (this.isWorkflowOutput(outputName)) {\n            this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n        }\n    },\n    addWorkflowOutput: function(outputName, label) {\n        if (!this.isWorkflowOutput(outputName)) {\n            var output = { output_name: outputName };\n            if (label) {\n                output[\"label\"] = label;\n            }\n            this.workflow_outputs.push(output);\n            return true;\n        }\n        return false;\n    },\n    labelWorkflowOutput: function(outputName, label) {\n        var changed = false;\n        var oldLabel = null;\n        if (this.isWorkflowOutput(outputName)) {\n            var workflowOutput = this.getWorkflowOutput(outputName);\n            oldLabel = workflowOutput[\"label\"];\n            workflowOutput[\"label\"] = label;\n            changed = oldLabel != label;\n        } else {\n            changed = this.addWorkflowOutput(outputName, label);\n        }\n        if (changed) {\n            this.app.workflow.updateOutputLabel(oldLabel, label);\n            this.markChanged();\n            this.nodeView.redrawWorkflowOutputs();\n        }\n        return changed;\n    },\n    connectedOutputTerminals: function() {\n        return this._connectedTerminals(this.output_terminals);\n    },\n    _connectedTerminals: function(terminals) {\n        var connectedTerminals = [];\n        $.each(terminals, (_, t) => {\n            if (t.connectors.length > 0) {\n                connectedTerminals.push(t);\n            }\n        });\n        return connectedTerminals;\n    },\n    hasConnectedOutputTerminals: function() {\n        // return this.connectedOutputTerminals().length > 0; <- optimized this\n        var outputTerminals = this.output_terminals;\n        for (var outputName in outputTerminals) {\n            if (outputTerminals[outputName].connectors.length > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    connectedMappedInputTerminals: function() {\n        return this._connectedMappedTerminals(this.input_terminals);\n    },\n    hasConnectedMappedInputTerminals: function() {\n        // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n        var inputTerminals = this.input_terminals;\n        for (var inputName in inputTerminals) {\n            var inputTerminal = inputTerminals[inputName];\n            if (inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver()) {\n                return true;\n            }\n        }\n        return false;\n    },\n    _connectedMappedTerminals: function(terminals) {\n        var mapped_outputs = [];\n        $.each(terminals, (_, t) => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                if (t.connectors.length > 0) {\n                    mapped_outputs.push(t);\n                }\n            }\n        });\n        return mapped_outputs;\n    },\n    mappedInputTerminals: function() {\n        return this._mappedTerminals(this.input_terminals);\n    },\n    _mappedTerminals: function(terminals) {\n        var mappedTerminals = [];\n        $.each(terminals, (_, t) => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                mappedTerminals.push(t);\n            }\n        });\n        return mappedTerminals;\n    },\n    hasMappedOverInputTerminals: function() {\n        var found = false;\n        _.each(this.input_terminals, t => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                found = true;\n            }\n        });\n        return found;\n    },\n    redraw: function() {\n        $.each(this.input_terminals, (_, t) => {\n            t.redraw();\n        });\n        $.each(this.output_terminals, (_, t) => {\n            t.redraw();\n        });\n    },\n    destroy: function() {\n        $.each(this.input_terminals, (k, t) => {\n            t.destroy();\n        });\n        $.each(this.output_terminals, (k, t) => {\n            t.destroy();\n        });\n        this.app.workflow.remove_node(this);\n        $(this.element).remove();\n    },\n    make_active: function() {\n        $(this.element).addClass(\"toolForm-active\");\n    },\n    make_inactive: function() {\n        // Keep inactive nodes stacked from most to least recently active\n        // by moving element to the end of parent's node list\n        var element = this.element.get(0);\n        (p => {\n            p.removeChild(element);\n            p.appendChild(element);\n        })(element.parentNode);\n        // Remove active class\n        $(element).removeClass(\"toolForm-active\");\n    },\n    init_field_data: function(data) {\n        if (data.type) {\n            this.type = data.type;\n        }\n        this.name = data.name;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.tool_state = data.tool_state;\n        this.errors = data.errors;\n        this.tooltip = data.tooltip ? data.tooltip : \"\";\n        this.annotation = data.annotation;\n        this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n        this.label = data.label;\n        this.uuid = data.uuid;\n        this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n        var node = this;\n        var nodeView = new NodeView({\n            el: this.element[0],\n            node: node\n        });\n        node.nodeView = nodeView;\n        $.each(data.data_inputs, (i, input) => {\n            nodeView.addDataInput(input);\n        });\n        if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n            nodeView.addRule();\n        }\n        $.each(data.data_outputs, (i, output) => {\n            nodeView.addDataOutput(output);\n        });\n        nodeView.render();\n        this.app.workflow.node_changed(this, true);\n    },\n    update_field_data: function(data) {\n        var node = this;\n        var nodeView = node.nodeView;\n        // remove unused output views and remove pre-existing output views from data.data_outputs,\n        // so that these are not added twice.\n        var unused_outputs = [];\n        // nodeView.outputViews contains pre-existing outputs,\n        // while data.data_output contains what should be displayed.\n        // Now we gather the unused outputs\n        $.each(nodeView.outputViews, (i, output_view) => {\n            var cur_name = output_view.output.name;\n            var data_names = data.data_outputs;\n            var cur_name_in_data_outputs = false;\n            _.each(data_names, data_name => {\n                if (data_name.name == cur_name) {\n                    cur_name_in_data_outputs = true;\n                }\n            });\n            if (cur_name_in_data_outputs === false) {\n                unused_outputs.push(cur_name);\n            }\n        });\n\n        // Remove the unused outputs\n        _.each(unused_outputs, unused_output => {\n            _.each(nodeView.outputViews[unused_output].terminalElement.terminal.connectors, x => {\n                if (x) {\n                    x.destroy(); // Removes the noodle connectors\n                }\n            });\n            nodeView.outputViews[unused_output].remove(); // removes the rendered output\n            delete nodeView.outputViews[unused_output]; // removes the reference to the output\n            delete node.output_terminals[unused_output]; // removes the output terminal\n        });\n        $.each(node.workflow_outputs, (i, wf_output) => {\n            if (wf_output && !node.output_terminals[wf_output.output_name]) {\n                node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n            }\n        });\n        $.each(data.data_outputs, (i, output) => {\n            if (!nodeView.outputViews[output.name]) {\n                nodeView.addDataOutput(output); // add data output if it does not yet exist\n            } else {\n                // the output already exists, but the output formats may have changed.\n                // Therefore we update the datatypes and destroy invalid connections.\n                node.output_terminals[output.name].datatypes = output.extensions;\n                node.output_terminals[output.name].destroyInvalidConnections();\n            }\n        });\n        this.tool_state = data.tool_state;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.errors = data.errors;\n        this.annotation = data[\"annotation\"];\n        this.label = data.label;\n        if (\"post_job_actions\" in data) {\n            // Won't be present in response for data inputs\n            var pja_in = data.post_job_actions;\n            this.post_job_actions = pja_in ? pja_in : {};\n        }\n        node.nodeView.renderToolErrors();\n        // Update input rows\n        var old_body = nodeView.$(\"div.inputs\");\n        var new_body = nodeView.newInputsDiv();\n        var newTerminalViews = {};\n        _.each(data.data_inputs, input => {\n            var terminalView = node.nodeView.addDataInput(input, new_body);\n            newTerminalViews[input.name] = terminalView;\n        });\n        // Cleanup any leftover terminals\n        _.each(_.difference(_.values(nodeView.terminalViews), _.values(newTerminalViews)), unusedView => {\n            unusedView.el.terminal.destroy();\n        });\n        nodeView.terminalViews = newTerminalViews;\n        node.nodeView.render();\n        // In general workflow editor assumes tool outputs don't change in # or\n        // type (not really valid right?) but adding special logic here for\n        // data collection input parameters that can have their collection\n        // change.\n        if (data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[0]) {\n            nodeView.updateDataOutput(data.data_outputs[0]);\n        }\n        old_body.replaceWith(new_body);\n        if (\"workflow_outputs\" in data) {\n            // Won't be present in response for data inputs\n            this.workflow_outputs = workflow_outputs ? workflow_outputs : [];\n        }\n        // If active, reactivate with new config_form\n        this.markChanged();\n        this.redraw();\n    },\n    error: function(text) {\n        var b = $(this.element).find(\".toolFormBody\");\n        b.find(\"div\").remove();\n        var tmp = `<div style='color: red; text-style: italic;'>${text}</div>`;\n        this.config_form = tmp;\n        b.html(tmp);\n        this.app.workflow.node_changed(this);\n    },\n    markChanged: function() {\n        this.app.workflow.node_changed(this);\n    }\n});\nexport default Node;\n"]}