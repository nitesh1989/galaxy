{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["_addLabelAnnotation","form","options","model","attributes","workflow","input","type","inputs","unshift","_addSections","label","fixed","value","node","annotation","area","help","name","i","nodes","n","new_label","id","duplicate","data","match","element_list","input_id","set","trigger","input_element","head_list","datatypes","post_job_actions","output_terminals","output_id","action","visit","head","pja_arg","payload","p_id","d","expanded","action_arguments","slice","Object","keys","ignore","host","String","Boolean","push","window","location","Default","Tool","extensions","input_terminal_names","0","key","1","input_terminals","a","b","output","input_config","flat","getWorkflowOutput","title","attemptUpdateOutputLabel","new_value","onchange","join","Backbone","View","extend","initialize","self","this","_formView2","default","_utils2","merge","request","url","Galaxy","root","content_id","create","update_field_data","success","_toolFormBase2","text_enable","text_disable","initial_errors","cls","initialmodel","process","_customize","resolve","get","postchange","tool_id","version","$","current_state","buildmodel","config_form","tool_version","emit","debug","response","deepeach","error","indexOf","info","textify","__class__","collapsible_value","is_workflow","length","test_param","undefined"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Form from \"mvc/form/form-view\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\n/** Default form wrapper for non-tool modules in the workflow editor. */\nvar Default = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new Form(\n            Utils.merge(options, {\n                onchange: function() {\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/workflows/build_module`,\n                        data: {\n                            id: node.id,\n                            type: node.type,\n                            content_id: node.content_id,\n                            inputs: self.form.data.create()\n                        },\n                        success: function(data) {\n                            node.update_field_data(data);\n                        }\n                    });\n                }\n            })\n        );\n        _addLabelAnnotation(this.form);\n        this.form.render();\n    }\n});\n\n/** Tool form wrapper for the workflow editor. */\nvar Tool = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new ToolFormBase(\n            Utils.merge(options, {\n                text_enable: \"Set in Advance\",\n                text_disable: \"Set at Runtime\",\n                narrow: true,\n                initial_errors: true,\n                cls: \"ui-portlet-narrow\",\n                initialmodel: function(process, form) {\n                    self._customize(form);\n                    process.resolve();\n                },\n                buildmodel: function(process, form) {\n                    form.model.get(\"postchange\")(process, form);\n                },\n                postchange: function(process, form) {\n                    var options = form.model.attributes;\n                    var current_state = {\n                        tool_id: options.id,\n                        tool_version: options.version,\n                        type: \"tool\",\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Sending current state.\", current_state);\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/workflows/build_module`,\n                        data: current_state,\n                        success: function(data) {\n                            form.model.set(data.config_form);\n                            self._customize(form);\n                            form.update(data.config_form);\n                            form.errors(data.config_form);\n                            // This hasn't modified the workflow, just returned\n                            // module information for the tool to update the workflow\n                            // state stored on the client with. User needs to save\n                            // for this to take effect.\n                            node.update_field_data(data);\n                            Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Received new model.\", data);\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Refresh request failed.\", response);\n                            process.reject();\n                        }\n                    });\n                }\n            })\n        );\n    },\n\n    _customize: function(form) {\n        var options = form.model.attributes;\n        Utils.deepeach(options.inputs, input => {\n            if (input.type) {\n                if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                    input.type = \"hidden\";\n                    input.info = `Data input '${input.name}' (${Utils.textify(input.extensions)})`;\n                    input.value = { __class__: \"RuntimeValue\" };\n                } else if (!input.fixed) {\n                    input.collapsible_value = {\n                        __class__: \"RuntimeValue\"\n                    };\n                    input.is_workflow =\n                        (input.options && input.options.length == 0) || [\"integer\", \"float\"].indexOf(input.type) != -1;\n                }\n            }\n        });\n        Utils.deepeach(options.inputs, input => {\n            input.type == \"conditional\" && (input.test_param.collapsible_value = undefined);\n        });\n        _addSections(form);\n        _addLabelAnnotation(form);\n    }\n});\n\n/** Augments the module form definition by adding label and annotation fields */\nfunction _addLabelAnnotation(form) {\n    var options = form.model.attributes;\n    var workflow = options.workflow;\n    var node = options.node;\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__annotation\",\n        label: \"Annotation\",\n        fixed: true,\n        value: node.annotation,\n        area: true,\n        help: \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n    });\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__label\",\n        label: \"Label\",\n        value: node.label,\n        help: \"Add a step label.\",\n        fixed: true,\n        onchange: function(new_label) {\n            var duplicate = false;\n            for (var i in workflow.nodes) {\n                var n = workflow.nodes[i];\n                if (n.label && n.label == new_label && n.id != node.id) {\n                    duplicate = true;\n                    break;\n                }\n            }\n            var input_id = form.data.match(\"__label\");\n            var input_element = form.element_list[input_id];\n            input_element.model.set(\n                \"error_text\",\n                duplicate && \"Duplicate label. Please fix this before saving the workflow.\"\n            );\n            form.trigger(\"change\");\n        }\n    });\n}\n\n/** Builds all sub sections */\nfunction _addSections(form) {\n    var options = form.model.attributes;\n    var inputs = options.inputs;\n    var datatypes = options.datatypes;\n    var node = options.node;\n    var workflow = options.workflow;\n    var post_job_actions = node.post_job_actions;\n    var output_id = node.output_terminals && Object.keys(node.output_terminals)[0];\n\n    /** Visit input nodes and enrich by name/value pairs from server data */\n    function visit(head, head_list) {\n        head_list = head_list || [];\n        head_list.push(head);\n        for (var i in head.inputs) {\n            var input = head.inputs[i];\n            var action = input.action;\n            if (action) {\n                input.name = `pja__${output_id}__${input.action}`;\n                if (input.pja_arg) {\n                    input.name += `__${input.pja_arg}`;\n                }\n                if (input.payload) {\n                    for (var p_id in input.payload) {\n                        input.payload[`${input.name}__${p_id}`] = input.payload[p_id];\n                        delete input.payload[p_id];\n                    }\n                }\n                var d = post_job_actions[input.action + output_id];\n                if (d) {\n                    for (var j in head_list) {\n                        head_list[j].expanded = true;\n                    }\n                    if (input.pja_arg) {\n                        input.value = (d.action_arguments && d.action_arguments[input.pja_arg]) || input.value;\n                    } else {\n                        input.value = \"true\";\n                    }\n                }\n            }\n            input.inputs && visit(input, head_list.slice(0));\n        }\n    }\n\n    /** Builds sub section with step actions/annotation */\n    function _makeSection(output_id, datatypes) {\n        var extensions = [];\n        var input_terminal_names = [];\n        for (var key in datatypes) {\n            extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n        }\n        for (key in node.input_terminals) {\n            input_terminal_names.push(node.input_terminals[key].name);\n        }\n        extensions.sort((a, b) => (a.label > b.label ? 1 : a.label < b.label ? -1 : 0));\n        extensions.unshift({\n            0: \"Sequences\",\n            1: \"Sequences\"\n        });\n        extensions.unshift({\n            0: \"Roadmaps\",\n            1: \"Roadmaps\"\n        });\n        extensions.unshift({\n            0: \"Leave unchanged\",\n            1: \"__empty__\"\n        });\n        var output;\n        var input_config = {\n            title: `Configure Output: '${output_id}'`,\n            type: \"section\",\n            flat: true,\n            inputs: [\n                {\n                    label: \"Label\",\n                    type: \"text\",\n                    value: ((output = node.getWorkflowOutput(output_id)) && output.label) || \"\",\n                    help:\n                        \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                    onchange: function(new_value) {\n                        workflow.attemptUpdateOutputLabel(node, output_id, new_value);\n                    }\n                },\n                {\n                    action: \"RenameDatasetAction\",\n                    pja_arg: \"newname\",\n                    label: \"Rename dataset\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: `This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>${input_terminal_names.join(\n                        \", \"\n                    )}</strong>.`\n                },\n                {\n                    action: \"ChangeDatatypeAction\",\n                    pja_arg: \"newtype\",\n                    label: \"Change datatype\",\n                    type: \"select\",\n                    ignore: \"__empty__\",\n                    value: \"__empty__\",\n                    options: extensions,\n                    help: \"This action will change the datatype of the output to the indicated value.\"\n                },\n                {\n                    action: \"TagDatasetAction\",\n                    pja_arg: \"tags\",\n                    label: \"Add Tags\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: \"This action will set tags for the dataset.\"\n                },\n                {\n                    action: \"RemoveTagDatasetAction\",\n                    pja_arg: \"tags\",\n                    label: \"Remove Tags\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: \"This action will remove tags for the dataset.\"\n                },\n                {\n                    title: \"Assign columns\",\n                    type: \"section\",\n                    flat: true,\n                    inputs: [\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"chromCol\",\n                            label: \"Chrom column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"startCol\",\n                            label: \"Start column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"endCol\",\n                            label: \"End column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"strandCol\",\n                            label: \"Strand column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"nameCol\",\n                            label: \"Name column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        }\n                    ],\n                    help: \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n                }\n            ]\n        };\n        visit(input_config);\n        return input_config;\n    }\n\n    if (output_id) {\n        inputs.push({\n            name: `pja__${output_id}__EmailAction`,\n            label: \"Email notification\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[`EmailAction${output_id}`])),\n            ignore: \"false\",\n            help: \"An email notification will be sent when the job has completed.\",\n            payload: {\n                host: window.location.host\n            }\n        });\n        inputs.push({\n            name: `pja__${output_id}__DeleteIntermediatesAction`,\n            label: \"Output cleanup\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[`DeleteIntermediatesAction${output_id}`])),\n            ignore: \"false\",\n            help:\n                \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n        });\n        for (var i in node.output_terminals) {\n            inputs.push(_makeSection(i, datatypes));\n        }\n    }\n}\n\nexport default {\n    Default: Default,\n    Tool: Tool\n};\n"]}