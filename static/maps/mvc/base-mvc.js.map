{"version":3,"sources":["mvc/base-mvc.js"],"names":["_","Backbone","LoggableMixin","logger","_logNamespace","_addLogging2","default","SessionStorageModel","Model","extend","initialize","initialAttrs","this","_checkEnabledSessionStorage","id","Error","existing","isNew","_read","clear","silent","save","defaults","sessionStorage","length","err","alert","sync","method","model","options","returned","_create","_update","_delete","undefined","success","error","json","trigger","setItem","stringify","set","DOMException","navigator","userAgent","indexOf","JSON","parse","getItem","removeItem","hasOwnProperty","_log","toJSON","toString","prototype","omit","SearchableModelMixin","searchAttributes","searchAliases","searchAttribute","attrKey","searchFor","attrVal","get","args","slice","arguments","isArray","_searchArrayAttribute","toLowerCase","array","any","elem","search","key","matches","term","split","matchesAll","terms","match","filter","s","all","replace","$activator","HUAVOptions","$elementShown","$el","showFn","jQuery","toggle","showSpeed","hasBeenShown","is","hidden","isHidden","mixin","on","ev","isFunction","onshowFirstTime","call","onshow","onhide","apply","DraggableViewMixin","draggable","$dragHandle","$","toggleDraggable","draggableOff","draggableOn","dragStartHandler","bind","_dragStartHandler","_dragEndHandler","attr","handle","addEventListener","dragEndHandler","removeEventListener","event","dataTransfer","effectAllowed","attributes","selectable","selected","$selector","_renderSelected","find","toggleClass","toggleSelector","showSelector","speed","fxSpeed","show","hideSelector","hide","toggleSelect","deselect","select","templateVars","jsonNamespace","mixinHash1","propsHash","Array","lastArg","pop","unshift","HiddenUntilActivatedViewMixin","SelectableViewMixin","wrapTemplate","template","templateFn","join","view","_l","buildComparator","attribute_name","ascending","a","b"],"mappings":"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","file":"../../scripts/mvc/base-mvc.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport addLogging from \"utils/add-logging\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\n/** @class Mixin to add logging capabilities to an object.\n *      Designed to allow switching an objects log output off/on at one central\n *      statement. Can be used with plain browser console (or something more\n *      complex like an AJAX logger).\n *  <br />NOTE: currently only uses the console.debug log function\n *  (as opposed to debug, error, warn, etc.)\n *  @name LoggableMixin\n *\n *  @example\n *  // Add to your models/views at the definition using chaining:\n *      var MyModel = Backbone.Model.extend( LoggableMixin ).extend({ // ... });\n *\n *  // or - more explicitly AFTER the definition:\n *      var MyModel = Backbone.Model.extend({\n *          logger  : console\n *          // ...\n *          this.log( '$#%& it! - broken already...' );\n *      })\n *      _.extend( MyModel.prototype, LoggableMixin )\n *\n */\nvar LoggableMixin = /** @lends LoggableMixin# */ {\n    // replace null with console (if available) to see all logs for a particular view/model\n    /** The logging object whose log function will be used to output\n     *      messages. Null will supress all logging. Commonly set to console.\n     */\n    logger: null,\n    /** @type {String} a namespace for filtering/focusing log output */\n    _logNamespace: \".\"\n};\naddLogging(LoggableMixin);\n\n//==============================================================================\n/** Backbone model that syncs to the browser's sessionStorage API.\n *      This all largely happens behind the scenes and no special calls are required.\n */\nvar SessionStorageModel = Backbone.Model.extend({\n    initialize: function(initialAttrs) {\n        // check for sessionStorage and error if no id is provided\n        this._checkEnabledSessionStorage();\n        if (!initialAttrs.id) {\n            throw new Error(\"SessionStorageModel requires an id in the initial attributes\");\n        }\n        this.id = initialAttrs.id;\n\n        // load existing from storage (if any), clear any attrs set by bbone before init is called,\n        //  layer initial over existing and defaults, and save\n        var existing = !this.isNew() ? this._read(this) : {};\n        this.clear({ silent: true });\n        this.save(_.extend({}, this.defaults, existing, initialAttrs), {\n            silent: true\n        });\n\n        // save on any change to it immediately\n        this.on(\"change\", function() {\n            this.save();\n        });\n    },\n\n    _checkEnabledSessionStorage: function() {\n        try {\n            return window.sessionStorage.length >= 0;\n        } catch (err) {\n            alert(\"Please enable cookies in your browser for this Galaxy site\");\n            return false;\n        }\n    },\n\n    /** override of bbone sync to save to sessionStorage rather than REST\n     *      bbone options (success, errror, etc.) should still apply\n     */\n    sync: function(method, model, options) {\n        if (!options.silent) {\n            model.trigger(\"request\", model, {}, options);\n        }\n        var returned = {};\n        switch (method) {\n            case \"create\":\n                returned = this._create(model);\n                break;\n            case \"read\":\n                returned = this._read(model);\n                break;\n            case \"update\":\n                returned = this._update(model);\n                break;\n            case \"delete\":\n                returned = this._delete(model);\n                break;\n        }\n        if (returned !== undefined || returned !== null) {\n            if (options.success) {\n                options.success();\n            }\n        } else {\n            if (options.error) {\n                options.error();\n            }\n        }\n        return returned;\n    },\n\n    /** set storage to the stringified item */\n    _create: function(model) {\n        try {\n            var json = model.toJSON();\n            var set = sessionStorage.setItem(model.id, JSON.stringify(json));\n            return set === null ? set : json;\n            // DOMException is thrown in Safari if in private browsing mode and sessionStorage is attempted:\n            // http://stackoverflow.com/questions/14555347\n            // TODO: this could probably use a more general soln - like detecting priv. mode + safari => non-ajaxing Model\n        } catch (err) {\n            if (!(err instanceof DOMException && navigator.userAgent.indexOf(\"Safari\") > -1)) {\n                throw err;\n            }\n        }\n        return null;\n    },\n\n    /** read and parse json from storage */\n    _read: function(model) {\n        return JSON.parse(sessionStorage.getItem(model.id));\n    },\n\n    /** set storage to the item (alias to create) */\n    _update: function(model) {\n        return model._create(model);\n    },\n\n    /** remove the item from storage */\n    _delete: function(model) {\n        return sessionStorage.removeItem(model.id);\n    },\n\n    /** T/F whether sessionStorage contains the model's id (data is present) */\n    isNew: function() {\n        return !sessionStorage.hasOwnProperty(this.id);\n    },\n\n    _log: function() {\n        return JSON.stringify(this.toJSON(), null, \"  \");\n    },\n    toString: function() {\n        return `SessionStorageModel(${this.id})`;\n    }\n});\n(() => {\n    SessionStorageModel.prototype = _.omit(SessionStorageModel.prototype, \"url\", \"urlRoot\");\n})();\n\n//==============================================================================\n/** Function that allows mixing of hashs into bbone MVC while showing the mixins first\n *      (before the more local class overrides/hash).\n *      Basically, a simple reversal of param order on _.defaults() - to show mixins in top of definition.\n *  @example:\n *      var NewModel = Something.extend( mixin( MyMixinA, MyMixinB, { ... myVars : ... }) );\n *\n *  NOTE: this does not combine any hashes (like events, etc.) and you're expected to handle that\n */\nfunction mixin(mixinHash1, /* mixinHash2, etc: ... variadic */ propsHash) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var lastArg = args.pop();\n    args.unshift(lastArg);\n    return _.defaults.apply(_, args);\n}\n\n//==============================================================================\n/** A mixin for models that allow T/F/Matching to their attributes - useful when\n *      searching or filtering collections of models.\n * @example:\n *      see hda-model for searchAttribute and searchAliases definition examples.\n *      see history-contents.matches for how collections are filtered\n *      and see readonly-history-view.searchHdas for how user input is connected to the filtering\n */\nvar SearchableModelMixin = {\n    /** what attributes of an HDA will be used in a text search */\n    searchAttributes: [\n        // override\n    ],\n\n    /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n    searchAliases: {\n        // override\n    },\n\n    /** search the attribute with key attrKey for the string searchFor; T/F if found */\n    searchAttribute: function(attrKey, searchFor) {\n        var attrVal = this.get(attrKey);\n        //this.debug( 'searchAttribute', attrKey, attrVal, searchFor );\n        // bail if empty searchFor or unsearchable values\n        if (!searchFor || (attrVal === undefined || attrVal === null)) {\n            return false;\n        }\n        // pass to sep. fn for deep search of array attributes\n        if (_.isArray(attrVal)) {\n            return this._searchArrayAttribute(attrVal, searchFor);\n        }\n        return (\n            attrVal\n                .toString()\n                .toLowerCase()\n                .indexOf(searchFor.toLowerCase()) !== -1\n        );\n    },\n\n    /** deep(er) search for array attributes; T/F if found */\n    _searchArrayAttribute: function(array, searchFor) {\n        //this.debug( '_searchArrayAttribute', array, searchFor );\n        searchFor = searchFor.toLowerCase();\n        //precondition: searchFor has already been validated as non-empty string\n        //precondition: assumes only 1 level array\n        //TODO: could possibly break up searchFor more (CSV...)\n        return _.any(\n            array,\n            elem =>\n                elem\n                    .toString()\n                    .toLowerCase()\n                    .indexOf(searchFor.toLowerCase()) !== -1\n        );\n    },\n\n    /** search all searchAttributes for the string searchFor,\n     *      returning a list of keys of attributes that contain searchFor\n     */\n    search: function(searchFor) {\n        var model = this;\n        return _.filter(this.searchAttributes, key => model.searchAttribute(key, searchFor));\n    },\n\n    /** alias of search, but returns a boolean; accepts attribute specifiers where\n     *      the attributes searched can be narrowed to a single attribute using\n     *      the form: matches( 'genome_build=hg19' )\n     *      (the attribute keys allowed can also be aliases to the true attribute key;\n     *          see searchAliases above)\n     *  @param {String} term   plain text or ATTR_SPECIFIER sep. key=val pair\n     *  @returns {Boolean} was term found in (any) attribute(s)\n     */\n    matches: function(term) {\n        var ATTR_SPECIFIER = \"=\";\n        var split = term.split(ATTR_SPECIFIER);\n        // attribute is specified - search only that\n        if (split.length >= 2) {\n            var attrKey = split[0];\n            attrKey = this.searchAliases[attrKey] || attrKey;\n            return this.searchAttribute(attrKey, split[1]);\n        }\n        // no attribute is specified - search all attributes in searchAttributes\n        return !!this.search(term).length;\n    },\n\n    /** an implicit AND search for all terms; IOW, a model must match all terms given\n     *      where terms is a whitespace separated value string.\n     *      e.g. given terms of: 'blah bler database=hg19'\n     *          an HDA would have to have attributes containing blah AND bler AND a genome_build == hg19\n     *      To include whitespace in terms: wrap the term in double quotations (name=\"blah bler\").\n     */\n    matchesAll: function(terms) {\n        var model = this;\n        // break the terms up by whitespace and filter out the empty strings\n        terms = terms.match(/(\".*\"|\\w*=\".*\"|\\S*)/g).filter(s => !!s);\n        return _.all(terms, term => {\n            term = term.replace(/\"/g, \"\");\n            return model.matches(term);\n        });\n    }\n};\n\n//==============================================================================\n/** A view that renders hidden and shows when some activator is clicked.\n *      options:\n *          showFn: the effect used to show/hide the View (defaults to jq.toggle)\n *          $elementShown: some jqObject (defaults to this.$el) to be shown/hidden\n *          onShowFirstTime: fn called the first time the view is shown\n *          onshow: fn called every time the view is shown\n *          onhide: fn called every time the view is hidden\n *      events:\n *          hiddenUntilActivated:shown (the view is passed as an arg)\n *          hiddenUntilActivated:hidden (the view is passed as an arg)\n *      instance vars:\n *          view.hidden {boolean} is the view in the hidden state\n */\nvar HiddenUntilActivatedViewMixin = /** @lends hiddenUntilActivatedMixin# */ {\n    //TODO: since this is a mixin, consider moving toggle, hidden into HUAVOptions\n\n    /** call this in your initialize to set up the mixin\n     *  @param {jQuery} $activator the 'button' that's clicked to show/hide the view\n     *  @param {Object} hash with mixin options\n     */\n    hiddenUntilActivated: function($activator, options) {\n        // call this in your view's initialize fn\n        options = options || {};\n        //TODO: flesh out options - show them all here\n        this.HUAVOptions = {\n            $elementShown: this.$el,\n            showFn: jQuery.prototype.toggle,\n            showSpeed: \"fast\"\n        };\n        _.extend(this.HUAVOptions, options || {});\n        /** has this been shown already (and onshowFirstTime called)? */\n        this.HUAVOptions.hasBeenShown = this.HUAVOptions.$elementShown.is(\":visible\");\n        this.hidden = this.isHidden();\n\n        if ($activator) {\n            var mixin = this;\n            $activator.on(\"click\", ev => {\n                mixin.toggle(mixin.HUAVOptions.showSpeed);\n            });\n        }\n    },\n\n    //TODO:?? remove? use .hidden?\n    /** returns T/F if the view is hidden */\n    isHidden: function() {\n        return this.HUAVOptions.$elementShown.is(\":hidden\");\n    },\n\n    /** toggle the hidden state, show/hide $elementShown, call onshow/hide, trigger events */\n    toggle: function() {\n        //TODO: more specific name - toggle is too general\n        // can be called manually as well with normal toggle arguments\n        //TODO: better as a callback (when the show/hide is actually done)\n        // show\n        if (this.hidden) {\n            // fire the optional fns on the first/each showing - good for render()\n            if (!this.HUAVOptions.hasBeenShown) {\n                if (_.isFunction(this.HUAVOptions.onshowFirstTime)) {\n                    this.HUAVOptions.hasBeenShown = true;\n                    this.HUAVOptions.onshowFirstTime.call(this);\n                }\n            }\n            if (_.isFunction(this.HUAVOptions.onshow)) {\n                this.HUAVOptions.onshow.call(this);\n                this.trigger(\"hiddenUntilActivated:shown\", this);\n            }\n            this.hidden = false;\n\n            // hide\n        } else {\n            if (_.isFunction(this.HUAVOptions.onhide)) {\n                this.HUAVOptions.onhide.call(this);\n                this.trigger(\"hiddenUntilActivated:hidden\", this);\n            }\n            this.hidden = true;\n        }\n        return this.HUAVOptions.showFn.apply(this.HUAVOptions.$elementShown, arguments);\n    }\n};\n\n//==============================================================================\n/** Mixin for views that can be dragged and dropped\n *      Allows for the drag behavior to be turned on/off, setting/removing jQuery event\n *          handlers each time.\n *      dataTransfer data is set to the JSON string of the view's model.toJSON\n *      Override '$dragHandle' to define the draggable DOM sub-element.\n */\nvar DraggableViewMixin = {\n    /** set up instance vars to track whether this view is currently draggable */\n    initialize: function(attributes) {\n        /** is the body of this hda view expanded/not? */\n        this.draggable = attributes.draggable || false;\n    },\n\n    /** what part of the view's DOM triggers the dragging */\n    $dragHandle: function() {\n        //TODO: make abstract/general - move this to listItem\n        // override to the element you want to be your view's handle\n        return this.$(\".title-bar\");\n    },\n\n    /** toggle whether this view is draggable */\n    toggleDraggable: function() {\n        if (this.draggable) {\n            this.draggableOff();\n        } else {\n            this.draggableOn();\n        }\n    },\n\n    /** allow the view to be dragged, set up event handlers */\n    draggableOn: function() {\n        this.draggable = true;\n        this.dragStartHandler = _.bind(this._dragStartHandler, this);\n        this.dragEndHandler = _.bind(this._dragEndHandler, this);\n\n        var handle = this.$dragHandle()\n            .attr(\"draggable\", true)\n            .get(0);\n        handle.addEventListener(\"dragstart\", this.dragStartHandler, false);\n        handle.addEventListener(\"dragend\", this.dragEndHandler, false);\n    },\n\n    /** turn of view dragging and remove event listeners */\n    draggableOff: function() {\n        this.draggable = false;\n        var handle = this.$dragHandle()\n            .attr(\"draggable\", false)\n            .get(0);\n        handle.removeEventListener(\"dragstart\", this.dragStartHandler, false);\n        handle.removeEventListener(\"dragend\", this.dragEndHandler, false);\n    },\n\n    /** sets the dataTransfer data to the model's toJSON\n     *  @fires draggable:dragstart (bbone event) which is passed the event and this view\n     */\n    _dragStartHandler: function(event) {\n        event.dataTransfer.effectAllowed = \"move\";\n        //ASSUMES: this.model\n        //TODO: all except IE: should be 'application/json', IE: must be 'text'\n        event.dataTransfer.setData(\"text\", JSON.stringify(this.model.toJSON()));\n        this.trigger(\"draggable:dragstart\", event, this);\n        return false;\n    },\n\n    /** handle the dragend\n     *  @fires draggable:dragend (bbone event) which is passed the event and this view\n     */\n    _dragEndHandler: function(event) {\n        this.trigger(\"draggable:dragend\", event, this);\n        return false;\n    }\n};\n\n//==============================================================================\n/** Mixin that allows a view to be selected (gen. from a list).\n *      Selection controls ($selector) may be hidden/shown/toggled.\n *          The bbone event 'selectable' is fired when the controls are shown/hidden (passed T/F).\n *      Default rendering is a font-awesome checkbox.\n *      Default selector is '.selector' within the view's $el.\n *      The bbone events 'selected' and 'de-selected' are fired when the $selector is clicked.\n *          Both events are passed the view and the (jQuery) event.\n */\nvar SelectableViewMixin = {\n    /** Set up instance state vars for whether the selector is shown and whether the view has been selected */\n    initialize: function(attributes) {\n        /** is the view currently in selection mode? */\n        this.selectable = attributes.selectable || false;\n        /** is the view currently selected? */\n        this.selected = attributes.selected || false;\n    },\n\n    /** $el sub-element where the selector is rendered and what can be clicked to select. */\n    $selector: function() {\n        return this.$(\".selector\");\n    },\n\n    /** How the selector is rendered - defaults to font-awesome checkbox */\n    _renderSelected: function() {\n        // override\n        this.$selector()\n            .find(\"span\")\n            .toggleClass(\"fa-check-square-o\", this.selected)\n            .toggleClass(\"fa-square-o\", !this.selected);\n    },\n\n    /** Toggle whether the selector is shown */\n    toggleSelector: function() {\n        //TODO: use this.selectable\n        if (!this.$selector().is(\":visible\")) {\n            this.showSelector();\n        } else {\n            this.hideSelector();\n        }\n    },\n\n    /** Display the selector control.\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed true (IOW, the selector is shown) and the view\n     */\n    showSelector: function(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        // make sure selected state is represented properly\n        this.selectable = true;\n        this.trigger(\"selectable\", true, this);\n        this._renderSelected();\n        if (speed) {\n            this.$selector().show(speed);\n        } else {\n            this.$selector().show();\n        }\n    },\n\n    /** remove the selector control\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed false (IOW, the selector is not shown) and the view\n     */\n    hideSelector: function(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        // reverse the process from showSelect\n        this.selectable = false;\n        this.trigger(\"selectable\", false, this);\n        if (speed) {\n            this.$selector().hide(speed);\n        } else {\n            this.$selector().hide();\n        }\n    },\n\n    /** Toggle whether the view is selected */\n    toggleSelect: function(event) {\n        if (this.selected) {\n            this.deselect(event);\n        } else {\n            this.select(event);\n        }\n    },\n\n    /** Select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    select: function(event) {\n        // switch icon, set selected, and trigger event\n        if (!this.selected) {\n            this.trigger(\"selected\", this, event);\n            this.selected = true;\n            this._renderSelected();\n        }\n        return false;\n    },\n\n    /** De-select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: de-selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    deselect: function(event) {\n        // switch icon, set selected, and trigger event\n        if (this.selected) {\n            this.trigger(\"de-selected\", this, event);\n            this.selected = false;\n            this._renderSelected();\n        }\n        return false;\n    }\n};\n\n//==============================================================================\n/** Return an underscore template fn from an array of strings.\n *  @param {String[]} template      the template strings to compile into the underscore template fn\n *  @param {String} jsonNamespace   an optional namespace for the json data passed in (defaults to 'model')\n *  @returns {Function} the (wrapped) underscore template fn\n *      The function accepts:\n *\n *  The template strings can access:\n *      the json/model hash using model (\"<%- model.myAttr %>) using the jsonNamespace above\n *      _l: the localizer function\n *      view (if passed): ostensibly, the view using the template (handy for view instance vars)\n *      Because they're namespaced, undefined attributes will not throw an error.\n *\n *  @example:\n *      templateBler : BASE_MVC.wrapTemplate([\n *          '<div class=\"myclass <%- mynamespace.modelClass %>\">',\n *              '<span><% print( _l( mynamespace.message ) ); %>:<%= view.status %></span>'\n *          '</div>'\n *      ], 'mynamespace' )\n *\n *  Meant to be called in a View's definition in order to compile only once.\n *\n */\nfunction wrapTemplate(template, jsonNamespace) {\n    jsonNamespace = jsonNamespace || \"model\";\n    var templateFn = _.template(template.join(\"\"));\n    return (json, view) => {\n        var templateVars = { view: view || {}, _l: _l };\n        templateVars[jsonNamespace] = json || {};\n        return templateFn(templateVars);\n    };\n}\n\n//==============================================================================\n/** Return a comparator function for sorted Collections */\nfunction buildComparator(attribute_name, options) {\n    options = options || {};\n    var ascending = options.ascending ? 1 : -1;\n    return function __comparator(a, b) {\n        a = a.get(attribute_name);\n        b = b.get(attribute_name);\n        return (a < b ? -1 : a > b ? 1 : 0) * ascending;\n    };\n}\n\n//==============================================================================\nexport default {\n    LoggableMixin: LoggableMixin,\n    SessionStorageModel: SessionStorageModel,\n    mixin: mixin,\n    SearchableModelMixin: SearchableModelMixin,\n    HiddenUntilActivatedViewMixin: HiddenUntilActivatedViewMixin,\n    DraggableViewMixin: DraggableViewMixin,\n    SelectableViewMixin: SelectableViewMixin,\n    wrapTemplate: wrapTemplate,\n    buildComparator: buildComparator\n};\n"]}