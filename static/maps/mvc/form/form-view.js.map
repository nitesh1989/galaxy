{"version":3,"sources":["mvc/form/form-view.js"],"names":["Backbone","View","extend","initialize","options","this","model","Model","initial_errors","cls","icon","always_refresh","status","hide_operations","onchange","set","setElement","render","new_model","self","node","input_id","input_list","input","field_list","update","new_options","indexOf","type","i","opt","push","field","trigger","Galaxy","emit","debug","value","is_dynamic","wait","unwait","highlight","message","silent","input_element","element_list","error","portlet","expand","active","$","css","first","$panel","animate","scrollTop","$el","offset","top","errors","error_messages","data","matchResponse","off","_formData2","default","Manager","_renderForm","create","attributes","current_check","checksum","on","refresh_on_change","get","new_check","_","each","remove","_uiMisc2","UnescapedMessage","section","_formSection2","inputs","_uiPortlet2","title","operations","buttons","collapsible","onchange_title","collapsed","append"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\nimport Utils from \"utils/utils\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport FormSection from \"mvc/form/form-section\";\nimport FormData from \"mvc/form/form-data\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        this.model = new Backbone.Model({\n            initial_errors: false,\n            cls: \"ui-portlet-limited\",\n            icon: null,\n            always_refresh: true,\n            status: \"warning\",\n            hide_operations: false,\n            onchange: function() {}\n        }).set(options);\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Update available options */\n    update: function(new_model) {\n        var self = this;\n        this.data.matchModel(new_model, (node, input_id) => {\n            var input = self.input_list[input_id];\n            if (input && input.options) {\n                if (!_.isEqual(input.options, node.options)) {\n                    input.options = node.options;\n                    var field = self.field_list[input_id];\n                    if (field.update) {\n                        var new_options = [];\n                        if ([\"data\", \"data_collection\", \"drill_down\"].indexOf(input.type) != -1) {\n                            new_options = input.options;\n                        } else {\n                            for (var i in node.options) {\n                                var opt = node.options[i];\n                                if (opt.length > 2) {\n                                    new_options.push({\n                                        label: opt[0],\n                                        value: opt[1]\n                                    });\n                                }\n                            }\n                        }\n                        field.update(new_options);\n                        field.trigger(\"change\");\n                        Galaxy.emit.debug(\"form-view::update()\", `Updating options for ${input_id}`);\n                    }\n                }\n            }\n        });\n    },\n\n    /** Set form into wait mode */\n    wait: function(active) {\n        for (var i in this.input_list) {\n            var field = this.field_list[i];\n            var input = this.input_list[i];\n            if (input.is_dynamic && field.wait && field.unwait) {\n                field[active ? \"wait\" : \"unwait\"]();\n            }\n        }\n    },\n\n    /** Highlight and scroll to input element (currently only used for error notifications) */\n    highlight: function(input_id, message, silent) {\n        var input_element = this.element_list[input_id];\n        if (input_element) {\n            input_element.error(message || \"Please verify this parameter.\");\n            this.portlet.expand();\n            this.trigger(\"expand\", input_id);\n            if (!silent) {\n                var $panel = this.$el\n                    .parents()\n                    .filter(function() {\n                        return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n                    })\n                    .first();\n                $panel.animate(\n                    {\n                        scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120\n                    },\n                    500\n                );\n            }\n        }\n    },\n\n    /** Highlights errors */\n    errors: function(options) {\n        this.trigger(\"reset\");\n        if (options && options.errors) {\n            var error_messages = this.data.matchResponse(options.errors);\n            for (var input_id in this.element_list) {\n                var input = this.element_list[input_id];\n                if (error_messages[input_id]) {\n                    this.highlight(input_id, error_messages[input_id], true);\n                }\n            }\n        }\n    },\n\n    /** Render tool form */\n    render: function() {\n        var self = this;\n        this.off(\"change\");\n        this.off(\"reset\");\n        // contains the dom field elements as created by the parameter factory i.e. form-parameters\n        this.field_list = {};\n        // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n        this.input_list = {};\n        // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n        this.element_list = {};\n        // converts the form into a json data structure\n        this.data = new FormData.Manager(this);\n        this._renderForm();\n        this.data.create();\n        this.model.get(\"initial_errors\") && this.errors(this.model.attributes);\n        // add listener which triggers on checksum change, and reset the form input wrappers\n        var current_check = this.data.checksum();\n        this.on(\"change\", input_id => {\n            var input = self.input_list[input_id];\n            if (!input || input.refresh_on_change || self.model.get(\"always_refresh\")) {\n                var new_check = self.data.checksum();\n                if (new_check != current_check) {\n                    current_check = new_check;\n                    self.model.get(\"onchange\")();\n                }\n            }\n        });\n        this.on(\"reset\", () => {\n            _.each(self.element_list, input_element => {\n                input_element.reset();\n            });\n        });\n        return this;\n    },\n\n    /** Renders/appends dom elements of the form */\n    _renderForm: function() {\n        $(\".tooltip\").remove();\n        var options = this.model.attributes;\n        this.message = new Ui.UnescapedMessage();\n        this.section = new FormSection.View(this, {\n            inputs: options.inputs\n        });\n        this.portlet = new Portlet.View({\n            icon: options.icon,\n            title: options.title,\n            cls: options.cls,\n            operations: !options.hide_operations && options.operations,\n            buttons: options.buttons,\n            collapsible: options.collapsible,\n            collapsed: options.collapsed,\n            onchange_title: options.onchange_title\n        });\n        this.portlet.append(this.message.$el);\n        this.portlet.append(this.section.$el);\n        this.$el.empty();\n        options.inputs && this.$el.append(this.portlet.$el);\n        options.message &&\n            this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n        Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n    }\n});\n"]}