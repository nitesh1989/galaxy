{"version":3,"sources":["mvc/form/form-data.js"],"names":["Manager","Backbone","Model","extend","initialize","app","this","checksum","sum","self","section","$el","find","each","id","$","attr","field","field_list","JSON","value","collapsed","create","add","flat_id","input_id","input_value","flat_dict","result_dict","element_list","convert","identifier","head","dict","_iterate","node","input","name","block_prefix","index","pos","block_label","indexOf","length","push","parseInt","substr","block_indices","section_label","a","b","i","selectedCase","flat","undefined","ignore","p_id","payload","match","matchCase","matchModel","model","callback","visitInputs","inputs","response","search","result","separator","Array","new_id","parent","children","child","hasClass","input_list","test_param","cases","prefix","context","_","type","key","cache","j","debug","Galaxy"],"mappings":"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","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\nimport Utils from \"utils/utils\";\nvar Manager = Backbone.Model.extend({\n    initialize: function(app) {\n        this.app = app;\n    },\n\n    /** Creates a checksum. */\n    checksum: function() {\n        var sum = \"\";\n        var self = this;\n        this.app.section.$el.find(\".section-row\").each(function() {\n            var id = $(this).attr(\"id\");\n            var field = self.app.field_list[id];\n            if (field) {\n                sum += `${id}:${JSON.stringify(field.value && field.value())}:${field.collapsed};`;\n            }\n        });\n        return sum;\n    },\n\n    /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n    create: function() {\n        var self = this;\n\n        // get raw dictionary from dom\n        var dict = {};\n        this._iterate(this.app.section.$el, dict);\n\n        // add to result dictionary, label elements\n        var result_dict = {};\n        this.flat_dict = {};\n        function add(flat_id, input_id, input_value) {\n            self.flat_dict[flat_id] = input_id;\n            result_dict[flat_id] = input_value;\n            self.app.element_list[input_id] && self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n        }\n        // converter between raw dictionary and job dictionary\n        function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    var input = node.input;\n                    var flat_id = identifier;\n                    if (identifier != \"\") {\n                        flat_id += \"|\";\n                    }\n                    flat_id += input.name;\n                    switch (input.type) {\n                        case \"repeat\":\n                            var section_label = \"section-\";\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(parseInt(block_label.substr(pos)));\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(0, pos);\n                                    }\n                                }\n                            }\n                            block_indices.sort((a, b) => a - b);\n                            var index = 0;\n                            for (var i in block_indices) {\n                                convert(`${flat_id}_${index++}`, node[block_prefix + block_indices[i]]);\n                            }\n                            break;\n                        case \"conditional\":\n                            var value = self.app.field_list[input.id].value();\n                            add(`${flat_id}|${input.test_param.name}`, input.id, value);\n                            var selectedCase = matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(flat_id, head[`${input.id}-section-${selectedCase}`]);\n                            }\n                            break;\n                        case \"section\":\n                            convert((!input.flat && flat_id) || \"\", node);\n                            break;\n                        default:\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                var value = field.value();\n                                if (input.ignore === undefined || input.ignore != value) {\n                                    if (field.collapsed && input.collapsible_value) {\n                                        value = input.collapsible_value;\n                                    }\n                                    add(flat_id, input.id, value);\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add(p_id, input.id, input.payload[p_id]);\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }\n        convert(\"\", dict);\n        return result_dict;\n    },\n\n    /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n    match: function(flat_id) {\n        return this.flat_dict && this.flat_dict[flat_id];\n    },\n\n    /** Match conditional values to selected cases\n        */\n    matchCase: function(input, value) {\n        return matchCase(input, value);\n    },\n\n    /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n    matchModel: function(model, callback) {\n        var self = this;\n        visitInputs(model.inputs, (input, name) => {\n            self.flat_dict[name] && callback(input, self.flat_dict[name]);\n        });\n    },\n\n    /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n    matchResponse: function(response) {\n        var result = {};\n        var self = this;\n        function search(id, head) {\n            if (typeof head === \"string\") {\n                var input_id = self.flat_dict[id];\n                input_id && (result[input_id] = head);\n            } else {\n                for (var i in head) {\n                    var new_id = i;\n                    if (id !== \"\") {\n                        var separator = \"|\";\n                        if (head instanceof Array) {\n                            separator = \"_\";\n                        }\n                        new_id = id + separator + new_id;\n                    }\n                    search(new_id, head[i]);\n                }\n            }\n        }\n        search(\"\", response);\n        return result;\n    },\n\n    /** Map dom tree to dictionary tree with input elements.\n        */\n    _iterate: function(parent, dict) {\n        var self = this;\n        var children = $(parent).children();\n        children.each(function() {\n            var child = this;\n            var id = $(child).attr(\"id\");\n            if ($(child).hasClass(\"section-row\")) {\n                var input = self.app.input_list[id];\n                dict[id] = (input && { input: input }) || {};\n                self._iterate(child, dict[id]);\n            } else {\n                self._iterate(child, dict);\n            }\n        });\n    }\n});\n\n/** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\nvar matchCase = (input, value) => {\n    if (input.test_param.type == \"boolean\") {\n        if (value == \"true\") {\n            value = input.test_param.truevalue || \"true\";\n        } else {\n            value = input.test_param.falsevalue || \"false\";\n        }\n    }\n    for (var i in input.cases) {\n        if (input.cases[i].value == value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\nvar visitInputs = (inputs, callback, prefix, context) => {\n    context = $.extend(true, {}, context);\n    _.each(inputs, input => {\n        if (input && input.type && input.name) {\n            context[input.name] = input;\n        }\n    });\n    for (var key in inputs) {\n        var node = inputs[key];\n        node.name = node.name || key;\n        var name = prefix ? `${prefix}|${node.name}` : node.name;\n        switch (node.type) {\n            case \"repeat\":\n                _.each(node.cache, (cache, j) => {\n                    visitInputs(cache, callback, `${name}_${j}`, context);\n                });\n                break;\n            case \"conditional\":\n                if (node.test_param) {\n                    callback(node.test_param, `${name}|${node.test_param.name}`, context);\n                    var selectedCase = matchCase(node, node.test_param.value);\n                    if (selectedCase != -1) {\n                        visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n                    } else {\n                        Galaxy.emit.debug(`form-data::visitInputs() - Invalid case for ${name}.`);\n                    }\n                } else {\n                    Galaxy.emit.debug(`form-data::visitInputs() - Conditional test parameter missing for ${name}.`);\n                }\n                break;\n            case \"section\":\n                visitInputs(node.inputs, callback, name, context);\n                break;\n            default:\n                callback(node, name, context);\n        }\n    }\n};\n\nexport default {\n    Manager: Manager,\n    visitInputs: visitInputs\n};\n"]}