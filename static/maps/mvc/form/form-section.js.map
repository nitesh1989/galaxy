{"version":3,"sources":["mvc/form/form-section.js"],"names":["View","Backbone","extend","initialize","app","options","this","inputs","parameters","_formParameters2","default","setElement","$","render","self","$el","empty","_","each","input","add","jQuery","input_def","id","_utils2","uid","_addRepeat","_addRow","_addConditional","input_list","model","test_param","disabled","field","set","selectedCase","data","matchCase","value","i","cases","case_def","_addSection","section_row","nonhidden","j","hidden","fadeIn","hide","trigger","sub_section","addClass","create","sub_section_id","block_index","repeat","ondel","del","title","_formRepeat2","min","onnew","_append","n_cache","size","cache","Math","max","hideOptions","name","help","input_element","portlet","_uiPortlet2","cls","collapsible","collapsible_button","collapsed","expanded","append","label","input_id","length","expand","onchange","field_list","hide_label","collapsible_value","collapsible_preview","argument","color","style","backdrop","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Repeat from \"mvc/form/form-repeat\";\nimport InputElement from \"mvc/form/form-input\";\nimport Parameters from \"mvc/form/form-parameters\";\nvar View = Backbone.View.extend({\n    initialize: function(app, options) {\n        this.app = app;\n        this.inputs = options.inputs;\n        this.parameters = new Parameters();\n        this.setElement($(\"<div/>\"));\n        this.render();\n    },\n\n    /** Render section view */\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        _.each(this.inputs, input => {\n            self.add(input);\n        });\n    },\n\n    /** Add a new input element */\n    add: function(input) {\n        var input_def = jQuery.extend(true, {}, input);\n        input_def.id = input.id = Utils.uid();\n        this.app.input_list[input_def.id] = input_def;\n        switch (input_def.type) {\n            case \"conditional\":\n                this._addConditional(input_def);\n                break;\n            case \"repeat\":\n                this._addRepeat(input_def);\n                break;\n            case \"section\":\n                this._addSection(input_def);\n                break;\n            default:\n                this._addRow(input_def);\n        }\n    },\n\n    /** Add a conditional block */\n    _addConditional: function(input_def) {\n        var self = this;\n        input_def.test_param.id = input_def.id;\n        this.app.model.get(\"sustain_conditionals\") && (input_def.test_param.disabled = true);\n        var field = this._addRow(input_def.test_param);\n\n        // set onchange event for test parameter\n        field.model &&\n            field.model.set(\"onchange\", value => {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(`#${input_def.id}-section-${i}`);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n\n        // add conditional sub sections\n        for (var i in input_def.cases) {\n            var sub_section = new View(this.app, {\n                inputs: input_def.cases[i].inputs\n            });\n            this._append(sub_section.$el.addClass(\"ui-form-section\"), `${input_def.id}-section-${i}`);\n        }\n\n        // trigger refresh on conditional input field after all input elements have been created\n        field.trigger(\"change\");\n    },\n\n    /** Add a repeat block */\n    _addRepeat: function(input_def) {\n        var self = this;\n        var block_index = 0;\n\n        // create repeat block element\n        var repeat = new Repeat.View({\n            title: input_def.title || \"Repeat\",\n            min: input_def.min,\n            max: input_def.max,\n            onnew: function() {\n                create(input_def.inputs);\n                self.app.trigger(\"change\");\n            }\n        });\n\n        // helper function to create new repeat blocks\n        function create(inputs) {\n            var sub_section_id = `${input_def.id}-section-${block_index++}`;\n            var sub_section = new View(self.app, { inputs: inputs });\n            repeat.add({\n                id: sub_section_id,\n                $el: sub_section.$el,\n                ondel: function() {\n                    repeat.del(sub_section_id);\n                    self.app.trigger(\"change\");\n                }\n            });\n        }\n\n        //\n        // add parsed/minimum number of repeat blocks\n        //\n        var n_cache = _.size(input_def.cache);\n        for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n            create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n        }\n\n        // hide options\n        this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n        // create input field wrapper\n        var input_element = new InputElement(this.app, {\n            label: input_def.title || input_def.name,\n            help: input_def.help,\n            field: repeat\n        });\n        this._append(input_element.$el, input_def.id);\n    },\n\n    /** Add a customized section */\n    _addSection: function(input_def) {\n        var portlet = new Portlet.View({\n            title: input_def.title || input_def.name,\n            cls: \"ui-portlet-section\",\n            collapsible: true,\n            collapsible_button: true,\n            collapsed: !input_def.expanded\n        });\n        portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n        portlet.append(\n            $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .html(input_def.help)\n        );\n        this.app.on(\"expand\", input_id => {\n            portlet.$(`#${input_id}`).length > 0 && portlet.expand();\n        });\n        this._append(portlet.$el, input_def.id);\n    },\n\n    /** Add a single input field element */\n    _addRow: function(input_def) {\n        var self = this;\n        var id = input_def.id;\n        input_def.onchange =\n            input_def.onchange ||\n            (() => {\n                self.app.trigger(\"change\", id);\n            });\n        var field = this.parameters.create(input_def);\n        this.app.field_list[id] = field;\n        var input_element = new InputElement(this.app, {\n            name: input_def.name,\n            label: input_def.hide_label ? \"\" : input_def.label || input_def.name,\n            value: input_def.value,\n            text_value: input_def.text_value,\n            collapsible_value: input_def.collapsible_value,\n            collapsible_preview: input_def.collapsible_preview,\n            help: input_def.help,\n            argument: input_def.argument,\n            disabled: input_def.disabled,\n            color: input_def.color,\n            style: input_def.style,\n            backdrop: input_def.backdrop,\n            hidden: input_def.hidden,\n            fixed: input_def.fixed,\n            field: field\n        });\n        this.app.element_list[id] = input_element;\n        this._append(input_element.$el, input_def.id);\n        return field;\n    },\n\n    /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n    _append: function($el, id) {\n        this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}