{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["Backbone","Model","extend","types","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","this","input_def","type","fieldClass","call","library_data","options","_fieldSelect","_fieldText","emit","debug","undefined","value","_fieldData","_uiSelectContent2","default","View","id","create","optional","multiple","field","Galaxy","onchange","is_workflow","_","each","option","label","SelectClass","_uiMisc2","Select","display","error_text","Radio","RadioButton","readonly","individual","searchable","flavor","_fieldDrilldown","area","_utils2","isEmpty","i","str_value","isArray","datalist","_fieldSlider","Slider","precise","_fieldHidden","Hidden","info","min","max","_fieldColor","_fieldLibrary","self","_uiSelectGenomespace2","_fieldFtp","app","trigger","_fieldUpload","Upload"],"mappings":"4ZAWeA,SAASC,MAAMC,QAE1BC,OACIC,KAAM,aACNC,SAAU,aACVC,OAAQ,eACRC,YAAa,eACbC,YAAa,eACbC,KAAM,aACNC,gBAAiB,aACjBC,QAAS,eACTC,MAAO,eACPC,QAAS,gBACTC,WAAY,kBACZC,MAAO,cACPC,OAAQ,eACRC,YAAa,eAfjBC,QAAA,eACAf,aAAO,gBACHC,QAAAA,YACAC,OAAAA,eACAC,gBAAQ,qBAIRI,OAAAA,SAAAA,GACAC,IAAAA,EAASQ,KAAAhB,MARNiB,EAAAC,MASHT,EATG,mBASIO,KAAAG,GATJH,KAAAG,GAAAC,KAAAJ,KAAAC,GAAA,KAgBHI,OANAX,IACAC,EAAAA,EAAYW,QAAAN,KAXTO,aAAAN,GAAAD,KAAAQ,WAAAP,GAYHL,OAAOa,KAAAC,MAAA,6BAAPd,4BAZGK,EAAAC,KAYHN,YAEae,IAAbb,EAAAA,QAdGG,EAAAW,MAAA,MAeHb,EAAAA,MAAAA,EAASa,OACTP,GAhBGQ,WAF0B,SAAAZ,GAuC7B,OAAO,IAAIa,EAAAC,QAAcC,MAf7BC,GAAAA,SAAAhB,EAAAgB,GACAC,WAAQjB,EAASA,WACbkB,SAAIhB,EAAagB,SACjBC,SAAIC,EAAeD,SACnBlB,KAAKmB,EAAOnB,KACRmB,OAAAA,EAAQpB,OACRqB,KAAAA,EAAYZ,QACfa,SAAAtB,EAAAsB,YAqBLhB,aAAc,SAASN,GAdvBY,GAAAA,EAAYW,YACR,OAAOxB,KAAIQ,WAAAP,GAIGA,eAAVmB,EAAAA,OACAlB,EAAMD,WAAUC,0CALU,IAAAZ,EAA9BW,EAAAX,KAvC6BA,IAkEzBA,KAfRmC,EAAAC,KAAAzB,EAAAK,QAAA,SAAAqB,GACApB,EAAAA,MAAcqB,MAAAD,EAAA,GAAS1B,MAAT0B,EAAoB,QAqB9B,IAAIE,EAAcC,EAAAf,QAAGgB,OAfrB,OAAA9B,EAAA+B,SACA,IAAI/B,aACAA,EAAUgC,EAAAA,QAAAA,SACb,MAiBG,IAAK,QAfTJ,EAAAC,EAAAf,QAAAmB,MACI5C,MACJ,IAAKA,cACDA,EAAAwC,EAAAf,QAAAoB,YAqBJ,OAAO,IAAIN,EAAYb,MAfvBC,GAAAA,SAAAhB,EAAAgB,GACA3B,KAAIuC,EACJI,WAAQhC,EAAU+B,YAAlB,uBACII,SAAKnC,EAAAmC,SACDP,SAAAA,EAAAA,SACAV,SAAAlB,EAAAkB,SACJI,SAAKtB,EAALsB,SACIM,WAAAA,EAAcQ,WACdC,WAAA,aAAArC,EAAAsC,UAqBZC,gBAAiB,SAASvC,GAdtB,OAAAA,EAAOuB,YACHP,KAAAA,WAAahB,GAIbmB,IAAAA,EAAAA,QAAAA,UAAUnB,MACVkB,GAAAA,SAAAA,EAAUlB,GACVsB,KAAAA,EAAUtB,QACVoC,QAAAA,EAAYpC,QACZqC,SAAAA,EAAYrC,SATYsB,SAA5BtB,EAAAsB,YAeAf,WAAA,SAAAP,GAEI,GAAAA,EAAAK,SAAYE,EAAWP,KAkBvB,GAjBHA,EAAAwC,KAAAxC,EAAAmB,SAiBOsB,EAAA3B,QAAM4B,QAAQ1C,EAAUW,OAfhCX,EAAAW,MAAA,UAEIK,GAAAA,EAAAA,QAAAA,EAAahB,OADY,CAEzBX,IAAMW,EAAUK,GAChB0B,IAAS/B,IAAAA,KAAAA,EAHgBW,MAAA,CAKzBW,GADAJ,GAAoBA,OAJKlB,EAAAW,MAAAgC,KAKf3C,EAAUsB,SALxB,MAwBgBsB,GAAa,KAdrB5C,EAAAW,MAAAiC,EAKA5C,OAAAA,IAAAA,EAAAA,QAAAA,OACHgB,GAAAA,SAAMhB,EAAAgB,GACHf,KAAAD,EAAM6C,KACFL,KAAAxC,EAAI4C,KACJT,SAAAnC,EAAKmC,SACDS,YAAAA,EAAAA,YACAE,SAAA9C,EAAI8C,SACAxB,SAAAtB,EAAAsB,YAKXyB,aAAA,SAAA/C,GACJ,OAAA,IAAA6B,EAAAf,QAAAkC,OAAAjC,MACJC,GAAAA,SAAAhB,EAAAgB,GACDiC,QAAA,SAAAjD,EAAAC,KACAsB,YAAWvB,EAAAuB,YACPP,IAAAA,EAAAA,IACAf,IAAAA,EAAMD,IACNwC,SAAMxC,EAAUwC,YAHAU,aAApB,SAAAlD,GASH,OApJgC,IAAA6B,EAAAf,QAAAqC,QAqKzBnC,GAAAA,SAAahB,EAAUgB,GAf/BoC,KAAApD,EAAAoD,QAKQ7B,cAAAA,SAAAA,GACA8B,OAAAA,IAAAA,EAAAA,QAAKrD,YAJiBe,MAKtBuC,GAAAA,SAAKtD,EALiBgB,GAMtBM,OAAAA,MAAUtB,MAAAA,MAAUsB,SAAAA,MAAAA,KAAAA,MAAAA,UANEA,SAA1BtB,EAAAsB,YAYAiC,YAAA,SAAWvD,GACPgB,OAAAA,IAAAA,EAAAA,SACAoC,GAAAA,SAAMpD,EAAUoD,GAFC9B,SAArBtB,EAAAsB,YAQAkC,cAAO,SAAIxD,GACPgB,OAAAA,IAAAA,EAAAA,QAAahB,MACbX,GAAAA,SAASsC,EAAOX,GAChBM,SAAAA,EAAUtB,SAHiBmB,SAA/BnB,EAAAmB,SA5K6BG,SAAAtB,EAAAsB,YAsLzBN,UAAAA,SAAAA,GACAM,OAAAA,IAAAA,EAAAA,QAAUtB,MAFSgB,GAAAA,SAAvBhB,EAAAgB,GArL6BE,SAAAlB,EAAAkB,SA0MzBC,SAAUnB,EAAUmB,SAf5BG,SAAAtB,EAAAsB,YAMQA,kBAAAA,SAAUtB,GAJgB,IAAAyD,EAA9B1D,KAMH,OAnMgC,IAAA2D,EAAA5C,QAAAC,MAoNzBC,GAAAA,SAAahB,EAAUgB,GAf/BM,SAAA,WACAqC,EAAWC,IAAAC,QAAA,cACmBC,aAA1B,SAAA9D,GAMH,OA7MgC,IAAA6B,EAAAf,QAAAiD,QA8NzB/C,GAAAA,SAAahB,EAAUgB,GAf/BM,SAAAtB,EAAAsB","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport SelectContent from \"mvc/ui/ui-select-content\";\nimport SelectLibrary from \"mvc/ui/ui-select-library\";\nimport SelectFtp from \"mvc/ui/ui-select-ftp\";\nimport SelectGenomeSpace from \"mvc/ui/ui-select-genomespace\";\nimport ColorPicker from \"mvc/ui/ui-color-picker\";\n// create form view\nexport default Backbone.Model.extend({\n    /** Available parameter types */\n    types: {\n        text: \"_fieldText\",\n        password: \"_fieldText\",\n        select: \"_fieldSelect\",\n        data_column: \"_fieldSelect\",\n        genomebuild: \"_fieldSelect\",\n        data: \"_fieldData\",\n        data_collection: \"_fieldData\",\n        integer: \"_fieldSlider\",\n        float: \"_fieldSlider\",\n        boolean: \"_fieldBoolean\",\n        drill_down: \"_fieldDrilldown\",\n        color: \"_fieldColor\",\n        hidden: \"_fieldHidden\",\n        hidden_data: \"_fieldHidden\",\n        baseurl: \"_fieldHidden\",\n        library_data: \"_fieldLibrary\",\n        ftpfile: \"_fieldFtp\",\n        upload: \"_fieldUpload\",\n        genomespacefile: \"_fieldGenomeSpace\"\n    },\n\n    /** Returns an input field for a given field type */\n    create: function(input_def) {\n        var fieldClass = this.types[input_def.type];\n        var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n        if (!field) {\n            field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n            Galaxy.emit.debug(\"form-parameters::_addRow()\", `Auto matched field type (${input_def.type}).`);\n        }\n        input_def.value === undefined && (input_def.value = null);\n        field.value(input_def.value);\n        return field;\n    },\n\n    /** Data input field */\n    _fieldData: function(input_def) {\n        return new SelectContent.View({\n            id: `field-${input_def.id}`,\n            extensions: input_def.extensions,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            type: input_def.type,\n            flavor: input_def.flavor,\n            data: input_def.options,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Select/Checkbox/Radio options field */\n    _fieldSelect: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // customize properties\n        if (input_def.type == \"data_column\") {\n            input_def.error_text = \"Missing columns in referenced dataset.\";\n        }\n\n        // identify available options\n        var data = input_def.data;\n        if (!data) {\n            data = [];\n            _.each(input_def.options, option => {\n                data.push({ label: option[0], value: option[1] });\n            });\n        }\n\n        // identify display type\n        var SelectClass = Ui.Select;\n        switch (input_def.display) {\n            case \"checkboxes\":\n                SelectClass = Ui.Checkbox;\n                break;\n            case \"radio\":\n                SelectClass = Ui.Radio;\n                break;\n            case \"radiobutton\":\n                SelectClass = Ui.RadioButton;\n                break;\n        }\n\n        // create select field\n        return new SelectClass.View({\n            id: `field-${input_def.id}`,\n            data: data,\n            error_text: input_def.error_text || \"No options available\",\n            readonly: input_def.readonly,\n            multiple: input_def.multiple,\n            optional: input_def.optional,\n            onchange: input_def.onchange,\n            individual: input_def.individual,\n            searchable: input_def.flavor !== \"workflow\"\n        });\n    },\n\n    /** Drill down options field */\n    _fieldDrilldown: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // create drill down field\n        return new Ui.Drilldown.View({\n            id: `field-${input_def.id}`,\n            data: input_def.options,\n            display: input_def.display,\n            optional: input_def.optional,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Text input field */\n    _fieldText: function(input_def) {\n        // field replaces e.g. a select field\n        if (input_def.options && input_def.data) {\n            input_def.area = input_def.multiple;\n            if (Utils.isEmpty(input_def.value)) {\n                input_def.value = null;\n            } else {\n                if ($.isArray(input_def.value)) {\n                    var str_value = \"\";\n                    for (var i in input_def.value) {\n                        str_value += String(input_def.value[i]);\n                        if (!input_def.multiple) {\n                            break;\n                        }\n                        str_value += \"\\n\";\n                    }\n                    input_def.value = str_value;\n                }\n            }\n        }\n        // create input element\n        return new Ui.Input({\n            id: `field-${input_def.id}`,\n            type: input_def.type,\n            area: input_def.area,\n            readonly: input_def.readonly,\n            placeholder: input_def.placeholder,\n            datalist: input_def.datalist,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Slider field */\n    _fieldSlider: function(input_def) {\n        return new Ui.Slider.View({\n            id: `field-${input_def.id}`,\n            precise: input_def.type == \"float\",\n            is_workflow: input_def.is_workflow,\n            min: input_def.min,\n            max: input_def.max,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Hidden field */\n    _fieldHidden: function(input_def) {\n        return new Ui.Hidden({\n            id: `field-${input_def.id}`,\n            info: input_def.info\n        });\n    },\n\n    /** Boolean field */\n    _fieldBoolean: function(input_def) {\n        return new Ui.RadioButton.View({\n            id: `field-${input_def.id}`,\n            data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Color picker field */\n    _fieldColor: function(input_def) {\n        return new ColorPicker({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Library dataset field */\n    _fieldLibrary: function(input_def) {\n        return new SelectLibrary.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** FTP file field */\n    _fieldFtp: function(input_def) {\n        return new SelectFtp.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** GenomeSpace file select field\n         */\n    _fieldGenomeSpace: function(input_def) {\n        var self = this;\n        return new SelectGenomeSpace.View({\n            id: `field-${input_def.id}`,\n            onchange: function() {\n                self.app.trigger(\"change\");\n            }\n        });\n    },\n\n    /** Upload file field */\n    _fieldUpload: function(input_def) {\n        return new Ui.Upload({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    }\n});\n"]}