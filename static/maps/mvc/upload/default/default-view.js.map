{"version":3,"sources":["mvc/upload/default/default-view.js"],"names":["Backbone","View","extend","upload_size","collection","_uploadModel2","default","Collection","counter","announce","success","error","running","reset","this","initialize","app","self","options","list_extensions","list_genomes","ui_button","currentFtp","_template","$","_uiMisc2","Button","id","title","onclick","uploadbox","select","icon","btnFtp","ftp_upload_site","btnCreate","$uploadbox","btnLocal","_eventStop","modal","hide","btnStop","btnReset","btnStart","btnClose","prepend","button","$el","nginx_upload_path","_eventReset","file","_eventAnnounce","index","toData","get","history_id","percentage","message","each","_eventSuccess","_eventError","complete","url","_eventComplete","addClass","ondragleave","removeClass","css","ondragover","ext","composite_files","value","default_extension","extension","e","container","target","select_extension","text","on","preventDefault","select_genome","_uiSelect2","data","default_genome","onchange","genome","loader","_lazyLimited2","$container","new_content","model","upload_row","_defaultRow2","$uploadtable","find","append","_changeGenome","_eventRemove","render","html","enable_reset","enable_start","compatible","show_table","enable_sources","new_model","file_name","name","file_size","file_mode","file_path","file_data","add","_eventProgress","it","_uploadPercentage","set","status","upload_completed","Galaxy","currHistoryPanel","info","_eventFtp","ftp","size","empty","_uploadFtp3","onadd","ftp_file","mode","path","onremove","model_index","_eventStart","_eventCreate","currentHistory","_uploadFtp","_changeExtension","defaults_only","list","remove","length","uploadpost","_"],"mappings":"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","file":"../../../../scripts/mvc/upload/default/default-view.js","sourcesContent":["/** Renders contents of the default uploader */\nimport Utils from \"utils/utils\";\nimport UploadModel from \"mvc/upload/upload-model\";\nimport UploadRow from \"mvc/upload/default/default-row\";\nimport UploadFtp from \"mvc/upload/upload-ftp\";\nimport UploadExtension from \"mvc/upload/upload-extension\";\nimport Popover from \"mvc/ui/ui-popover\";\nimport Select from \"mvc/ui/ui-select\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport LazyLimited from \"mvc/lazy/lazy-limited\";\nimport \"utils/uploadbox\";\nexport default Backbone.View.extend({\n    // current upload size in bytes\n    upload_size: 0,\n\n    // contains upload row models\n    collection: new UploadModel.Collection(),\n\n    // keeps track of the current uploader state\n    counter: {\n        announce: 0,\n        success: 0,\n        error: 0,\n        running: 0,\n        reset: function() {\n            this.announce = this.success = this.error = this.running = 0;\n        }\n    },\n\n    initialize: function(app) {\n        var self = this;\n        this.app = app;\n        this.options = app.options;\n        this.list_extensions = app.list_extensions;\n        this.list_genomes = app.list_genomes;\n        this.ui_button = app.ui_button;\n        this.ftp_upload_site = app.currentFtp();\n\n        // build template\n        this.setElement(this._template());\n        this.$uploadbox = this.$(\".upload-box\");\n        this.$uploadtable = this.$(\".upload-table\");\n\n        // append buttons to dom\n        this.btnLocal = new Ui.Button({\n            id: \"btn-local\",\n            title: \"Choose local file\",\n            onclick: function() {\n                self.uploadbox.select();\n            },\n            icon: \"fa fa-laptop\"\n        });\n        this.btnFtp = new Ui.Button({\n            id: \"btn-ftp\",\n            title: \"Choose FTP file\",\n            onclick: function() {\n                self._eventFtp();\n            },\n            icon: \"fa fa-folder-open-o\"\n        });\n        this.btnCreate = new Ui.Button({\n            id: \"btn-new\",\n            title: \"Paste/Fetch data\",\n            onclick: function() {\n                self._eventCreate();\n            },\n            icon: \"fa fa-edit\"\n        });\n        this.btnStart = new Ui.Button({\n            id: \"btn-start\",\n            title: \"Start\",\n            onclick: function() {\n                self._eventStart();\n            }\n        });\n        this.btnStop = new Ui.Button({\n            id: \"btn-stop\",\n            title: \"Pause\",\n            onclick: function() {\n                self._eventStop();\n            }\n        });\n        this.btnReset = new Ui.Button({\n            id: \"btn-reset\",\n            title: \"Reset\",\n            onclick: function() {\n                self._eventReset();\n            }\n        });\n        this.btnClose = new Ui.Button({\n            id: \"btn-close\",\n            title: \"Close\",\n            onclick: function() {\n                self.app.modal.hide();\n            }\n        });\n        _.each(\n            [this.btnLocal, this.btnFtp, this.btnCreate, this.btnStop, this.btnReset, this.btnStart, this.btnClose],\n            button => {\n                self.$(\".upload-buttons\").prepend(button.$el);\n            }\n        );\n\n        // file upload\n        this.uploadbox = this.$uploadbox.uploadbox({\n            url: this.app.options.nginx_upload_path,\n            announce: function(index, file) {\n                self._eventAnnounce(index, file);\n            },\n            initialize: function(index) {\n                return self.app.toData([self.collection.get(index)], self.history_id);\n            },\n            progress: function(index, percentage) {\n                self._eventProgress(index, percentage);\n            },\n            success: function(index, message) {\n                self._eventSuccess(index, message);\n            },\n            error: function(index, message) {\n                self._eventError(index, message);\n            },\n            complete: function() {\n                self._eventComplete();\n            },\n            ondragover: function() {\n                self.$uploadbox.addClass(\"highlight\");\n            },\n            ondragleave: function() {\n                self.$uploadbox.removeClass(\"highlight\");\n            }\n        });\n\n        // add ftp file viewer\n        this.ftp = new Popover.View({\n            title: \"FTP files\",\n            container: this.btnFtp.$el\n        });\n\n        // select extension\n        this.select_extension = new Select.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-extension\"),\n            data: _.filter(this.list_extensions, ext => !ext.composite_files),\n            value: this.options.default_extension,\n            onchange: function(extension) {\n                self._changeExtension(extension);\n            }\n        });\n\n        // handle extension info popover\n        this.$(\".upload-footer-extension-info\")\n            .on(\"click\", e => {\n                new UploadExtension({\n                    $el: $(e.target),\n                    title: self.select_extension.text(),\n                    extension: self.select_extension.value(),\n                    list: self.list_extensions,\n                    placement: \"top\"\n                });\n            })\n            .on(\"mousedown\", e => {\n                e.preventDefault();\n            });\n\n        // genome extension\n        this.select_genome = new Select.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-genome\"),\n            data: this.list_genomes,\n            value: this.options.default_genome,\n            onchange: function(genome) {\n                self._changeGenome(genome);\n            }\n        });\n\n        // Lazy load helper\n        this.loader = new LazyLimited({\n            $container: this.$uploadbox,\n            collection: this.collection,\n            new_content: function(model) {\n                var upload_row = new UploadRow(self, { model: model });\n                self.$uploadtable.find(\"> tbody:first\").append(upload_row.$el);\n                upload_row.render();\n                return upload_row;\n            }\n        });\n\n        // events\n        this.collection.on(\"remove\", model => {\n            self._eventRemove(model);\n        });\n        this.render();\n    },\n\n    render: function() {\n        var message = \"\";\n        if (this.counter.announce == 0) {\n            if (this.uploadbox.compatible()) {\n                message = \"&nbsp;\";\n            } else {\n                message =\n                    \"Browser does not support Drag & Drop. Try Firefox 4+, Chrome 7+, IE 10+, Opera 12+ or Safari 6+.\";\n            }\n        } else {\n            if (this.counter.running == 0) {\n                message = `You added ${this.counter\n                    .announce} file(s) to the queue. Add more files or click 'Start' to proceed.`;\n            } else {\n                message = `Please wait...${this.counter.announce} out of ${this.counter.running} remaining.`;\n            }\n        }\n        this.$(\".upload-top-info\").html(message);\n        var enable_reset =\n            this.counter.running == 0 && this.counter.announce + this.counter.success + this.counter.error > 0;\n        var enable_start = this.counter.running == 0 && this.counter.announce > 0;\n        var enable_sources = this.counter.running == 0;\n        var show_table = this.counter.announce + this.counter.success + this.counter.error > 0;\n        this.btnReset[enable_reset ? \"enable\" : \"disable\"]();\n        this.btnStart[enable_start ? \"enable\" : \"disable\"]();\n        this.btnStart.$el[enable_start ? \"addClass\" : \"removeClass\"](\"btn-primary\");\n        this.btnStop[this.counter.running > 0 ? \"enable\" : \"disable\"]();\n        this.btnLocal[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnFtp[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnCreate[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnFtp.$el[this.ftp_upload_site ? \"show\" : \"hide\"]();\n        this.$(\".upload-table\")[show_table ? \"show\" : \"hide\"]();\n        this.$(\".upload-helper\")[show_table ? \"hide\" : \"show\"]();\n    },\n\n    /** A new file has been dropped/selected through the uploadbox plugin */\n    _eventAnnounce: function(index, file) {\n        this.counter.announce++;\n        var new_model = new UploadModel.Model({\n            id: index,\n            file_name: file.name,\n            file_size: file.size,\n            file_mode: file.mode || \"local\",\n            file_path: file.path,\n            file_data: file\n        });\n        this.render();\n        this.collection.add(new_model);\n    },\n\n    /** Progress */\n    _eventProgress: function(index, percentage) {\n        var it = this.collection.get(index);\n        it.set(\"percentage\", percentage);\n        this.ui_button.model.set(\"percentage\", this._uploadPercentage(percentage, it.get(\"file_size\")));\n    },\n\n    /** Success */\n    _eventSuccess: function(index, message) {\n        var it = this.collection.get(index);\n        it.set({ percentage: 100, status: \"success\" });\n        this.ui_button.model.set(\"percentage\", this._uploadPercentage(100, it.get(\"file_size\")));\n        this.upload_completed += it.get(\"file_size\") * 100;\n        this.counter.announce--;\n        this.counter.success++;\n        this.render();\n        Galaxy.currHistoryPanel.refreshContents();\n    },\n\n    /** Error */\n    _eventError: function(index, message) {\n        var it = this.collection.get(index);\n        it.set({ percentage: 100, status: \"error\", info: message });\n        this.ui_button.model.set({\n            percentage: this._uploadPercentage(100, it.get(\"file_size\")),\n            status: \"danger\"\n        });\n        this.upload_completed += it.get(\"file_size\") * 100;\n        this.counter.announce--;\n        this.counter.error++;\n        this.render();\n    },\n\n    /** Queue is done */\n    _eventComplete: function() {\n        this.collection.each(model => {\n            model.get(\"status\") == \"queued\" && model.set(\"status\", \"init\");\n        });\n        this.counter.running = 0;\n        this.render();\n    },\n\n    /** Remove model from upload list */\n    _eventRemove: function(model) {\n        var status = model.get(\"status\");\n        if (status == \"success\") {\n            this.counter.success--;\n        } else if (status == \"error\") {\n            this.counter.error--;\n        } else {\n            this.counter.announce--;\n        }\n        this.uploadbox.remove(model.id);\n        this.render();\n    },\n\n    //\n    // events triggered by this view\n    //\n\n    /** Show/hide ftp popup */\n    _eventFtp: function() {\n        if (!this.ftp.visible) {\n            this.ftp.empty();\n            var self = this;\n            this.ftp.append(\n                new UploadFtp({\n                    collection: this.collection,\n                    ftp_upload_site: this.ftp_upload_site,\n                    onadd: function(ftp_file) {\n                        return self.uploadbox.add([\n                            {\n                                mode: \"ftp\",\n                                name: ftp_file.path,\n                                size: ftp_file.size,\n                                path: ftp_file.path\n                            }\n                        ]);\n                    },\n                    onremove: function(model_index) {\n                        self.collection.remove(model_index);\n                    }\n                }).$el\n            );\n            this.ftp.show();\n        } else {\n            this.ftp.hide();\n        }\n    },\n\n    /** Create a new file */\n    _eventCreate: function() {\n        this.uploadbox.add([{ name: \"New File\", size: 0, mode: \"new\" }]);\n    },\n\n    /** Start upload process */\n    _eventStart: function() {\n        if (this.counter.announce != 0 && this.counter.running == 0) {\n            // prepare upload process\n            var self = this;\n            this.upload_size = 0;\n            this.upload_completed = 0;\n            this.collection.each(model => {\n                if (model.get(\"status\") == \"init\") {\n                    model.set(\"status\", \"queued\");\n                    self.upload_size += model.get(\"file_size\");\n                }\n            });\n            this.ui_button.model.set({\n                percentage: 0,\n                status: \"success\"\n            });\n            this.counter.running = this.counter.announce;\n            this.history_id = this.app.currentHistory();\n\n            // package ftp files separately, and remove them from queue\n            this._uploadFtp();\n\n            // queue remaining files\n            this.uploadbox.start();\n            this.render();\n        }\n    },\n\n    /** Pause upload process */\n    _eventStop: function() {\n        if (this.counter.running > 0) {\n            this.ui_button.model.set(\"status\", \"info\");\n            $(\".upload-top-info\").html(\"Queue will pause after completing the current file...\");\n            this.uploadbox.stop();\n        }\n    },\n\n    /** Remove all */\n    _eventReset: function() {\n        if (this.counter.running == 0) {\n            var self = this;\n            this.collection.reset();\n            this.counter.reset();\n            this.uploadbox.reset();\n            this.select_extension.value(this.options.default_extension);\n            this.select_genome.value(this.options.default_genome);\n            this.ui_button.model.set(\"percentage\", 0);\n            this.render();\n        }\n    },\n\n    /** Update extension for all models */\n    _changeExtension: function(extension, defaults_only) {\n        var self = this;\n        this.collection.each(model => {\n            if (\n                model.get(\"status\") == \"init\" &&\n                (model.get(\"extension\") == self.options.default_extension || !defaults_only)\n            ) {\n                model.set(\"extension\", extension);\n            }\n        });\n    },\n\n    /** Update genome for all models */\n    _changeGenome: function(genome, defaults_only) {\n        var self = this;\n        this.collection.each(model => {\n            if (\n                model.get(\"status\") == \"init\" &&\n                (model.get(\"genome\") == self.options.default_genome || !defaults_only)\n            ) {\n                model.set(\"genome\", genome);\n            }\n        });\n    },\n\n    /** Package and upload ftp files in a single request */\n    _uploadFtp: function() {\n        var self = this;\n        var list = [];\n        this.collection.each(model => {\n            if (model.get(\"status\") == \"queued\" && model.get(\"file_mode\") == \"ftp\") {\n                self.uploadbox.remove(model.id);\n                list.push(model);\n            }\n        });\n        if (list.length > 0) {\n            $.uploadpost({\n                data: this.app.toData(list),\n                url: this.app.options.nginx_upload_path,\n                success: function(message) {\n                    _.each(list, model => {\n                        self._eventSuccess(model.id);\n                    });\n                },\n                error: function(message) {\n                    _.each(list, model => {\n                        self._eventError(model.id, message);\n                    });\n                }\n            });\n        }\n    },\n\n    /** Calculate percentage of all queued uploads */\n    _uploadPercentage: function(percentage, size) {\n        return (this.upload_completed + percentage * size) / this.upload_size;\n    },\n\n    /** Template */\n    _template: function() {\n        return (\n            '<div class=\"upload-view-default\">' +\n            '<div class=\"upload-top\">' +\n            '<h6 class=\"upload-top-info\"/>' +\n            \"</div>\" +\n            '<div class=\"upload-box\">' +\n            '<div class=\"upload-helper\"><i class=\"fa fa-files-o\"/>Drop files here</div>' +\n            '<table class=\"upload-table ui-table-striped\" style=\"display: none;\">' +\n            \"<thead>\" +\n            \"<tr>\" +\n            \"<th>Name</th>\" +\n            \"<th>Size</th>\" +\n            \"<th>Type</th>\" +\n            \"<th>Genome</th>\" +\n            \"<th>Settings</th>\" +\n            \"<th>Status</th>\" +\n            \"<th/>\" +\n            \"</tr>\" +\n            \"</thead>\" +\n            \"<tbody/>\" +\n            \"</table>\" +\n            \"</div>\" +\n            '<div class=\"upload-footer\">' +\n            '<span class=\"upload-footer-title\">Type (set all):</span>' +\n            '<span class=\"upload-footer-extension\"/>' +\n            '<span class=\"upload-footer-extension-info upload-icon-button fa fa-search\"/> ' +\n            '<span class=\"upload-footer-title\">Genome (set all):</span>' +\n            '<span class=\"upload-footer-genome\"/>' +\n            \"</div>\" +\n            '<div class=\"upload-buttons\"/>' +\n            \"</div>\"\n        );\n    }\n});\n"]}