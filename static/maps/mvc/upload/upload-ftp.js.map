{"version":3,"sources":["mvc/upload/upload-ftp.js"],"names":["Backbone","View","extend","initialize","options","this","model","Model","cls","class_add","class_remove","class_partial","help_enabled","help_text","ftp_upload_site","collection","onchange","onadd","onremove","get","setElement","$","render","self","$wait","$content","hide","$warning","$help","$number","ajax","url","$body","root","method","success","$select","ftp_files","set","_index","_renderTable","error","empty","rows","push","_renderRow","ftp_file","size","html","length","$disk","_utils2","default","bytesToString","show","addClass","_all","attributes","$it","$icon","find","model_index","ftp_index","path","undefined","on","_switch","append","each","id","index","add","_refresh","removeClass","new_index","counts","_","reduce","element","memo","_templateRow","escape","ctime","_template"],"mappings":"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","file":"../../../scripts/mvc/upload/upload-ftp.js","sourcesContent":["/** This renders the content of the ftp popup **/\nimport Utils from \"utils/utils\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = new Backbone.Model({\n            cls: \"upload-ftp\",\n            class_add: \"upload-icon-button fa fa-square-o\",\n            class_remove: \"upload-icon-button fa fa-check-square-o\",\n            class_partial: \"upload-icon-button fa fa-minus-square-o\",\n            help_enabled: true,\n            help_text: `This Galaxy server allows you to upload files via FTP. To upload some files, log in to the FTP server at <strong>${options.ftp_upload_site}</strong> using your Galaxy credentials.`,\n            collection: null,\n            onchange: function() {},\n            onadd: function() {},\n            onremove: function() {}\n        }).set(options);\n        this.collection = this.model.get(\"collection\");\n        this.setElement(this._template());\n        this.$content = this.$(\".upload-ftp-content\");\n        this.$wait = this.$(\".upload-ftp-wait\");\n        this.$help = this.$(\".upload-ftp-help\");\n        this.$number = this.$(\".upload-ftp-number\");\n        this.$disk = this.$(\".upload-ftp-disk\");\n        this.$body = this.$(\".upload-ftp-body\");\n        this.$warning = this.$(\".upload-ftp-warning\");\n        this.$select = this.$(\".upload-ftp-select-all\");\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$wait.show();\n        this.$content.hide();\n        this.$warning.hide();\n        this.$help.hide();\n        $.ajax({\n            url: `${Galaxy.root}api/remote_files`,\n            method: \"GET\",\n            success: function(ftp_files) {\n                self.model.set(\"ftp_files\", ftp_files);\n                self._index();\n                self._renderTable();\n            },\n            error: function() {\n                self._renderTable();\n            }\n        });\n    },\n\n    /** Fill table with ftp entries */\n    _renderTable: function() {\n        var self = this;\n        var ftp_files = this.model.get(\"ftp_files\");\n        this.rows = [];\n        if (ftp_files && ftp_files.length > 0) {\n            this.$body.empty();\n            var size = 0;\n            _.each(ftp_files, ftp_file => {\n                self.rows.push(self._renderRow(ftp_file));\n                size += ftp_file.size;\n            });\n            this.$number.html(`${ftp_files.length} files`);\n            this.$disk.html(Utils.bytesToString(size, true));\n            if (this.collection) {\n                this.$(\"._has_collection\").show();\n                this.$select\n                    .addClass(this.model.get(\"class_add\"))\n                    .off()\n                    .on(\"click\", () => {\n                        self._all();\n                    });\n                this._refresh();\n            }\n            this.$content.show();\n        } else {\n            this.$warning.show();\n        }\n        this.model.get(\"help_enabled\") && this.$help.show();\n        this.$wait.hide();\n    },\n\n    /** Add row */\n    _renderRow: function(ftp_file) {\n        var self = this;\n        var options = this.model.attributes;\n        var $it = $(this._templateRow(ftp_file));\n        var $icon = $it.find(\".icon\");\n        this.$body.append($it);\n        if (this.collection) {\n            var model_index = this.ftp_index[ftp_file.path];\n            $icon.addClass(model_index === undefined ? options.class_add : options.class_remove);\n            $it.on(\"click\", () => {\n                self._switch($icon, ftp_file);\n                self._refresh();\n            });\n        } else {\n            $it.on(\"click\", () => {\n                options.onchange(ftp_file);\n            });\n        }\n        return $icon;\n    },\n\n    /** Create ftp index */\n    _index: function() {\n        var self = this;\n        this.ftp_index = {};\n        this.collection &&\n            this.collection.each(model => {\n                if (model.get(\"file_mode\") == \"ftp\") {\n                    self.ftp_index[model.get(\"file_path\")] = model.id;\n                }\n            });\n    },\n\n    /** Select all event handler */\n    _all: function() {\n        var options = this.model.attributes;\n        var ftp_files = this.model.get(\"ftp_files\");\n        var add = this.$select.hasClass(options.class_add);\n        for (var index in ftp_files) {\n            var ftp_file = ftp_files[index];\n            var model_index = this.ftp_index[ftp_file.path];\n            if ((model_index === undefined && add) || (model_index !== undefined && !add)) {\n                this._switch(this.rows[index], ftp_file);\n            }\n        }\n        this._refresh();\n    },\n\n    /** Handle collection changes */\n    _switch: function($icon, ftp_file) {\n        $icon.removeClass();\n        var options = this.model.attributes;\n        var model_index = this.ftp_index[ftp_file.path];\n        if (model_index === undefined) {\n            var new_index = options.onadd(ftp_file);\n            $icon.addClass(options.class_remove);\n            this.ftp_index[ftp_file.path] = new_index;\n        } else {\n            options.onremove(model_index);\n            $icon.addClass(options.class_add);\n            this.ftp_index[ftp_file.path] = undefined;\n        }\n    },\n\n    /** Refresh select all button state */\n    _refresh: function() {\n        var counts = _.reduce(\n            this.ftp_index,\n            (memo, element) => {\n                element !== undefined && memo++;\n                return memo;\n            },\n            0\n        );\n        this.$select.removeClass();\n        if (counts == 0) {\n            this.$select.addClass(this.model.get(\"class_add\"));\n        } else {\n            this.$select.addClass(\n                counts == this.rows.length ? this.model.get(\"class_remove\") : this.model.get(\"class_partial\")\n            );\n        }\n    },\n\n    /** Template of row */\n    _templateRow: function(options) {\n        return `<tr class=\"upload-ftp-row\"><td class=\"_has_collection\" style=\"display: none;\"><div class=\"icon\"/></td><td class=\"ftp-name\">${_.escape(\n            options.path\n        )}</td><td class=\"ftp-size\">${Utils.bytesToString(\n            options.size\n        )}</td><td class=\"ftp-time\">${options.ctime}</td></tr>`;\n    },\n\n    /** Template of main view */\n    _template: function() {\n        return `<div class=\"${this.model.get(\n            \"cls\"\n        )}\"><div class=\"upload-ftp-wait fa fa-spinner fa-spin\"/><div class=\"upload-ftp-help\">${this.model.get(\n            \"help_text\"\n        )}</div><div class=\"upload-ftp-content\"><span style=\"whitespace: nowrap; float: left;\">Available files: </span><span style=\"whitespace: nowrap; float: right;\"><span class=\"upload-icon fa fa-file-text-o\"/><span class=\"upload-ftp-number\"/>&nbsp;&nbsp;<span class=\"upload-icon fa fa-hdd-o\"/><span class=\"upload-ftp-disk\"/></span><table class=\"grid\" style=\"float: left;\"><thead><tr><th class=\"_has_collection\" style=\"display: none;\"><div class=\"upload-ftp-select-all\"></th><th>Name</th><th>Size</th><th>Created</th></tr></thead><tbody class=\"upload-ftp-body\"/></table></div><div class=\"upload-ftp-warning warningmessage\">Your FTP directory does not contain any files.</div>`;\n        (\"<div>\");\n    }\n});\n"]}