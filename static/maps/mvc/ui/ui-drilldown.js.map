{"version":3,"sources":["mvc/ui/ui-drilldown.js"],"names":["View","_uiOptions2","default","BaseIcons","extend","initialize","options","type","display","multiple","prototype","call","this","_setValue","new_value","undefined","header_index","self","values","$","isArray","_","each","v","list","element","_setState","header_id","is_expanded","$button","$subgroup","data","show","removeClass","addClass","_templateOptions","find","iterate","$tmpl","header","i","level","length","new_header","slice","value","$group","$el","on","_utils2","uid","has_options","name","append","label","attach","model","get","_template","id"],"mappings":"8NAGIA,EAAOC,EAAAC,QAAQC,UAAUC,QACzBC,WAAY,SAASC,GACjBA,EAAQC,KAAOD,EAAQE,SAAW,WAClCF,EAAQG,SAA2B,YAAhBH,EAAQC,KAC3BN,EAAAC,QAAQC,UAAUO,UAAUL,WAAWM,KAAKC,KAAMN,IAItDO,UAAW,SAASC,GAEhB,GADAb,EAAAC,QAAQC,UAAUO,UAAUG,UAAUF,KAAKC,KAAME,QAC/BC,IAAdD,GAAyC,OAAdA,GAAsBF,KAAKI,aAAc,CACpE,IAAIC,EAAOL,KACPM,EAASC,EAAEC,QAAQN,GAAaA,GAAaA,GACjDO,EAAEC,KAAKJ,EAAQ,SAAAK,GAhB3B,IAAAC,EAAAP,EAAAD,aAAAO,GAGWF,EAAAC,KAAAE,EAAA,SAAAC,GACKR,EAAAS,UAAAD,GAASnB,SAOrBO,UAAAA,SAAWc,EAAAC,GACP,IAAAC,EAAAjB,KAAAO,EAAA,WAAQhB,GACR2B,EAAIhB,KAAAA,EAAAA,aAA2BA,GAC3Be,EAAAE,KAAId,cAAJW,GACAA,GACAP,EAAAW,OACIH,EAAAI,YAAWhB,kBAAAiB,SAAX,qBAEIjB,EAAAA,OACHY,EAAAI,YAFD,mBAAAC,SAAA,oBAOZC,iBAAA,WAKI,SAAIP,EAAAA,EAAaD,GACbG,IAAAA,EAAUE,EAAVI,KAAUJ,WAAVL,GACAE,EAAAA,GAAAA,QAAQI,WAFZhB,EAGOS,UAAAC,GAAAE,EAAAE,KAAA,kBAoBP,SAASM,EAAQC,EAAOhC,EAASiC,GAdrCA,EAAAA,MACAJ,IAAAA,IAAAA,KAAkB7B,EAAA,CACVW,IAAAA,EAAJX,EAAAkC,GACKxB,EAALyB,EAAAnC,SAAAmC,EAAAnC,QAAAoC,OAAA,EAgBYC,EAAaJ,EAAOK,MAAM,GAdtC3B,EAAAD,aAAAyB,EAAAI,OAAAF,EAAAC,MAAA,GACA,IAAAE,EAAgBC,EAAhB,UACI,GAAIlB,EAAUkB,CACdlB,IAAQmB,EAAYC,EAAA/C,QAAAgD,MAChBjC,EAAAE,EAAeQ,WADnBO,SACI,UADJP,GAGHO,SAAA,yCAgBeJ,EAAYX,EAAE,UAd9Be,SAc4B,YAd5BP,GACSU,SAAT,yBACIE,EAASA,OACJpB,EAAL,UACQsB,OAAQnC,GACR6C,OACAR,EAAaJ,iBACZvB,MAAayB,EAAlBW,KACeP,MAAFJ,EAAbI,UAMIF,EAAIb,KAAAA,GAGJgB,EAAAA,EACI3B,EAAEb,QACG+C,GAGOC,EAAAA,OAAAA,GACAT,EAAAA,EAAOJ,QAIvBE,EAAAA,OACAN,EAAAA,iBACAS,MAAOO,EAAOvB,KACdyB,MAAOT,EAAQnB,SAKPkB,EAAAA,OAAAA,IA7DxBnB,IAAAA,EAAWd,KACPA,KAAAI,gBAkEC,IAAAsB,EAAAnB,EAAA,UAED,OAEAkB,EAAQC,EAAO1B,KAAK4C,MAAMC,IAAI,SAF9BnB,GAIHoB,UAhG+B,WAoG5B,OAAOvC,EAAE,UAFbe,SAAA,uCACAwB,KAAAA,KAAW9C,KAAA4C,MAAAG,kBAQX3D,KAAMA","file":"../../../scripts/mvc/ui/ui-drilldown.js","sourcesContent":["/** This class creates/wraps a drill down element. */\nimport Utils from \"utils/utils\";\nimport Options from \"mvc/ui/ui-options\";\nvar View = Options.BaseIcons.extend({\n    initialize: function(options) {\n        options.type = options.display || \"checkbox\";\n        options.multiple = options.type == \"checkbox\";\n        Options.BaseIcons.prototype.initialize.call(this, options);\n    },\n\n    /** Set states for selected values */\n    _setValue: function(new_value) {\n        Options.BaseIcons.prototype._setValue.call(this, new_value);\n        if (new_value !== undefined && new_value !== null && this.header_index) {\n            var self = this;\n            var values = $.isArray(new_value) ? new_value : [new_value];\n            _.each(values, v => {\n                var list = self.header_index[v];\n                _.each(list, element => {\n                    self._setState(element, true);\n                });\n            });\n        }\n    },\n\n    /** Expand/collapse a sub group */\n    _setState: function(header_id, is_expanded) {\n        var $button = this.$(`.button-${header_id}`);\n        var $subgroup = this.$(`.subgroup-${header_id}`);\n        $button.data(\"is_expanded\", is_expanded);\n        if (is_expanded) {\n            $subgroup.show();\n            $button.removeClass(\"fa-plus-square\").addClass(\"fa-minus-square\");\n        } else {\n            $subgroup.hide();\n            $button.removeClass(\"fa-minus-square\").addClass(\"fa-plus-square\");\n        }\n    },\n\n    /** Template to create options tree */\n    _templateOptions: function() {\n        var self = this;\n        this.header_index = {};\n\n        // attach event handler\n        function attach($el, header_id) {\n            var $button = $el.find(`.button-${header_id}`);\n            $button.on(\"click\", () => {\n                self._setState(header_id, !$button.data(\"is_expanded\"));\n            });\n        }\n\n        // recursive function which iterates through options\n        function iterate($tmpl, options, header) {\n            header = header || [];\n            for (var i in options) {\n                var level = options[i];\n                var has_options = level.options && level.options.length > 0;\n                var new_header = header.slice(0);\n                self.header_index[level.value] = new_header.slice(0);\n                var $group = $(\"<div/>\");\n                if (has_options) {\n                    var header_id = Utils.uid();\n                    var $button = $(\"<span/>\")\n                        .addClass(`button-${header_id}`)\n                        .addClass(\"ui-drilldown-button fa fa-plus-square\");\n                    var $subgroup = $(\"<div/>\")\n                        .addClass(`subgroup-${header_id}`)\n                        .addClass(\"ui-drilldown-subgroup\");\n                    $group.append(\n                        $(\"<div/>\")\n                            .append($button)\n                            .append(\n                                self._templateOption({\n                                    label: level.name,\n                                    value: level.value\n                                })\n                            )\n                    );\n                    new_header.push(header_id);\n                    iterate($subgroup, level.options, new_header);\n                    $group.append($subgroup);\n                    attach($group, header_id);\n                } else {\n                    $group.append(\n                        self._templateOption({\n                            label: level.name,\n                            value: level.value\n                        })\n                    );\n                }\n                $tmpl.append($group);\n            }\n        }\n\n        // iterate through options and create dom\n        var $tmpl = $(\"<div/>\");\n        iterate($tmpl, this.model.get(\"data\"));\n        return $tmpl;\n    },\n\n    /** Template for drill down view */\n    _template: function() {\n        return $(\"<div/>\")\n            .addClass(\"ui-options-list drilldown-container\")\n            .attr(\"id\", this.model.id);\n    }\n});\n\nexport default {\n    View: View\n};\n"]}