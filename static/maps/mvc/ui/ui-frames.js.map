{"version":3,"sources":["mvc/ui/ui-frames.js"],"names":["FrameView","Backbone","View","extend","initialize","options","this","model","Model","setElement","$","addClass","$el","self","append","tooltip","title","listenTo","$title","$header","find","_","menu","$content","$option","render","option","placement","remove","each","url","icon","isFunction","on","onclick","cols","rows","html","cell","attr","indexOf","visible","content","frame_counter","frame_uid","frame_list","event","margin","scroll","top_min","top","frame_max","el","top_max","frame_z","_frameResize","frame_shadow","defaults","defaultOptions","add","_frameInit","Galaxy","modal","buttons","hide","Close","_panelRefresh","show","frame","frame_id","width","height","body","_frameInsert","trigger","$frame","fadeOut","_toPixelCoord","parseInt","css","left","del","id","length","_panelAnimationComplete","mousemove","mouseup","mouseleave","type","events","x","y","DOMMouseScroll","mousedown .frame","mousedown .frame-background","mousedown .frame-scroll-up","mousedown .frame-scroll-down","_eventFrameMouseMove","originalEvent","e","event_xy_delta","target","hasClass","event_xy_new","xy","preventDefault","_frameIdentify","pageX","p","_frameDragStart","_toGridCoord","_frameScreen","min_dim","Math","max","_eventFrameMouseUp","_frameDragStop","_eventFrameClose","_frameOffset","l","frames","stopPropagation","_eventPanelScroll_up","_eventHide","_eventPanelScroll","_panelScroll","srcElement","parents","detail","wheelDelta","_frameFocus","_frameGrid","_eventPanelScroll_down","closest","px","grid_location","_toGrid","sign","g","_isCollision","is_collision_pair","_toPixel","top_new","min","i","done","b","a","_locationRank","loc","animate","window","screen_location","delta","place_list","push","f","grid_rank","sort","_framePlace","substring","new_loc","console","place","has_focus","j"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-frames.js","sourcesContent":["/** Frame view */\nvar FrameView = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement($(\"<div/>\").addClass(\"corner frame\"));\n        this.$el\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-header corner\")\n                    .append($(\"<div/>\").addClass(\"f-title\"))\n                    .append(\n                        $(\"<div/>\")\n                            .addClass(\"f-icon f-close fa fa-close\")\n                            .tooltip({\n                                title: \"Close\",\n                                placement: \"bottom\"\n                            })\n                    )\n            )\n            .append($(\"<div/>\").addClass(\"f-content\"))\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-resize f-icon corner fa fa-expand\")\n                    .tooltip({ title: \"Resize\" })\n            )\n            .append($(\"<div/>\").addClass(\"f-cover\"));\n        this.$header = this.$(\".f-header\");\n        this.$title = this.$(\".f-title\");\n        this.$content = this.$(\".f-content\");\n        this.render();\n        this.listenTo(this.model, \"change\", this.render, this);\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$title.html(options.title || \"\");\n        this.$header.find(\".f-icon-left\").remove();\n        _.each(options.menu, option => {\n            var $option = $(\"<div/>\")\n                .addClass(\"f-icon-left\")\n                .addClass(option.icon);\n            if (_.isFunction(option.disabled) && option.disabled()) {\n                $option.attr(\"disabled\", true);\n            } else {\n                $option\n                    .on(\"click\", () => {\n                        option.onclick(self);\n                    })\n                    .tooltip({\n                        title: option.tooltip,\n                        placement: \"bottom\"\n                    });\n            }\n            self.$header.append($option);\n        });\n        if (options.url) {\n            this.$content.html(\n                $(\"<iframe/>\")\n                    .addClass(\"f-iframe\")\n                    .attr(\"scrolling\", \"auto\")\n                    .attr(\"src\", `${options.url + (options.url.indexOf(\"?\") === -1 ? \"?\" : \"&\")}widget=True`)\n            );\n        } else if (options.content) {\n            _.isFunction(options.content) ? options.content(self.$content) : self.$content.html(options.content);\n        }\n    }\n});\n\n/** Scratchbook viewer */\nvar View = Backbone.View.extend({\n    defaultOptions: {\n        frame: {\n            // default frame size in cells\n            cols: 6,\n            rows: 3\n        },\n        rows: 1000, // maximum number of rows\n        cell: 130, // cell size in px\n        margin: 5, // margin between frames\n        scroll: 5, // scroll speed\n        top_min: 40, // top margin\n        frame_max: 9, // maximum number of frames\n        visible: true // initial visibility\n    },\n\n    cols: 0, // number of columns\n    top: 0, // scroll/element top\n    top_max: 0, // viewport scrolling state\n    frame_z: 0, // frame z-index\n    frame_counter: 0, // frame counter\n    frame_uid: 0, // unique frame id counter\n    frame_list: {}, // list of all frames\n    frame_shadow: null, // frame shown as placeholder when moving active frames\n    visible: false, // flag indicating if scratchbook viewer is visible or not\n    event: {}, // dictionary keeping track of current event\n\n    initialize: function(options) {\n        var self = this;\n        this.options = _.defaults(options || {}, this.defaultOptions);\n        this.visible = this.options.visible;\n        this.top = this.top_max = this.options.top_min;\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"galaxy-frame\")\n                .append($(\"<div/>\").addClass(\"frame-background\"))\n                .append($(\"<div/>\").addClass(\"frame-menu frame-scroll-up fa fa-chevron-up fa-2x\"))\n                .append($(\"<div/>\").addClass(\"frame-menu frame-scroll-down fa fa-chevron-down fa-2x\"))\n        );\n\n        // initialize shadow to guiding drag/resize events\n        this.frame_shadow = new Backbone.View({\n            el: $(\"<div/>\").addClass(\"corner frame-shadow\")\n        });\n        this.$el.append(this.frame_shadow.$el);\n        this._frameInit(this.frame_shadow, \"#frame-shadow\");\n        this._frameResize(this.frame_shadow, { width: 0, height: 0 });\n        this.frame_list[\"#frame-shadow\"] = this.frame_shadow;\n\n        // initialize panel\n        this.visible ? this.show() : this.hide();\n        this._panelRefresh();\n        $(window).resize(() => {\n            self.visible && self._panelRefresh();\n        });\n    },\n\n    /** Render */\n    render: function() {\n        this.$(\".frame-scroll-up\")[(this.top != this.options.top_min && \"show\") || \"hide\"]();\n        this.$(\".frame-scroll-down\")[(this.top != this.top_max && \"show\") || \"hide\"]();\n    },\n\n    /**\n     * Adds and displays a new frame.\n     *\n     * options:\n     *  url     : loaded into an iframe\n     *  content : content is treated as a function or raw HTML, function is passed a single\n     *              argument that is the frame's content DOM element\n     */\n    add: function(options) {\n        if (this.frame_counter >= this.options.frame_max) {\n            Galaxy.modal.show({\n                title: \"Warning\",\n                body: `You have reached the maximum number of allowed frames (${this.options.frame_max}).`,\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        } else {\n            var frame_id = `#frame-${this.frame_uid++}`;\n            if ($(frame_id).length !== 0) {\n                Galaxy.modal.show({\n                    title: \"Error\",\n                    body: \"This frame already exists. This page might contain multiple frame managers.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            } else {\n                // initialize new frame elements\n                this.top = this.options.top_min;\n                var frame = new FrameView(options);\n                this.$el.append(frame.$el);\n\n                // set dimensions\n                options.width = this._toPixelCoord(\"width\", this.options.frame.cols);\n                options.height = this._toPixelCoord(\"height\", this.options.frame.rows);\n\n                // set default z-index and add to ui and frame list\n                this.frame_z = parseInt(frame.$el.css(\"z-index\"));\n                this.frame_list[frame_id] = frame;\n                this.frame_counter++;\n                this._frameInit(frame, frame_id);\n                this._frameResize(frame, {\n                    width: options.width,\n                    height: options.height\n                });\n                this._frameInsert(frame, { top: 0, left: 0 }, true);\n                !this.visible && this.show();\n                this.trigger(\"add\");\n            }\n        }\n    },\n\n    /** Remove a frame */\n    del: function(frame) {\n        var self = this;\n        var $frame = frame.$el;\n        $frame.fadeOut(\"fast\", () => {\n            $frame.remove();\n            delete self.frame_list[frame.id];\n            self.frame_counter--;\n            self._panelRefresh(true);\n            self._panelAnimationComplete();\n            self.trigger(\"remove\");\n        });\n    },\n\n    /** Show panel */\n    show: function() {\n        this.visible = true;\n        this.$el.fadeIn(\"fast\");\n        this.trigger(\"show\");\n    },\n\n    /** Hide panel */\n    hide: function() {\n        if (!this.event.type) {\n            this.visible = false;\n            this.$el.fadeOut(\"fast\", function() {\n                $(this).hide();\n            });\n            this.trigger(\"hide\");\n        }\n    },\n\n    /** Returns the number of frames */\n    length: function() {\n        return this.frame_counter;\n    },\n\n    /*\n        EVENT HANDLING\n    */\n    events: {\n        // global frame events\n        mousemove: \"_eventFrameMouseMove\",\n        mouseup: \"_eventFrameMouseUp\",\n        mouseleave: \"_eventFrameMouseUp\",\n        mousewheel: \"_eventPanelScroll\",\n        DOMMouseScroll: \"_eventPanelScroll\",\n\n        // events fixed to elements\n        \"mousedown .frame\": \"_eventFrameMouseDown\",\n        \"mousedown .frame-background\": \"_eventHide\",\n        \"mousedown .frame-scroll-up\": \"_eventPanelScroll_up\",\n        \"mousedown .frame-scroll-down\": \"_eventPanelScroll_down\",\n        \"mousedown .f-close\": \"_eventFrameClose\"\n    },\n\n    /** Start drag/resize event */\n    _eventFrameMouseDown: function(e) {\n        $(\".tooltip\").hide();\n        if (!this.event.type) {\n            if ($(e.target).hasClass(\"f-header\") || $(e.target).hasClass(\"f-title\")) {\n                this.event.type = \"drag\";\n            }\n            if ($(e.target).hasClass(\"f-resize\")) {\n                this.event.type = \"resize\";\n            }\n            if (this.event.type) {\n                e.preventDefault();\n                this.event.target = this._frameIdentify(e.target);\n                this.event.xy = {\n                    x: e.originalEvent.pageX,\n                    y: e.originalEvent.pageY\n                };\n                this._frameDragStart(this.event.target);\n            }\n        }\n    },\n\n    /** Processes drag/resize events */\n    _eventFrameMouseMove: function(e) {\n        if (this.event.type) {\n            // get mouse motion and delta\n            var event_xy_new = {\n                x: e.originalEvent.pageX,\n                y: e.originalEvent.pageY\n            };\n            var event_xy_delta = {\n                x: event_xy_new.x - this.event.xy.x,\n                y: event_xy_new.y - this.event.xy.y\n            };\n            this.event.xy = event_xy_new;\n\n            // get current screen position and size of frame\n            var p = this._frameScreen(this.event.target);\n\n            // drag/resize event\n            if (this.event.type == \"resize\") {\n                p.width += event_xy_delta.x;\n                p.height += event_xy_delta.y;\n                var min_dim = this.options.cell - this.options.margin - 1;\n                p.width = Math.max(p.width, min_dim);\n                p.height = Math.max(p.height, min_dim);\n                this._frameResize(this.event.target, p);\n                p.width = this._toGridCoord(\"width\", p.width) + 1;\n                p.height = this._toGridCoord(\"height\", p.height) + 1;\n                p.width = this._toPixelCoord(\"width\", p.width);\n                p.height = this._toPixelCoord(\"height\", p.height);\n                this._frameResize(this.frame_shadow, p);\n                this._frameInsert(this.frame_shadow, {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                });\n            } else if (this.event.type == \"drag\") {\n                p.left += event_xy_delta.x;\n                p.top += event_xy_delta.y;\n                this._frameOffset(this.event.target, p);\n                var l = {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                };\n                l.left !== 0 && l.left++;\n                this._frameInsert(this.frame_shadow, l);\n            }\n        }\n    },\n\n    /** Stop drag/resize events */\n    _eventFrameMouseUp: function(e) {\n        if (this.event.type) {\n            this._frameDragStop(this.event.target);\n            this.event.type = null;\n        }\n    },\n\n    /** Destroy a frame */\n    _eventFrameClose: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this.del(this._frameIdentify(e.target));\n        }\n    },\n\n    /** Hide all frames */\n    _eventHide: function(e) {\n        !this.event.type && this.hide();\n    },\n\n    /** Fired when scrolling occurs on panel */\n    _eventPanelScroll: function(e) {\n        if (!this.event.type && this.visible) {\n            // Stop propagation if scrolling is happening inside a frame.\n            // TODO: could propagate scrolling if at top/bottom of frame.\n            var frames = $(e.srcElement).parents(\".frame\");\n            if (frames.length !== 0) {\n                e.stopPropagation();\n            } else {\n                e.preventDefault();\n                this._panelScroll(e.originalEvent.detail ? e.originalEvent.detail : e.originalEvent.wheelDelta / -3);\n            }\n        }\n    },\n\n    /** Handle scroll up event */\n    _eventPanelScroll_up: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(-this.options.scroll);\n        }\n    },\n\n    /** Handle scroll down */\n    _eventPanelScroll_down: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(this.options.scroll);\n        }\n    },\n\n    /*\n        FRAME EVENTS SUPPORT\n    */\n\n    /** Identify the target frame */\n    _frameIdentify: function(target) {\n        return this.frame_list[\n            `#${$(target)\n                .closest(\".frame\")\n                .attr(\"id\")}`\n        ];\n    },\n\n    /** Provides drag support */\n    _frameDragStart: function(frame) {\n        this._frameFocus(frame, true);\n        var p = this._frameScreen(frame);\n        this._frameResize(this.frame_shadow, p);\n        this._frameGrid(this.frame_shadow, frame.grid_location);\n        frame.grid_location = null;\n        this.frame_shadow.$el.show();\n        $(\".f-cover\").show();\n    },\n\n    /** Removes drag support */\n    _frameDragStop: function(frame) {\n        this._frameFocus(frame, false);\n        var p = this._frameScreen(this.frame_shadow);\n        this._frameResize(frame, p);\n        this._frameGrid(frame, this.frame_shadow.grid_location, true);\n        this.frame_shadow.grid_location = null;\n        this.frame_shadow.$el.hide();\n        $(\".f-cover\").hide();\n        this._panelAnimationComplete();\n    },\n\n    /*\n        GRID/PIXEL CONVERTER\n    */\n\n    /** Converts a pixel to a grid dimension */\n    _toGridCoord: function(type, px) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        type == \"top\" && (px -= this.top);\n        return parseInt((px + sign * this.options.margin) / this.options.cell, 10);\n    },\n\n    /** Converts a grid to a pixels dimension */\n    _toPixelCoord: function(type, g) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        var px = g * this.options.cell - sign * this.options.margin;\n        type == \"top\" && (px += this.top);\n        return px;\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toGrid: function(px) {\n        return {\n            top: this._toGridCoord(\"top\", px.top),\n            left: this._toGridCoord(\"left\", px.left),\n            width: this._toGridCoord(\"width\", px.width),\n            height: this._toGridCoord(\"height\", px.height)\n        };\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toPixel: function(g) {\n        return {\n            top: this._toPixelCoord(\"top\", g.top),\n            left: this._toPixelCoord(\"left\", g.left),\n            width: this._toPixelCoord(\"width\", g.width),\n            height: this._toPixelCoord(\"height\", g.height)\n        };\n    },\n\n    /* \n        COLLISION DETECTION\n    */\n\n    /** Check collisions for a grid coordinate set */\n    _isCollision: function(g) {\n        function is_collision_pair(a, b) {\n            return !(\n                a.left > b.left + b.width - 1 ||\n                a.left + a.width - 1 < b.left ||\n                a.top > b.top + b.height - 1 ||\n                a.top + a.height - 1 < b.top\n            );\n        }\n        for (var i in this.frame_list) {\n            var frame = this.frame_list[i];\n            if (frame.grid_location !== null && is_collision_pair(g, frame.grid_location)) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /** Return location/grid rank */\n    _locationRank: function(loc) {\n        return loc.top * this.cols + loc.left;\n    },\n\n    /*\n        PANEL/WINDOW FUNCTIONS\n    */\n\n    /** Refresh panel */\n    _panelRefresh: function(animate) {\n        this.cols = parseInt($(window).width() / this.options.cell, 10) + 1;\n        this._frameInsert(null, null, animate);\n    },\n\n    /** Complete panel animation / frames not moving */\n    _panelAnimationComplete: function() {\n        var self = this;\n        $(\".frame\")\n            .promise()\n            .done(() => {\n                self._panelScroll(0, true);\n            });\n    },\n\n    /** Scroll panel */\n    _panelScroll: function(delta, animate) {\n        var top_new = this.top - this.options.scroll * delta;\n        top_new = Math.max(top_new, this.top_max);\n        top_new = Math.min(top_new, this.options.top_min);\n        if (this.top != top_new) {\n            for (var i in this.frame_list) {\n                var frame = this.frame_list[i];\n                if (frame.grid_location !== null) {\n                    var screen_location = {\n                        top: frame.screen_location.top - (this.top - top_new),\n                        left: frame.screen_location.left\n                    };\n                    this._frameOffset(frame, screen_location, animate);\n                }\n            }\n            this.top = top_new;\n        }\n        this.render();\n    },\n\n    /*\n        FRAME FUNCTIONS\n    */\n\n    /** Initialize a new frame */\n    _frameInit: function(frame, id) {\n        frame.id = id;\n        frame.screen_location = {};\n        frame.grid_location = {};\n        frame.grid_rank = null;\n        frame.$el.attr(\"id\", id.substring(1));\n    },\n\n    /** Insert frame at given location */\n    _frameInsert: function(frame, new_loc, animate) {\n        var self = this;\n        var place_list = [];\n        if (frame) {\n            frame.grid_location = null;\n            place_list.push([frame, this._locationRank(new_loc)]);\n        }\n        _.each(this.frame_list, f => {\n            if (f.grid_location !== null) {\n                f.grid_location = null;\n                place_list.push([f, f.grid_rank]);\n            }\n        });\n        place_list.sort((a, b) => (a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0));\n        _.each(place_list, place => {\n            self._framePlace(place[0], animate);\n        });\n        this.top_max = 0;\n        _.each(this.frame_list, f => {\n            if (f.grid_location !== null) {\n                self.top_max = Math.max(self.top_max, f.grid_location.top + f.grid_location.height);\n            }\n        });\n        this.top_max = $(window).height() - this.top_max * this.options.cell - 2 * this.options.margin;\n        this.top_max = Math.min(this.top_max, this.options.top_min);\n        this.render();\n    },\n\n    /** Naive frame placement */\n    _framePlace: function(frame, animate) {\n        frame.grid_location = null;\n        var g = this._toGrid(this._frameScreen(frame));\n        var done = false;\n        for (var i = 0; i < this.options.rows; i++) {\n            for (var j = 0; j < Math.max(1, this.cols - g.width); j++) {\n                g.top = i;\n                g.left = j;\n                if (!this._isCollision(g)) {\n                    done = true;\n                    break;\n                }\n            }\n            if (done) {\n                break;\n            }\n        }\n        if (done) {\n            this._frameGrid(frame, g, animate);\n        } else {\n            console.log(\"Grid dimensions exceeded.\");\n        }\n    },\n\n    /** Handle frame focussing */\n    _frameFocus: function(frame, has_focus) {\n        frame.$el.css(\"z-index\", this.frame_z + (has_focus ? 1 : 0));\n    },\n\n    /** New left/top position frame */\n    _frameOffset: function(frame, p, animate) {\n        frame.screen_location.left = p.left;\n        frame.screen_location.top = p.top;\n        if (animate) {\n            this._frameFocus(frame, true);\n            var self = this;\n            frame.$el.animate({ top: p.top, left: p.left }, \"fast\", () => {\n                self._frameFocus(frame, false);\n            });\n        } else {\n            frame.$el.css({ top: p.top, left: p.left });\n        }\n    },\n\n    /** Resize frame */\n    _frameResize: function(frame, p) {\n        frame.$el.css({ width: p.width, height: p.height });\n        frame.screen_location.width = p.width;\n        frame.screen_location.height = p.height;\n    },\n\n    /** Push frame to new grid location */\n    _frameGrid: function(frame, l, animate) {\n        frame.grid_location = l;\n        this._frameOffset(frame, this._toPixel(l), animate);\n        frame.grid_rank = this._locationRank(l);\n    },\n\n    /** Get frame dimensions */\n    _frameScreen: function(frame) {\n        var p = frame.screen_location;\n        return {\n            top: p.top,\n            left: p.left,\n            width: p.width,\n            height: p.height\n        };\n    }\n});\n\nexport default {\n    View: View\n};\n"]}