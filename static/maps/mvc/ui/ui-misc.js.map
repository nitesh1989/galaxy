{"version":3,"sources":["mvc/ui/ui-misc.js"],"names":["Label","Backbone","View","extend","tagName","initialize","options","this","model","Model","setElement","$","listenTo","render","title","new_title","set","value","get","$el","html","message","status","cls","removeClass","persistent","fade","update","addClass","messageForDisplay","window","clearTimeout","timeout","self","setTimeout","UnescapedMessage","fadeOut","Input","type","placeholder","disabled","readonly","area","visible","style","input","new_val","events","undefined","id","attr","css","datalist","length","autocomplete","_onchange","source","request","response","change","val","_","each","attr_name","removeAttr","Hidden","append","$hidden","$info","show","text","Upload","hide","_readFile","$file","$text","$wait","on","reader","e","onload","ButtonMenu","Button","ButtonDefault","ButtonIcon","ButtonCheck","Message","files","target","FileReader","Modal","RadioButton","wait","result","Radio","Select","_uiButtons2","default","ButtonLink","_uiOptions2","Checkbox","Slider","Drilldown"],"mappings":"8WAWIA,EAAQC,SAASC,KAAKC,QACtBC,QAAS,QACTC,WAAY,SAASC,GACjBC,KAAKC,MAASF,GAAWA,EAAQE,OAAU,IAAIP,SAASQ,MAAMH,GAC9DC,KAAKH,QAAUE,EAAQF,SAAWG,KAAKH,QACvCG,KAAKG,WAAWC,EAAAA,IAAMJ,KAAKH,QAAX,OAChBG,KAAKK,SAASL,KAAKC,MAAO,SAAUD,KAAKM,OAAQN,MACjDA,KAAKM,UAETC,MAAO,SAASC,GACZR,KAAKC,MAAMQ,IAAI,QAASD,IAE5BE,MAAO,WACH,OAAOV,KAAKC,MAAMU,IAAI,UAE1BL,OAAQ,WAXJ,OALRN,KAAAY,IACInB,cACAI,SAAS,YACTC,SAAYE,KAAAC,MAAAU,IAAA,QACRE,KAAKZ,KAALA,MAAcF,IAAAA,UACdC,QAKJO,EAAAA,SAAOZ,KAAAC,QACHE,WAAA,SAAWW,GACdT,KAX4BC,MAY7BS,GAAOX,EAAWE,OACd,IAAAP,SAAYO,OAbaa,QAAA,KAerBC,OAAA,OACJC,IACKC,GAILC,YAAA,EACHC,MAAA,IAtBLV,IAAAV,GAqCQC,KAAKK,SAASL,KAAKC,MAAO,SAAUD,KAAKM,OAAQN,MAZzDA,KAAAM,UAeIc,OAAQ,SAASrB,GACbC,KAAKC,MAAMQ,IAAIV,IAdnBD,OAAAA,WACIE,KAAAY,IAGQE,cACAC,SAAAA,cACAC,SAAKhB,KAHUC,MAAAU,IAAA,QAIfO,IAAAA,EAAAA,KAAAA,MAAYP,IAJG,UAY1B,GAPWQ,KAAAA,MAAMR,IAAA,SALSX,KAMhBS,IAAIV,UACG,WAATM,GAAqB,QAA1B,UAAyCC,GAAzC,SAAAS,GAPuB,gBAU3BK,KAAQR,IAAAS,SAAA,SAAAA,SAARD,SAA0BL,GAdKf,KAAAC,MAAAU,IAAA,YAuB3B,GANJL,KAAQM,IAAAC,KAAAb,KAAAsB,qBACJtB,KAAKY,IACAK,KAAAA,MADLN,IAEKU,QAAS,SAFd,UAIArB,KAAIe,SAASQ,OAAAC,aAAAxB,KAAbyB,UACIzB,KAAKC,MAAMU,IAAI,cAAU,CACzB,IAAAe,EAASL,KADbrB,KAIOyB,QAAAF,OAAAI,WAAA,WACHD,EAASL,MAAAA,IAAS,UAASA,KAC9B,WAGGrB,KAAAY,IAAKA,UAEL,OAAAZ,MAEIsB,kBAAA,WACII,OAAAA,EAAAA,OAAAA,KAAKzB,MAAMQ,IAAI,eAIvBmB,EAAKhB,EAAIiB,QACZP,kBAAA,WACD,OAAAtB,KAAOC,MAAPU,IAAA,cA3C2BmB,EAAnCpC,SAAAC,KAAAC,QA0DIE,WAAY,SAASC,GARrB6B,KAAAA,MACAN,GAAAA,EAAmBrB,OACf,IAAAP,SAAYO,OACf8B,KAAA,OAHLC,YAAA,GAcgBC,UAAU,EAR1BC,UAAA,EACYxC,SAASC,EACjBG,IAAY,GACRqC,MAAA,EAGQJ,MAAM,KACNC,MAAAA,OACAC,IAAAA,GACAC,KAAAA,QAAAA,KAAUjC,MAJKU,IAAA,QAAA,WAAA,QAKfyB,KAAAA,WAAAA,EAAAA,IALepC,KAAAH,QAKfuC,OACApB,KAAAA,SAAKhB,KANUC,MAAA,SAAAD,KAAAM,OAAAN,MAOfmC,KAAAA,UAEAE,QATeC,MAUhB7B,aAEPC,MAAA,SAAKP,GAEL,YADKE,IAALkC,GAAmBtC,KAAOA,MAAAQ,IAAU,QAApC,iBAAiD8B,EAAjDA,EAAA,IACAvC,KAAKM,MAALK,IAAA,UAEJ6B,OAAAA,WACIF,IAAAA,EAAOtC,KADHA,KApBqBY,IAuB7BF,cACI6B,SAJI,MAIQE,KAAZ5C,SACAwB,SAAOrB,KAAKC,MAALU,IAAe,QAzBGU,SAAArB,KAAAC,MAAAU,IAAA,UA2B7BL,KAAQ,KAAAN,KAAAC,MAAWyC,IACfC,KAAIjB,OAAO1B,KAAXC,MAAAU,IAAA,SACAgC,KAAK/B,cAALZ,KAEKqB,MAFLV,IAAA,gBAUAiC,IAAIC,QAAAA,KAAW5C,MAAAU,IAAA,UAAf,IACAiC,IAAIxC,eAAUyC,KAAV5C,MAAuB4C,IAASC,UAAY,IAC5C,IAAAD,EAAKjC,KAAImC,MAAAA,IAAa,YAkB9BC,OAjBYC,EAAAA,QAAAA,IAAQJ,EAASK,OAASC,GACtBA,KAAAA,IAAAA,cACHF,OAHiB,SAAAC,EAAAC,GAIlBC,EAAQ1B,EAAAzB,MAAAU,IAAA,cAEPyC,OAAA,WANL1B,EAAAsB,eAWHhD,KAAAC,MAAAU,IAAA,WAAAX,KAAAY,IAAAyC,OACDC,KAAEC,IAAMF,IAAArD,KAADC,MAAaU,IAAA,UAEnB2C,EAAAC,MAFD,WAAA,YAAA,SAAAC,GAGA9B,EAAKd,MAAID,IAAKV,GAAUyB,EAAfd,IAA4B+B,KAAAa,GAArC,GAAA9B,EAAAd,IAAA6C,WAAAD,KAEHxD,KA1D4BY,IAAAZ,KAAAC,MAAAU,IAAA,WAAA,OAAA,UA2D7BqC,MAEIA,UAAA,WACHhD,KAAAU,MAAAV,KAAAY,IAAAyC,OA9DLrD,KAAAC,MAAAU,IAAA,aAAAX,KAAAC,MAAAU,IAAA,WAAAX,CAAAA,KAAAC,MAAAU,IAAA,aAoEQ+C,EAAAhE,SAAAC,KAAcI,QACdD,WAAA,SAAKK,GAKLH,KAAAC,MAAKI,GAAcJ,EAAOA,OAAU,IAAKK,SAAQJ,MAAjDH,GACAC,KAAAG,WAT0BC,EAAA,UAWvBuD,OAAA3D,KAASuC,MAATnC,EAAkB,WACrBmC,OAAYE,KAAAA,QAAarC,EAAKH,YAEjCD,KAd6BK,SAAAL,KAAAC,MAAA,SAAAD,KAAAM,OAAAN,MAe9BM,KAAAA,UAEII,MAAA,SAAKkD,GAEL,YADK3D,IAALsC,GAAAvC,KAAyBC,MAAK4D,IAAMC,QAAOC,GAC3C/D,KAAOC,MAAPU,IAAA,UAnB0BL,OAAlC,WAyBIR,OATIE,KAAKY,IAAI+B,KAAK,KAAM3C,KAAKC,MAAMyC,IAOvC1C,KAAA4D,QAAAP,IAAArD,KAAAC,MAAAU,IAAA,UACIqD,KAAAA,MAAStE,IAAAA,QAAcE,KAAOiE,MAAAC,OAAAC,KAAA/D,KAAAC,MAAAU,IAAA,SAAAX,KAAA6D,MAAAI,OAC9BnE,QAmBIkE,EAAAtE,SAAAC,KAAcC,QACV8B,WAAAA,SAAKwC,GACR,IAAAxC,EAFD1B,KAGAA,KAAAC,MAAKK,GAALP,EAAAE,OAAA,IAAAP,SAAAQ,MAAAH,GACHC,KAxB6BG,WAyB9BO,EAAAA,UACI6B,OAAYE,KAAAA,MAAarC,EAAA,WACzBuD,OA3B0B3D,KAAAmE,MAAA/D,EAAA,YA6BtBuC,KAAA,OAAW,QACftB,SAAoB,qBAEfpB,OACAA,KAALmE,MAAAhE,EAAA,eACAiB,SAAA,eAlC0BsB,KAAA,YAAA,IAqCtBjB,OAAO1B,KAAXqE,MAAAjE,EAAA,QAAAiB,SAAA,2BAEArB,KAAAK,SAAUL,KAAAC,MAAA,SAAAD,KAAAM,OAAAN,MACNA,KAAAmE,MAAAG,GAAIC,SAAS,SAAAC,GACbD,EAAAA,UAAOE,KAENzE,KAAAM,UAEDiE,MAAAA,SAAAA,GAEP,YADI9B,IAAAF,GAAAvC,KAAAC,MAAAQ,IAAA,QAAA8B,GACJvC,KAAAC,MAAAU,IAAA,UAlBDL,OAAQ,WAyBRoE,OAxBI1E,KAAKY,IAAI+B,KAoBF,KAAA3C,KAAAC,MAAAyC,IACXiC,KAAAA,MAAQhE,IAAA,QAAAX,KAAQ4E,MAAAA,OADLb,KAAA/D,KAAAC,MAAAU,IAAA,SAAAX,KAAA6D,MAAAI,OAEXY,KAAAA,MAAAA,IAAY,SAAA7E,KAAAoE,MAAQS,KAFT7E,KAAAC,MAAAU,IAAA,UAAAmD,OAAA9D,KAAAoE,MAAAH,OAGXa,KAAAA,MAAAA,IAAa,QAAA9E,KAAAqE,MAAQS,OAHV9E,KAAAqE,MAAAJ,OAIXS,MAEA5C,UAAOA,SANI0C,GAOX/E,IAAAA,EAAOA,KACPsF,EAASA,EAAAA,OAREC,OAAAR,EAAAS,OAAAD,MAAA,GASXpD,GAAAA,EAAAA,CACAoC,IAAQA,EAVG,IAAAkB,WAWXC,EAAAA,OAAAA,WACAC,EAAanF,MAAAQ,KAAA4E,MAAA,EAAQD,MAZVpF,KAAAsF,UAcXC,KAAOtF,MAAAQ,KAAA4E,MAAQE,EAdJ7E,MAAA,OAeX8E,EAAAA,WAAAA,kBAdAb,OAAQc,EAAAC,QAAQd,cAChBC,WAAYY,EAAAC,QAAQb,WACpBC,YAAaW,EAAAC,QAAQZ,YACrBJ,WAAYe,EAAAC,QAAQhB,WACpBiB,WAAYF,EAAAC,QAAQC,WACpB7D,MAAOA,EACPrC,MAAOA,EACPsF,QAASA,EACTnD,iBAAkBA,EAClBoC,OAAQA,EACRmB,MAAAA,EAAAA,QACAC,YAAaQ,EAAAF,QAAQN,YACrBS,SAAUD,EAAAF,QAAQG,SAClBN,MAAOK,EAAAF,QAAQH,MACfC,OAAAA,EAAAA,QACA9B,OAAQA,EACRoC,OAAAA,EAAAA,QACAC,UAAAA,EAAAA","file":"../../../scripts/mvc/ui/ui-misc.js","sourcesContent":["/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\nimport Utils from \"utils/utils\";\nimport Select from \"mvc/ui/ui-select-default\";\nimport Slider from \"mvc/ui/ui-slider\";\nimport Options from \"mvc/ui/ui-options\";\nimport Drilldown from \"mvc/ui/ui-drilldown\";\nimport Buttons from \"mvc/ui/ui-buttons\";\nimport Modal from \"mvc/ui/ui-modal\";\n/** Label wrapper */\nvar Label = Backbone.View.extend({\n    tagName: \"label\",\n    initialize: function(options) {\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.tagName = options.tagName || this.tagName;\n        this.setElement($(`<${this.tagName}/>`));\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n    title: function(new_title) {\n        this.model.set(\"title\", new_title);\n    },\n    value: function() {\n        return this.model.get(\"title\");\n    },\n    render: function() {\n        this.$el\n            .removeClass()\n            .addClass(\"ui-label\")\n            .addClass(this.model.get(\"cls\"))\n            .html(this.model.get(\"title\"));\n        return this;\n    }\n});\n\n/** Displays messages used e.g. in the tool form */\nvar Message = Backbone.View.extend({\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                message: null,\n                status: \"info\",\n                cls: \"\",\n                persistent: false,\n                fade: true\n            }).set(options);\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n    update: function(options) {\n        this.model.set(options);\n    },\n    render: function() {\n        this.$el\n            .removeClass()\n            .addClass(\"ui-message\")\n            .addClass(this.model.get(\"cls\"));\n        var status = this.model.get(\"status\");\n        if (this.model.get(\"large\")) {\n            this.$el.addClass(\n                `${(status == \"success\" && \"done\") || (status == \"danger\" && \"error\") || status}messagelarge`\n            );\n        } else {\n            this.$el.addClass(\"alert\").addClass(`alert-${status}`);\n        }\n        if (this.model.get(\"message\")) {\n            this.$el.html(this.messageForDisplay());\n            this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n            this.timeout && window.clearTimeout(this.timeout);\n            if (!this.model.get(\"persistent\")) {\n                var self = this;\n                this.timeout = window.setTimeout(() => {\n                    self.model.set(\"message\", \"\");\n                }, 3000);\n            }\n        } else {\n            this.$el.fadeOut();\n        }\n        return this;\n    },\n    messageForDisplay: function() {\n        return _.escape(this.model.get(\"message\"));\n    }\n});\n\nvar UnescapedMessage = Message.extend({\n    messageForDisplay: function() {\n        return this.model.get(\"message\");\n    }\n});\n\n/** Renders an input element used e.g. in the tool form */\nvar Input = Backbone.View.extend({\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                type: \"text\",\n                placeholder: \"\",\n                disabled: false,\n                readonly: false,\n                visible: true,\n                cls: \"\",\n                area: false,\n                color: null,\n                style: null\n            }).set(options);\n        this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n        this.setElement($(`<${this.tagName}/>`));\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n    events: {\n        input: \"_onchange\"\n    },\n    value: function(new_val) {\n        new_val !== undefined && this.model.set(\"value\", typeof new_val === \"string\" ? new_val : \"\");\n        return this.model.get(\"value\");\n    },\n    render: function() {\n        var self = this;\n        this.$el\n            .removeClass()\n            .addClass(`ui-${this.tagName}`)\n            .addClass(this.model.get(\"cls\"))\n            .addClass(this.model.get(\"style\"))\n            .attr(\"id\", this.model.id)\n            .attr(\"type\", this.model.get(\"type\"))\n            .attr(\"placeholder\", this.model.get(\"placeholder\"))\n            .css(\"color\", this.model.get(\"color\") || \"\")\n            .css(\"border-color\", this.model.get(\"color\") || \"\");\n        var datalist = this.model.get(\"datalist\");\n        if ($.isArray(datalist) && datalist.length > 0) {\n            this.$el.autocomplete({\n                source: function(request, response) {\n                    response(self.model.get(\"datalist\"));\n                },\n                change: function() {\n                    self._onchange();\n                }\n            });\n        }\n        if (this.model.get(\"value\") !== this.$el.val()) {\n            this.$el.val(this.model.get(\"value\"));\n        }\n        _.each([\"readonly\", \"disabled\"], attr_name => {\n            self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n        });\n        this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        return this;\n    },\n    _onchange: function() {\n        this.value(this.$el.val());\n        this.model.get(\"onchange\") && this.model.get(\"onchange\")(this.model.get(\"value\"));\n    }\n});\n\n/** Creates a hidden element input field used e.g. in the tool form */\nvar Hidden = Backbone.View.extend({\n    initialize: function(options) {\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement(\n            $(\"<div/>\")\n                .append((this.$info = $(\"<div/>\")))\n                .append((this.$hidden = $(\"<div/>\")))\n        );\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n    value: function(new_val) {\n        new_val !== undefined && this.model.set(\"value\", new_val);\n        return this.model.get(\"value\");\n    },\n    render: function() {\n        this.$el.attr(\"id\", this.model.id);\n        this.$hidden.val(this.model.get(\"value\"));\n        this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n        return this;\n    }\n});\n\n/** Creates a upload element input field */\nvar Upload = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement(\n            $(\"<div/>\")\n                .append((this.$info = $(\"<div/>\")))\n                .append(\n                    (this.$file = $(\"<input/>\")\n                        .attr(\"type\", \"file\")\n                        .addClass(\"ui-margin-bottom\"))\n                )\n                .append(\n                    (this.$text = $(\"<textarea/>\")\n                        .addClass(\"ui-textarea\")\n                        .attr(\"disabled\", true))\n                )\n                .append((this.$wait = $(\"<i/>\").addClass(\"fa fa-spinner fa-spin\")))\n        );\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.$file.on(\"change\", e => {\n            self._readFile(e);\n        });\n        this.render();\n    },\n    value: function(new_val) {\n        new_val !== undefined && this.model.set(\"value\", new_val);\n        return this.model.get(\"value\");\n    },\n    render: function() {\n        this.$el.attr(\"id\", this.model.id);\n        this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n        this.model.get(\"value\") ? this.$text.text(this.model.get(\"value\")).show() : this.$text.hide();\n        this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n        return this;\n    },\n    _readFile: function(e) {\n        var self = this;\n        var file = e.target.files && e.target.files[0];\n        if (file) {\n            var reader = new FileReader();\n            reader.onload = function() {\n                self.model.set({ wait: false, value: this.result });\n            };\n            this.model.set({ wait: true, value: null });\n            reader.readAsText(file);\n        }\n    }\n});\n\nexport default {\n    Button: Buttons.ButtonDefault,\n    ButtonIcon: Buttons.ButtonIcon,\n    ButtonCheck: Buttons.ButtonCheck,\n    ButtonMenu: Buttons.ButtonMenu,\n    ButtonLink: Buttons.ButtonLink,\n    Input: Input,\n    Label: Label,\n    Message: Message,\n    UnescapedMessage: UnescapedMessage,\n    Upload: Upload,\n    Modal: Modal,\n    RadioButton: Options.RadioButton,\n    Checkbox: Options.Checkbox,\n    Radio: Options.Radio,\n    Select: Select,\n    Hidden: Hidden,\n    Slider: Slider,\n    Drilldown: Drilldown\n};\n"]}