{"version":3,"sources":["mvc/ui/popup-menu.js"],"names":["PopupMenu","Backbone","View","extend","initialize","$button","options","this","length","$","data","menu","click","event","remove","_renderAndShow","render","$el","appendTo","css","_getShownPosition","clickEvent","show","hide","html","template","attr","find","option","i","li","func","children","call","preventDefault","id","_templateOptions","join","map","_","divider","href","target","check","checked","x","Math","menuWidth","width","pageX","min","document","scrollLeft","window","max","top","closePopup","_setUpCloseBehavior","off","parent","contents","err","index","one","addItem","has","splice","item","findItemByHtml","findIndexByHtml","create","_create","toString","newOption","optionKey","make_popupmenu","button_element","convertedOptions","each","initial_options","optionVal","header","selector","push","$link","convertLinksToOptions","confirmText","confirm","$parent","elem","text","linkHref","linkTarget","location","$menuElement","menuElementLinkSelector","$buttonElement","menuSelector","buttonSelectorBuildFn","addClass","popupMenusCreated","fromDom"],"mappings":"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","file":"../../../scripts/mvc/ui/popup-menu.js","sourcesContent":["// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n    //TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function($button, options) {\n        // default settings\n        this.$button = $button;\n        if (!this.$button.length) {\n            this.$button = $(\"<div/>\");\n        }\n        this.options = options || [];\n        this.$button.data(\"popupmenu\", this);\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click(event => {\n            // if there's already a menu open, remove it\n            $(\".popmenu-wrapper\").remove();\n            menu._renderAndShow(event);\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function(clickEvent) {\n        this.render();\n        this.$el\n            .appendTo(\"body\")\n            .css(this._getShownPosition(clickEvent))\n            .show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function() {\n        // render the menu body absolute and hidden, fill with template\n        this.$el\n            .addClass(\"popmenu-wrapper\")\n            .hide()\n            .css({ position: \"absolute\" })\n            .html(this.template(this.$button.attr(\"id\"), this.options));\n\n        // set up behavior on each link/anchor elem\n        if (this.options.length) {\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find(\"li\").each(function(i, li) {\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if (option.func) {\n                    $(this)\n                        .children(\"a.popupmenu-option\")\n                        .click(event => {\n                            option.func.call(menu, event, option);\n                            // We must preventDefault otherwise clicking \"cancel\"\n                            // on a purge or something still navigates and causes\n                            // the action.\n                            event.preventDefault();\n                            // bubble up so that an option click will call the close behavior\n                        });\n                }\n            });\n        }\n        return this;\n    },\n\n    template: function(id, options) {\n        return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), \"</ul>\"].join(\"\");\n    },\n\n    _templateOptions: function(options) {\n        if (!options.length) {\n            return \"<li>(no options)</li>\";\n        }\n        return _.map(options, option => {\n            if (option.divider) {\n                return '<li class=\"divider\"></li>';\n            } else if (option.header) {\n                return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, \"</a></li>\"].join(\"\");\n            }\n            var href = option.href || \"javascript:void(0);\";\n            var target = option.target ? ` target=\"${option.target}\"` : \"\";\n\n            var check = option.checked ? '<span class=\"fa fa-check\"></span>' : \"\";\n\n            return [\n                '<li><a class=\"popupmenu-option\" href=\"',\n                href,\n                '\"',\n                target,\n                \">\",\n                check,\n                option.html,\n                \"</a></li>\"\n            ].join(\"\");\n        }).join(\"\");\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition: function(clickEvent) {\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n        x = Math.max(x, $(document).scrollLeft() + 5);\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function() {\n        var menu = this;\n        //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup(event) {\n            $(document).off(\"click.close_popup\");\n            if (window && window.parent !== window) {\n                try {\n                    $(window.parent.document).off(\"click.close_popup\");\n                } catch (err) {}\n            } else {\n                try {\n                    $(\"iframe#galaxy_main\")\n                        .contents()\n                        .off(\"click.close_popup\");\n                } catch (err) {}\n            }\n            menu.remove();\n        }\n\n        $(\"html\").one(\"click.close_popup\", closePopup);\n        if (window && window.parent !== window) {\n            try {\n                $(window.parent.document)\n                    .find(\"html\")\n                    .one(\"click.close_popup\", closePopup);\n            } catch (err) {}\n        } else {\n            try {\n                $(\"iframe#galaxy_main\")\n                    .contents()\n                    .one(\"click.close_popup\", closePopup);\n            } catch (err) {}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function(item, index) {\n        // append to end if no index\n        index = index >= 0 ? index : this.options.length;\n        this.options.splice(index, 0, item);\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function(index) {\n        if (index >= 0) {\n            this.options.splice(index, 1);\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function(html) {\n        for (var i = 0; i < this.options.length; i++) {\n            if (_.has(this.options[i], \"html\") && this.options[i].html === html) {\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function(html) {\n        return this.options[this.findIndexByHtml(html)];\n    },\n\n    // string representation\n    toString: function() {\n        return \"PopupMenu\";\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create($button, options) {\n    return new PopupMenu($button, options);\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = (button_element, initial_options) => {\n    var convertedOptions = [];\n    _.each(initial_options, (optionVal, optionKey) => {\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if (optionVal === null) {\n            // !optionVal? (null only?)\n            newOption.header = true;\n\n            // keys with function values indicate: a menu option\n        } else if (jQuery.type(optionVal) === \"function\") {\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push(newOption);\n    });\n    return new PopupMenu($(button_element), convertedOptions);\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = ($parent, selector) => {\n    $parent = $($parent);\n    selector = selector || \"a\";\n    var options = [];\n    $parent.find(selector).each((elem, i) => {\n        var option = {};\n        var $link = $(elem);\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if ($link.attr(\"href\")) {\n            var linkHref = $link.attr(\"href\");\n            var linkTarget = $link.attr(\"target\");\n            var confirmText = $link.attr(\"confirm\");\n\n            option.func = () => {\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if (confirmText && !confirm(confirmText)) {\n                    return;\n                }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch (linkTarget) {\n                    // relocate the center panel\n                    case \"_parent\":\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case \"_top\":\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push(option);\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = ($buttonElement, $menuElement, menuElementLinkSelector) => {\n    $buttonElement = $($buttonElement);\n    $menuElement = $($menuElement);\n    var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu($buttonElement, options);\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = (parent, menuSelector, buttonSelectorBuildFn) => {\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || \"div[popupmenu]\";\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || (($menuElement, parent) => `#${$menuElement.attr(\"popupmenu\")}`);\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $(parent)\n        .find(menuSelector)\n        .each(function() {\n            var $menuElement = $(this);\n\n            var $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n\n            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n            $buttonElement.addClass(\"popup\");\n        });\n    return popupMenusCreated;\n};\n\n// =============================================================================\nexport default PopupMenu;\n"]}