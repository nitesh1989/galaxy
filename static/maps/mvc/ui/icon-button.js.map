{"version":3,"sources":["mvc/ui/icon-button.js"],"names":["IconButton","Backbone","Model","extend","defaults","title","icon_class","on_click","menu_options","is_menu_button","IconButtonView","View","initialize","this","model","attributes","tooltip_config","placement","bind","render","$el","new_elem","template","toJSON","tooltip","get","replaceWith","setElement","click","event","events","options","buffer","id","href","enabled","visible","IconButtonCollection","Collection","IconButtonMenuView","tagName","collection","each","button","elt","$","attr","self","appendTo","make_popupmenu","create_icon_buttons_menu","global_config","buttons","_","map","config","button_config"],"mappings":"kHAIA,IAAIA,EAAaC,SAASC,MAAMC,QAC5BC,UALJC,MAAA,GACAC,WAAA,GAOQC,SAAU,KACVC,aAAc,KALlBR,gBAAaC,EACbG,GAAAA,KACIC,KAAAA,KACAC,OAAAA,KACAC,SAAAA,EACAC,SAAAA,EACAC,qBALMC,EAAAT,SAAAU,KAAAR,QADyBS,WAAvC,WAgBAC,KAAAC,MAAAC,WAAAC,gBAAAC,UAAA,UAOQJ,KAAKC,MAAMI,KAAK,SAAUL,KAAKM,OAAQN,OAH3CD,OAAAA,WAEIC,KAAAO,IAAKN,QAAMC,QAEd,IALqCM,EAAAR,KAAAS,SAAAT,KAAAC,MAAAS,UAgBlC,OATJJ,EAAQK,QAAAX,KAAAC,MAAWW,IAAA,mBACfZ,KAAAO,IAAAM,YAAAL,GACAR,KAAAc,WAASH,GAOFX,MAHPQ,QACAO,MAAA,SAGHA,MAjBqC,SAAAC,GAmBtCC,OAAAA,EAAAA,WAAQjB,KAAAC,MAAAW,IAAA,eACJG,KAAAA,MAAOH,IAAA,WAAPG,CAAOC,IApB2B,IA4BjCP,SAAA,SAAAS,GACD,IAAAC,EAAAA,UAAAD,EAAA1B,MAAA,uBAqCI2B,OAlE8BD,EAAAtB,iBAsC9BuB,GAAU,gBAHdA,GAAAA,IAAIA,EAAAA,WAEJD,EAAIA,UACAC,GAAAA,aAUJA,GAAU,IAJNA,EAAAA,KACHA,GAAAA,QAAAD,EAAAE,GAAA,KAGDD,GAAAA,UAAAD,EAAAG,KAAAF,IAEAD,EAAIA,SACAC,GAAAA,YAAAA,EAAkBD,OAAlBC,KAGJA,EAAAA,UACAA,GAAA,2BAKAA,EADAD,EAAAI,QACAH,MAAaI,EAAb,KAECJ,SAAAA,EAAA,KAIGA,EAAAA,MAKJK,EAAApC,SAAAqC,WAAAnC,QACAW,MAAAd,IAK8CuC,EAAtDtC,SAAAU,KAAAR,QASIqC,QAAS,MAET5B,WAAY,WACRC,KAAKM,UAHTqB,OAAAA,WAEA5B,IAAAA,EAAAA,KA8BI,OA7BAC,KAAA4B,WAAAC,KAAA,SAAAC,GAQI,IAAIC,EAAMC,EAAE,QALZC,KAAA,OAAA,sBACJA,KAAA,QAAAH,EAAA5B,WAAAV,OACI0C,SAAO,2BACNN,SAAAA,EAAgB1B,WAAAT,YACjB0C,SAAAD,EAAA3B,KACAQ,MAAIgB,EAAQ7B,WACFR,UAQVoC,EAAIA,WAAO5B,gBACP6B,EAAAA,QAAIpB,EAAQmB,WAAO5B,gBAIvB,IAAAP,EAAIA,EAAemC,IAAOlB,WAC1BjB,GACIyC,eAAAA,EAAeL,KAKvB/B,mBAyBJb,WAAAA,EACAU,eAAAA,EACA2B,qBAAAA,EACAE,mBAAAA,EACAW,yBAnBAA,SAAAA,EAA2BC,GAE3BA,IAAKA,MAGL,IAAAC,EAAIA,IAAUf,EACIgB,EAAAC,IAAAC,EAAiB,SAAAC,GAAA,OAAiBrD,IAAOqD,EAAAA,EAATrD,OAAwBgD,EAAxDA,OAIlB,OAAA,IAAOZ,GAAIA,WAAqBE","file":"../../../scripts/mvc/ui/icon-button.js","sourcesContent":["//=============================================================================\n/**\n * backbone model for icon buttons\n */\nvar IconButton = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        icon_class: \"\",\n        on_click: null,\n        menu_options: null,\n        is_menu_button: true,\n        id: null,\n        href: null,\n        target: null,\n        enabled: true,\n        visible: true,\n        tooltip_config: {}\n    }\n});\n\n/**\n *  backbone view for icon buttons\n */\nvar IconButtonView = Backbone.View.extend({\n    initialize: function() {\n        // better rendering this way\n        this.model.attributes.tooltip_config = { placement: \"bottom\" };\n        this.model.bind(\"change\", this.render, this);\n    },\n\n    render: function() {\n        // hide tooltip\n        this.$el.tooltip(\"hide\");\n\n        var new_elem = this.template(this.model.toJSON());\n        // configure tooltip\n        new_elem.tooltip(this.model.get(\"tooltip_config\"));\n        this.$el.replaceWith(new_elem);\n        this.setElement(new_elem);\n        return this;\n    },\n\n    events: {\n        click: \"click\"\n    },\n\n    click: function(event) {\n        // if on_click pass to that function\n        if (_.isFunction(this.model.get(\"on_click\"))) {\n            this.model.get(\"on_click\")(event);\n            return false;\n        }\n        // otherwise, bubble up ( to href or whatever )\n        return true;\n    },\n\n    // generate html element\n    template: function(options) {\n        var buffer = `title=\"${options.title}\" class=\"icon-button`;\n\n        if (options.is_menu_button) {\n            buffer += \" menu-button\";\n        }\n\n        buffer += ` ${options.icon_class}`;\n\n        if (!options.enabled) {\n            buffer += \"_disabled\";\n        }\n\n        // close class tag\n        buffer += '\"';\n\n        if (options.id) {\n            buffer += ` id=\"${options.id}\"`;\n        }\n\n        buffer += ` href=\"${options.href}\"`;\n        // add target for href\n        if (options.target) {\n            buffer += ` target=\"${options.target}\"`;\n        }\n        // set visibility\n        if (!options.visible) {\n            buffer += ' style=\"display: none;\"';\n        }\n\n        // enabled/disabled\n        if (options.enabled) {\n            buffer = `<a ${buffer}/>`;\n        } else {\n            buffer = `<span ${buffer}/>`;\n        }\n\n        // return element\n        return $(buffer);\n    }\n});\n\n// define collection\nvar IconButtonCollection = Backbone.Collection.extend({\n    model: IconButton\n});\n\n/**\n * menu with multiple icon buttons\n * views are not needed nor used for individual buttons\n */\nvar IconButtonMenuView = Backbone.View.extend({\n    tagName: \"div\",\n\n    initialize: function() {\n        this.render();\n    },\n\n    render: function() {\n        // initialize icon buttons\n        var self = this;\n        this.collection.each(button => {\n            // create and add icon button to menu\n            var elt = $(\"<a/>\")\n                .attr(\"href\", \"javascript:void(0)\")\n                .attr(\"title\", button.attributes.title)\n                .addClass(\"icon-button menu-button\")\n                .addClass(button.attributes.icon_class)\n                .appendTo(self.$el)\n                .click(button.attributes.on_click);\n\n            // configure tooltip\n            if (button.attributes.tooltip_config) {\n                elt.tooltip(button.attributes.tooltip_config);\n            }\n\n            // add popup menu to icon\n            var menu_options = button.get(\"options\");\n            if (menu_options) {\n                make_popupmenu(elt, menu_options);\n            }\n        });\n\n        // return\n        return this;\n    }\n});\n\n/**\n * Returns an IconButtonMenuView for the provided configuration.\n * Configuration is a list of dictionaries where each dictionary\n * defines an icon button. Each dictionary must have the following\n * elements: icon_class, title, and on_click.\n */\nvar create_icon_buttons_menu = (config, global_config) => {\n    // initialize global configuration\n    if (!global_config) global_config = {};\n\n    // create and initialize menu\n    var buttons = new IconButtonCollection(\n        _.map(config, button_config => new IconButton(_.extend(button_config, global_config)))\n    );\n\n    // return menu\n    return new IconButtonMenuView({ collection: buttons });\n};\n\n//=============================================================================\nexport default {\n    IconButton: IconButton,\n    IconButtonView: IconButtonView,\n    IconButtonCollection: IconButtonCollection,\n    IconButtonMenuView: IconButtonMenuView,\n    create_icon_buttons_menu: create_icon_buttons_menu\n};\n"]}