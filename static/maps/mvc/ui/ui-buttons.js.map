{"version":3,"sources":["mvc/ui/ui-buttons.js"],"names":["ButtonDefault","Backbone","View","extend","initialize","options","this","model","Model","id","_utils2","default","uid","title","icon","cls","wait","wait_text","wait_cls","disabled","setElement","$icon","$","$title","$progress","append","$progress_bar","render","self","listenTo","attributes","$el","removeClass","addClass","attr","onclick","tooltip","placement","percentage","css","width","prop","html","show","hide","disable","set","enable","unwait","setIcon","ButtonLink","href","target","ButtonCheck","on","icons","value","new_val","undefined","off","get","ButtonIcon","total","ButtonMenu","pull","$button","tag","collection","e","preventDefault","$menu","suboptions","Collection","$root","add","divider","visible","remove","length","each","submodel","$link","addMenu","merge"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-buttons.js","sourcesContent":["/** This module contains all button views. */\nimport Utils from \"utils/utils\";\n/** This renders the default button which is used e.g. at the bottom of the upload modal. */\nvar ButtonDefault = Backbone.View.extend({\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"btn btn-default\",\n                wait: false,\n                wait_text: \"Sending...\",\n                wait_cls: \"btn btn-info\",\n                disabled: false,\n                percentage: -1\n            }).set(options);\n        this.setElement(\n            $(\"<button/>\")\n                .attr(\"type\", \"button\")\n                .append((this.$icon = $(\"<i/>\")))\n                .append((this.$title = $(\"<span/>\")))\n                .append((this.$progress = $(\"<div/>\").append((this.$progress_bar = $(\"<div/>\")))))\n        );\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el\n            .removeClass()\n            .addClass(\"ui-button-default\")\n            .addClass(options.disabled && \"disabled\")\n            .attr(\"id\", options.id)\n            .attr(\"disabled\", options.disabled)\n            .off(\"click\")\n            .on(\"click\", () => {\n                $(\".tooltip\").hide();\n                options.onclick && !self.disabled && options.onclick();\n            })\n            .tooltip({ title: options.tooltip, placement: \"bottom\" });\n        this.$progress.addClass(\"progress\").css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n        this.$progress_bar.addClass(\"progress-bar\").css({ width: `${options.percentage}%` });\n        this.$icon.removeClass().addClass(\"icon fa\");\n        this.$title.removeClass().addClass(\"title\");\n        if (options.wait) {\n            this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n            this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n            this.$title.html(options.wait_text);\n        } else {\n            this.$el.addClass(options.cls);\n            this.$icon.addClass(options.icon);\n            this.$title.html(options.title);\n            options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n        }\n    },\n\n    /** Show button */\n    show: function() {\n        this.$el.show();\n    },\n\n    /** Hide button */\n    hide: function() {\n        this.$el.hide();\n    },\n\n    /** Disable button */\n    disable: function() {\n        this.model.set(\"disabled\", true);\n    },\n\n    /** Enable button */\n    enable: function() {\n        this.model.set(\"disabled\", false);\n    },\n\n    /** Show spinner to indicate that the button is not ready to be clicked */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Hide spinner to indicate that the button is ready to be clicked */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Change icon */\n    setIcon: function(icon) {\n        this.model.set(\"icon\", icon);\n    }\n});\n\n/** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\nvar ButtonLink = ButtonDefault.extend({\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"\"\n            }).set(options);\n        this.setElement($(\"<a/>\").append((this.$icon = $(\"<span/>\"))));\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n\n    render: function() {\n        var options = this.model.attributes;\n        this.$el\n            .removeClass()\n            .addClass(options.cls)\n            .attr({\n                id: options.id,\n                href: options.href || \"javascript:void(0)\",\n                title: options.title,\n                target: options.target || \"_top\",\n                disabled: options.disabled\n            })\n            .tooltip({ placement: \"bottom\" })\n            .off(\"click\")\n            .on(\"click\", () => {\n                options.onclick && !options.disabled && options.onclick();\n            });\n        this.$icon.removeClass().addClass(options.icon);\n    }\n});\n\n/** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\nvar ButtonCheck = Backbone.View.extend({\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                id: Utils.uid(),\n                title: \"Select/Unselect all\",\n                icons: [\"fa-square-o\", \"fa-minus-square-o\", \"fa-check-square-o\"],\n                value: 0,\n                onchange: function() {}\n            }).set(options);\n        this.setElement(\n            $(\"<div/>\")\n                .append((this.$icon = $(\"<span/>\")))\n                .append((this.$title = $(\"<span/>\")))\n        );\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n\n    render: function(options) {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el\n            .addClass(\"ui-button-check\")\n            .off(\"click\")\n            .on(\"click\", () => {\n                self.model.set(\"value\", (self.model.get(\"value\") === 0 && 2) || 0);\n                options.onclick && options.onclick();\n            });\n        this.$title.html(options.title);\n        this.$icon\n            .removeClass()\n            .addClass(\"icon fa ui-margin-right\")\n            .addClass(options.icons[options.value]);\n    },\n\n    /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n    value: function(new_val, total) {\n        if (new_val !== undefined) {\n            if (total && new_val !== 0) {\n                new_val = (new_val !== total && 1) || 2;\n            }\n            this.model.set(\"value\", new_val);\n            this.model.get(\"onchange\")(this.model.get(\"value\"));\n        }\n        return this.model.get(\"value\");\n    }\n});\n\n/** This renders a differently styled, more compact button version. */\nvar ButtonIcon = ButtonDefault.extend({\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"ui-button-icon\",\n                disabled: false\n            }).set(options);\n        this.setElement(\n            $(\"<div/>\").append(\n                (this.$button = $(\"<div/>\")\n                    .append((this.$icon = $(\"<i/>\")))\n                    .append((this.$title = $(\"<span/>\"))))\n            )\n        );\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n\n    render: function(options) {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el\n            .removeClass()\n            .addClass(options.cls)\n            .addClass(options.disabled && \"disabled\")\n            .attr(\"disabled\", options.disabled)\n            .attr(\"id\", options.id)\n            .off(\"click\")\n            .on(\"click\", () => {\n                $(\".tooltip\").hide();\n                !options.disabled && options.onclick && options.onclick();\n            });\n        this.$button.addClass(\"button\").tooltip({ title: options.tooltip, placement: \"bottom\" });\n        this.$icon\n            .removeClass()\n            .addClass(\"icon fa\")\n            .addClass(options.icon);\n        this.$title.addClass(\"title\").html(options.title);\n        options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n    }\n});\n\n/** This class creates a button with dropdown menu. */\nvar ButtonMenu = ButtonDefault.extend({\n    $menu: null,\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                id: \"\",\n                title: \"\",\n                pull: \"right\",\n                icon: null,\n                onclick: null,\n                cls: \"ui-button-icon ui-button-menu\",\n                tooltip: \"\",\n                target: \"\",\n                href: \"\",\n                onunload: null,\n                visible: true,\n                tag: \"\"\n            }).set(options);\n        this.collection = new Backbone.Collection();\n        this.setElement(\n            $(\"<div/>\").append(\n                (this.$root = $(\"<div/>\")\n                    .append((this.$icon = $(\"<i/>\")))\n                    .append((this.$title = $(\"<span/>\"))))\n            )\n        );\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.listenTo(this.collection, \"change add remove reset\", this.render, this);\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el\n            .removeClass()\n            .addClass(\"dropdown\")\n            .addClass(options.cls)\n            .attr(\"id\", options.id)\n            .css({\n                display: options.visible && this.collection.where({ visible: true }).length > 0 ? \"block\" : \"none\"\n            });\n        this.$root\n            .addClass(\"root button dropdown-toggle\")\n            .attr(\"data-toggle\", \"dropdown\")\n            .tooltip({ title: options.tooltip, placement: \"bottom\" })\n            .off(\"click\")\n            .on(\"click\", e => {\n                $(\".tooltip\").hide();\n                e.preventDefault();\n                options.onclick && options.onclick();\n            });\n        this.$icon\n            .removeClass()\n            .addClass(\"icon fa\")\n            .addClass(options.icon);\n        this.$title\n            .removeClass()\n            .addClass(\"title\")\n            .html(options.title);\n        options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n        this.$menu && this.$menu.remove();\n        if (this.collection.length > 0) {\n            this.$menu = $(\"<ul/>\")\n                .addClass(\"menu dropdown-menu\")\n                .addClass(`pull-${self.model.get(\"pull\")}`)\n                .attr(\"role\", \"menu\");\n            this.$el.append(this.$menu);\n        }\n        this.collection.each(submodel => {\n            var suboptions = submodel.attributes;\n            if (suboptions.visible) {\n                var $link = $(\"<a/>\")\n                    .addClass(\"dropdown-item\")\n                    .attr({\n                        href: suboptions.href,\n                        target: suboptions.target\n                    })\n                    .append(\n                        $(\"<i/>\")\n                            .addClass(\"fa\")\n                            .addClass(suboptions.icon)\n                            .css(\"display\", suboptions.icon ? \"inline-block\" : \"none\")\n                    )\n                    .append(suboptions.title)\n                    .on(\"click\", e => {\n                        if (suboptions.onclick) {\n                            e.preventDefault();\n                            suboptions.onclick();\n                        }\n                    });\n                self.$menu.append($(\"<li/>\").append($link));\n                suboptions.divider && self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n            }\n        });\n    },\n\n    /** Add a new menu item */\n    addMenu: function(options) {\n        this.collection.add(\n            Utils.merge(options, {\n                title: \"\",\n                target: \"\",\n                href: \"\",\n                onclick: null,\n                divider: false,\n                visible: true,\n                icon: null,\n                cls: \"button-menu btn-group\"\n            })\n        );\n    }\n});\n\nexport default {\n    ButtonDefault: ButtonDefault,\n    ButtonLink: ButtonLink,\n    ButtonIcon: ButtonIcon,\n    ButtonCheck: ButtonCheck,\n    ButtonMenu: ButtonMenu\n};\n"]}