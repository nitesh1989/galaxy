{"version":3,"sources":["mvc/ui/ui-options.js"],"names":["Base","Backbone","View","extend","initialize","options","self","this","model","Model","visible","data","id","_utils2","default","uid","error_text","wait_text","multiple","optional","onchange","set","_changeValue","_changeWait","listenTo","_changeData","get","value","$el","empty","removeClass","addClass","append","$message","$","$menu","$options","all_button","render","_uiButtons2","ButtonCheck","_getValue","trigger","_changeVisible","update","_templateOptions","_","each","option","_templateOption","placement","on","length","_messageShow","hide","css","show","_setValue","first","new_value","undefined","val","wait","unwait","prop","values","isArray","v","selected","push","isEmpty","_template","status","html","text","BaseIcons","type","name","pair","attr","label","Radio","RadioButton","call","Checkbox","prototype","closest","icon"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-options.js","sourcesContent":["/** Base class for options based ui elements **/\nimport Utils from \"utils/utils\";\nimport Buttons from \"mvc/ui/ui-buttons\";\nvar Base = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                visible: true,\n                data: [],\n                id: Utils.uid(),\n                error_text: \"No options available.\",\n                wait_text: \"Please wait...\",\n                multiple: false,\n                optional: false,\n                onchange: function() {}\n            }).set(options);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n        this.on(\"change\", () => {\n            self.model.get(\"onchange\")(self.value());\n        });\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el\n            .empty()\n            .removeClass()\n            .addClass(\"ui-options\")\n            .append((this.$message = $(\"<div/>\")))\n            .append((this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")))\n            .append((this.$options = $(this._template())));\n\n        // add select/unselect all button\n        this.all_button = null;\n        if (this.model.get(\"multiple\")) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$(\"input\").prop(\"checked\", self.all_button.value() !== 0);\n                    self.value(self._getValue());\n                    self.trigger(\"change\");\n                }\n            });\n            this.$menu.append(this.all_button.$el);\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if (this._templateOptions) {\n            this.$options.append(this._templateOptions(this.model.get(\"data\")));\n        } else {\n            _.each(this.model.get(\"data\"), option => {\n                self.$options.append(\n                    $(self._templateOption(option))\n                        .addClass(\"ui-option\")\n                        .tooltip({\n                            title: option.tooltip,\n                            placement: \"bottom\"\n                        })\n                );\n            });\n        }\n        var self = this;\n        this.$(\"input\").on(\"change\", () => {\n            self.value(self._getValue());\n            self.trigger(\"change\");\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n    },\n\n    _changeWait: function() {\n        if (this.model.get(\"wait\")) {\n            if (this.length() === 0) {\n                this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if (this.length() === 0) {\n                this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css(\"display\", \"inline-block\");\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue(this.model.get(\"value\"));\n        if (this._getValue() === null && !this.model.get(\"multiple\") && !this.model.get(\"optional\")) {\n            this._setValue(this.first());\n        }\n        this.all_button &&\n            this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n    },\n\n    /** Return/Set current selection */\n    value: function(new_value) {\n        new_value !== undefined && this.model.set(\"value\", new_value);\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$(\"input\").first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$(\".ui-option\").length;\n    },\n\n    /** Set value to dom */\n    _setValue: function(new_value) {\n        var self = this;\n        if (new_value !== undefined) {\n            this.$(\"input\").prop(\"checked\", false);\n            if (new_value !== null) {\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, v => {\n                    self\n                        .$(`input[value=\"${v}\"]`)\n                        .first()\n                        .prop(\"checked\", true);\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$(\":checked\").each(function() {\n            selected.push($(this).val());\n        });\n        if (Utils.isEmpty(selected)) {\n            return null;\n        }\n        return this.model.get(\"multiple\") ? selected : selected[0];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function(text, status) {\n        this.$message\n            .show()\n            .removeClass()\n            .addClass(`ui-message alert alert-${status}`)\n            .html(text);\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $(\"<div/>\").addClass(\"ui-options-list\");\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function(pair) {\n        var id = Utils.uid();\n        return $(\"<div/>\")\n            .addClass(\"ui-option\")\n            .append(\n                $(\"<input/>\").attr({\n                    id: id,\n                    type: this.model.get(\"type\"),\n                    name: this.model.id,\n                    value: pair.value\n                })\n            )\n            .append(\n                $(\"<label/>\")\n                    .addClass(\"ui-options-label\")\n                    .attr(\"for\", id)\n                    .html(pair.label)\n            );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function(options) {\n        options.type = \"radio\";\n        BaseIcons.prototype.initialize.call(this, options);\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function(options) {\n        options.type = \"checkbox\";\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call(this, options);\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function(options) {\n        Base.prototype.initialize.call(this, options);\n    },\n\n    /** Set current value */\n    _setValue: function(new_value) {\n        if (new_value !== undefined) {\n            this.$(\"input\").prop(\"checked\", false);\n            this.$(\"label\").removeClass(\"active\");\n            this.$(`[value=\"${new_value}\"]`)\n                .prop(\"checked\", true)\n                .closest(\"label\")\n                .addClass(\"active\");\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function(pair) {\n        var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n        pair.icon &&\n            $el.append(\n                $(\"<i/>\")\n                    .addClass(\"fa\")\n                    .addClass(pair.icon)\n                    .addClass(!pair.label && \"no-padding\")\n            );\n        $el.append(\n            $(\"<input/>\").attr({\n                type: \"radio\",\n                name: this.model.id,\n                value: pair.value\n            })\n        );\n        pair.label && $el.append(pair.label);\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $(\"<div/>\")\n            .addClass(\"btn-group ui-radiobutton\")\n            .attr(\"data-toggle\", \"buttons\");\n    }\n});\n\nexport default {\n    Base: Base,\n    BaseIcons: BaseIcons,\n    Radio: Radio,\n    RadioButton: RadioButton,\n    Checkbox: Checkbox\n};\n"]}