{"version":3,"sources":["mvc/ui/ui-select-default.js"],"names":["View","Backbone","extend","initialize","options","self","this","data","data2","model","Model","id","_utils2","default","uid","cls","error_text","empty_text","visible","wait","multiple","readonly","onchange","value","get","_changeData","searchable","_changeDisabled","optional","_changeWait","disabled","_changeVisible","_changeValue","render","_renderSearchable","_renderClassic","$el","addClass","attr","$select","empty","listenTo","prop","on","_getValue","trigger","append","$","$dropdown","$resize","$resize_icon","hide","show","removeClass","off","currentY","currentHeight","minHeight","height","Math","max","event","pageY","all_button","onclick","select2","new_value","_uiButtons2","_","prepend","option","push","_match","term","text","label","toUpperCase","indexOf","order","tags","closeOnSelect","query","pagesize","results","found","matched_tags","q","callback","more","filter","e","formatResult","each","escape","tag","memo","slice","page","length","result","reduce","set","find","remove","html","_setValue","isArray","undefined","first","exists","findWhere","d","v","enable","disable","add","sorter","update","setOnChange","keep","sort","val","selected","a","b","isEmpty"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-default.js","sourcesContent":["/**\n *  This class creates/wraps a default html select field as backbone class.\n */\nimport Utils from \"utils/utils\";\nimport Buttons from \"mvc/ui/ui-buttons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.data = [];\n        this.data2 = [];\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-select\",\n                error_text: \"No options available\",\n                empty_text: \"Nothing selected\",\n                visible: true,\n                wait: false,\n                multiple: false,\n                searchable: true,\n                optional: false,\n                disabled: false,\n                readonly: false,\n                onchange: function() {},\n                value: null,\n                individual: false,\n                pagesize: 20\n            }).set(options);\n        this.on(\"change\", () => {\n            self.model.get(\"onchange\") && self.model.get(\"onchange\")(self.value());\n        });\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(this.model, \"change:disabled\", this._changeDisabled, this);\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(this.model, \"change:multiple change:searchable change:cls change:id\", this.render, this);\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.model.get(\"searchable\") ? this._renderSearchable() : this._renderClassic();\n        this.$el.addClass(this.model.get(\"cls\")).attr(\"id\", this.model.get(\"id\"));\n        this.$select\n            .empty()\n            .addClass(\"select\")\n            .attr(\"id\", `${this.model.get(\"id\")}_select`)\n            .prop(\"multiple\", this.model.get(\"multiple\"))\n            .on(\"change\", () => {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        var self = this;\n        this.$el\n            .addClass(this.model.get(\"multiple\") ? \"ui-select-multiple\" : \"ui-select\")\n            .append((this.$select = $(\"<select/>\")))\n            .append((this.$dropdown = $(\"<div/>\")))\n            .append((this.$resize = $(\"<div/>\").append((this.$resize_icon = $(\"<i/>\")))));\n        if (this.model.get(\"multiple\")) {\n            this.$dropdown.hide();\n            this.$resize_icon.addClass(\"fa fa-angle-double-right fa-rotate-45\").show();\n            this.$resize\n                .removeClass()\n                .addClass(\"icon-resize\")\n                .show()\n                .off(\"mousedown\")\n                .on(\"mousedown\", event => {\n                    var currentY = event.pageY;\n                    var currentHeight = self.$select.height();\n                    self.minHeight = self.minHeight || currentHeight;\n                    $(\"#dd-helper\")\n                        .show()\n                        .on(\"mousemove\", event => {\n                            self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n                        })\n                        .on(\"mouseup mouseleave\", () => {\n                            $(\"#dd-helper\")\n                                .hide()\n                                .off();\n                        });\n                });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        var self = this;\n        this.$el.append((this.$select = $(\"<div/>\"))).append((this.$dropdown = $(\"<div/>\")));\n        this.$dropdown.hide();\n        if (!this.model.get(\"multiple\")) {\n            this.$dropdown.show().on(\"click\", () => {\n                self.$select.select2 && self.$select.select2(\"open\");\n            });\n        }\n        this.all_button = null;\n        if (this.model.get(\"multiple\") && !this.model.get(\"individual\") && !this.model.get(\"readonly\")) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    var new_value = [];\n                    self.all_button.value() !== 0 &&\n                        _.each(self.model.get(\"data\"), option => {\n                            new_value.push(option.value);\n                        });\n                    self.value(new_value);\n                    self.trigger(\"change\");\n                }\n            });\n            this.$el.prepend(this.all_button.$el);\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function(term, text) {\n        return (\n            !term ||\n            term == \"\" ||\n            String(text)\n                .toUpperCase()\n                .indexOf(term.toUpperCase()) >= 0\n        );\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        var self = this;\n        this.data = [];\n        if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n            this.data.push({\n                value: \"__null__\",\n                label: self.model.get(\"empty_text\")\n            });\n        }\n        _.each(this.model.get(\"data\"), option => {\n            self.data.push(option);\n        });\n        if (this.length() == 0) {\n            this.data.push({\n                value: \"__null__\",\n                label: this.model.get(\"error_text\")\n            });\n        }\n        if (this.model.get(\"searchable\")) {\n            this.data2 = [];\n            _.each(this.data, (option, index) => {\n                self.data2.push({\n                    order: index,\n                    id: option.value,\n                    text: option.label,\n                    tags: option.tags\n                });\n            });\n            this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n            this.matched_tags = {};\n            this.$select.select2({\n                data: self.data2,\n                closeOnSelect: !this.model.get(\"multiple\"),\n                multiple: this.model.get(\"multiple\"),\n                query: function(q) {\n                    self.matched_tags = {};\n                    var pagesize = self.model.get(\"pagesize\");\n                    var results = _.filter(self.data2, e => {\n                        var found = false;\n                        _.each(e.tags, tag => {\n                            if (self._match(q.term, tag)) {\n                                found = self.matched_tags[tag] = true;\n                            }\n                        });\n                        return found || self._match(q.term, e.text);\n                    });\n                    q.callback({\n                        results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n                        more: results.length >= q.page * pagesize\n                    });\n                },\n                formatResult: function(result) {\n                    return `${_.escape(result.text)}<div class=\"ui-tags\">${_.reduce(\n                        result.tags,\n                        (memo, tag) => {\n                            if (self.matched_tags[tag]) {\n                                return `${memo}&nbsp;<div class=\"label label-info\">${_.escape(tag)}</div>`;\n                            }\n                            return memo;\n                        },\n                        \"\"\n                    )}</div>`;\n                }\n            });\n            this.$(\".select2-container .select2-search input\").off(\"blur\");\n        } else {\n            this.$select.find(\"option\").remove();\n            _.each(this.data, option => {\n                self.$select.append(\n                    $(\"<option/>\")\n                        .attr(\"value\", option.value)\n                        .html(_.escape(option.label))\n                );\n            });\n        }\n        this.model.set(\"disabled\", this.model.get(\"readonly\") || this.length() == 0);\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if (this.model.get(\"searchable\")) {\n            this.$select.select2(this.model.get(\"disabled\") ? \"disable\" : \"enable\");\n        } else {\n            this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown\n            .removeClass()\n            .addClass(\"icon-dropdown fa\")\n            .addClass(this.model.get(\"wait\") ? \"fa-spinner fa-spin\" : \"fa-caret-down\");\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue(this.model.get(\"value\"));\n        if (this.model.get(\"multiple\")) {\n            if (this.all_button) {\n                var value = this._getValue();\n                this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n            }\n        } else if (this._getValue() === null && !this.model.get(\"optional\")) {\n            this._setValue(this.first());\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function(new_value) {\n        new_value !== undefined && this.model.set(\"value\", new_value);\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[0].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function(value) {\n        return _.findWhere(this.data, { value: value });\n    },\n\n    /** Return the label/text of the current selection */\n    text: function() {\n        var v = this._getValue();\n        var d = this.exists($.isArray(v) ? v[0] : v);\n        return d ? d.label : \"\";\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set(\"visible\", true);\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set(\"visible\", false);\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get(\"disabled\");\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set(\"disabled\", false);\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set(\"disabled\", true);\n    },\n\n    /** Update all available options at once */\n    add: function(options, sorter) {\n        _.each(this.model.get(\"data\"), v => {\n            v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n        });\n        sorter && options && options.sort(sorter);\n        this.model.set(\"data\", options);\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function(callback) {\n        this.model.set(\"onchange\", callback);\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray(this.model.get(\"data\")) ? this.model.get(\"data\").length : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function(new_value) {\n        var self = this;\n        if (new_value === null || new_value === undefined) {\n            new_value = \"__null__\";\n        }\n        if (this.model.get(\"multiple\")) {\n            new_value = $.isArray(new_value) ? new_value : [new_value];\n        } else if ($.isArray(new_value)) {\n            if (new_value.length > 0) {\n                new_value = new_value[0];\n            } else {\n                new_value = \"__null__\";\n            }\n        }\n        if (this.model.get(\"searchable\")) {\n            if ($.isArray(new_value)) {\n                var val = [];\n                _.each(new_value, v => {\n                    var d = _.findWhere(self.data2, { id: v });\n                    d && val.push(d);\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere(this.data2, { id: new_value });\n                new_value = d;\n            }\n            this.$select.select2(\"data\", new_value);\n        } else {\n            this.$select.val(new_value);\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if (this.model.get(\"searchable\")) {\n            var selected = this.$select.select2(\"data\");\n            if (selected) {\n                if ($.isArray(selected)) {\n                    val = [];\n                    selected.sort((a, b) => a.order - b.order);\n                    _.each(selected, v => {\n                        val.push(v.id);\n                    });\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty(val) ? null : val;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}