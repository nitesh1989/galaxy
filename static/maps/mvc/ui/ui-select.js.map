{"version":3,"sources":["mvc/ui/ui-select.js"],"names":["View","Backbone","extend","optionsDefault","css","placeholder","data","value","multiple","minimumInputLength","initialData","initialize","options","_utils2","default","merge","this","_template","container","console","append","$el","select_data","_refresh","log","_setValue","self","onchange","on","new_value","before","_getValue","after","text","select2","disabled","enable","disable","add","push","id","del","index","_getIndex","splice","remove","update","key","select_opt","containerCssClass","dropdownAutoWidth","escapeMarkup","formatResult","formatSelection","initSelection","selected","ajax","length","findIndex"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select.js","sourcesContent":["// dependencies\nimport Utils from \"utils/utils\";\n/**\n * A plugin for initializing select2 input items.\n * Make sure the select2 library itself is loaded beforehand.\n * Also the element to which select2 will be appended has to \n * be created before select2 initialization (and passed as option).\n */\nvar View = Backbone.View.extend({\n    // options\n    optionsDefault: {\n        css: \"\",\n        placeholder: \"No data available\",\n        data: [],\n        value: null,\n        multiple: false,\n        minimumInputLength: 0,\n        // example format of initial data: \"id:name,55:anotherrole@role.com,27:role@role.com\"\n        initialData: \"\"\n    },\n\n    // initialize\n    initialize: function(options) {\n        // configure options\n        this.options = Utils.merge(options, this.optionsDefault);\n\n        // create new element\n        this.setElement(this._template(this.options));\n\n        // check if container exists\n        if (!this.options.container) {\n            console.log(\"ui-select::initialize() : container not specified.\");\n            return;\n        }\n\n        // add to dom\n        this.options.container.append(this.$el);\n\n        // link selection dictionary\n        this.select_data = this.options.data;\n\n        // refresh\n        this._refresh();\n\n        if (!this.options.multiple) {\n            // initial value\n            if (this.options.value) {\n                this._setValue(this.options.value);\n            }\n\n            // add change event\n            var self = this;\n            if (this.options.onchange) {\n                this.$el.on(\"change\", () => {\n                    self.options.onchange(self.value());\n                });\n            }\n        }\n    },\n\n    // value\n    value: function(new_value) {\n        // get current id/value\n        var before = this._getValue();\n\n        // check if new_value is defined\n        if (new_value !== undefined) {\n            this._setValue(new_value);\n        }\n\n        // get current id/value\n        var after = this._getValue();\n\n        // fire onchange\n        if (after != before && this.options.onchange) {\n            this.options.onchange(after);\n        }\n\n        // return current value\n        return after;\n    },\n\n    // label\n    text: function() {\n        return this.$el.select2(\"data\").text;\n    },\n\n    // disabled\n    disabled: function() {\n        return !this.$el.select2(\"enable\");\n    },\n\n    // enable\n    enable: function() {\n        this.$el.select2(\"enable\", true);\n    },\n\n    // disable\n    disable: function() {\n        this.$el.select2(\"enable\", false);\n    },\n\n    // add\n    add: function(options) {\n        // add options\n        this.select_data.push({\n            id: options.id,\n            text: options.text\n        });\n\n        // refresh\n        this._refresh();\n    },\n\n    // remove\n    del: function(id) {\n        // search option\n        var index = this._getIndex(id);\n\n        // check if found\n        if (index != -1) {\n            // remove options\n            this.select_data.splice(index, 1);\n\n            // refresh\n            this._refresh();\n        }\n    },\n\n    // remove\n    remove: function() {\n        this.$el.select2(\"destroy\");\n    },\n\n    // update\n    update: function(options) {\n        // copy options\n        this.select_data = [];\n        for (var key in options.data) {\n            this.select_data.push(options.data[key]);\n        }\n\n        // refresh\n        this._refresh();\n    },\n\n    // refresh\n    _refresh: function() {\n        // add select2 data based on type of input\n        if (!this.options.multiple) {\n            var selected = this._getValue();\n            var select_opt = {\n                data: this.select_data,\n                containerCssClass: this.options.css,\n                placeholder: this.options.placeholder,\n                dropdownAutoWidth: true\n            };\n            this.$el.select2(select_opt);\n            // select previous value (if exists)\n            this._setValue(selected);\n        } else {\n            var select_opt = {\n                multiple: this.options.multiple,\n                containerCssClass: this.options.css,\n                placeholder: this.options.placeholder,\n                minimumInputLength: this.options.minimumInputLength,\n                ajax: this.options.ajax,\n                dropdownCssClass: this.options.dropdownCssClass,\n                escapeMarkup: this.options.escapeMarkup,\n                formatResult: this.options.formatResult,\n                formatSelection: this.options.formatSelection,\n                initSelection: this.options.initSelection,\n                initialData: this.options.initialData\n            };\n            this.$el.select2(select_opt);\n        }\n    },\n\n    // get index\n    _getIndex: function(value) {\n        // returns the index of the searched value\n        _.findIndex(this.select_data, { id: value });\n    },\n\n    // get value\n    _getValue: function() {\n        return this.$el.select2(\"val\");\n    },\n\n    // set value\n    _setValue: function(new_value) {\n        var index = this._getIndex(new_value);\n        if (index == -1) {\n            if (this.select_data.length > 0) {\n                new_value = this.select_data[0].id;\n            }\n        }\n        this.$el.select2(\"val\", new_value);\n    },\n\n    // element\n    _template: function(options) {\n        return `<input type=\"hidden\" value=\"${this.options.initialData}\"/>`;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}