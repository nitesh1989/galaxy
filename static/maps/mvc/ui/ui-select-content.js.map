{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["Batch","DISABLED","ENABLED","LINKED","Configurations","data","src","icon","tooltip","multiple","batch","data_multiple","data_collection","workflow_data_multiple","workflow_data_collection","module_data","pagelimit","statustimer","self","options","this","model","button_product","value","Model","hda","hdca","setElement","$","addClass","_uiMisc2","default","RadioButton","View","$batch_div","$batch","e","preventDefault","append","lastenter","target","_handleDrop","linked","clone","enabled","listenTo","html","$el","css","on","_changeWait","removeClass","unwait","update","_changeData","new_value","_changeCurrent","undefined","set","_changeValue","_changeType","id_list","render","result","values","push","details","wait","_","get","button_type","current","field","fields","isArray","length","_batch","i","history","config","debug","config_id","sort","a","b","hid","Galaxy","emit","each","optional","batchmode","searchable","error_text","onchange","String","button_width","textify","$batchfield","button_data","c","_uiSelectDefault2","extensions","src_labels","select_options","trigger","keep","item","label","tags","empty","Math","max","margin-left","list","items","name","id","drop_data","JSON","parse","ev","originalEvent","findWhere","new_src","add","current_value","_handleDropStatus","indexOf","dataTransfer","getData","map_over_type","new_id","status","setTimeout"],"mappings":"oQAIIA,GAAUC,SAAU,WAAYC,QAAS,UAAWC,OAAQ,UAG5DC,GACAC,OAEQC,IAAK,MACLC,KAAM,YACNC,QAAS,iBACTC,UAAU,EACVC,MAAOV,EAAMC,WAGbK,IAAK,MACLC,KAAM,aAflBC,QAAA,oBACIR,UAAUC,EAiBFS,MAAOV,EAAMG,SAbrBE,IACI,OACIC,KAAK,cACLC,QAAM,qBACNC,UAAS,EACTC,MAAAA,EAAUN,SAIVG,gBAEAE,IAAAA,MACAC,KAAAA,aACAC,QAAOV,oBAEXS,UAAA,EACIH,MAAKN,EADTC,WAIIQ,IAAAA,OACAC,KAAAA,cArBSF,QAAA,sBAwBjBG,UAAAA,EAEQL,MAAKN,EADTC,WAIIQ,kBAGJH,IAAA,OACIA,KAAK,cACLC,QAAM,qBACNC,UAAS,EACTC,MAAAA,EAAUR,WAIlBW,gBAGQL,IAAAA,MACAC,KAAAA,YACAC,QAAAA,iBACAC,UAAOV,EA9CEU,MAAAV,EAAAC,WAoDTM,yBAEAE,IAAAA,MACAC,KAAAA,aAvDSF,QAAA,oBA0DjBK,UAAAA,EAEQP,MAAKN,EADTC,WAIIQ,2BA/DSH,IAAA,OAmEjBQ,KAAAA,cAEQR,QAAK,qBACLC,UAAM,EACNC,MAAAA,EAASP,WAHbc,cAUIT,IAAK,MACLC,KAAM,YACNC,QAAS,iBACTC,UAAU,EACVC,MAAOV,EAAMC,WAIbM,IAAAA,MACAC,KAAAA,aACAC,QAAAA,oBACAC,UAAOV,EAzFEU,MAAAV,EAAAE,UA+FTK,yBAEAE,IAAAA,OACAC,KAAAA,cAEJF,QAAA,qBACIF,UAAK,EACLC,MAAMP,EAAAC,WAGNS,IAAAA,OAbgBH,KAAA,YA5F5BC,QAAA,uBAwGYC,UAAU,EAMtBC,MAAAV,EAAAE,WAQgBc,EAAAA,SAAAA,KAAAA,QACAC,WAAAA,SAAAA,GAHe,IAAAC,EAIZC,KACXC,KAAAC,MACAF,GAAKG,EAALD,OACIE,IAAAA,SAAOC,OACPnB,YACIoB,IAAA,UAAAC,KAAA,sBACInB,UAAM,IACNgB,YAAO,MACPf,IAAAA,GAHJY,KAAAO,WAMAC,EAAA,UAAAC,SAAA,sBACItB,KAAAA,eAAM,IAAAuB,EAAAC,QAAAC,YADVC,MAEIV,MAAAA,QACAf,OAZZD,KAAA,cAgBI2B,MAAAA,QAQCC,QACOD,yHAfA3B,KAAM,qBA8BlBgB,MAAA,OACAf,QACQ,sEAKA4B,IAAAA,EAAEC,EAAAA,UANVR,SAQQ,gBACAS,OAAAV,EAAKW,QAALV,SAAqBW,kBAT7BF,OAYQpB,EAAAA,WAAKuB,KAZb,kGAgBArB,KAAAe,QAhCIO,OAAQR,EAAWS,QAkCvBC,QAAAV,EACKW,QACAA,OACAA,EAAAA,UACLP,OAEIV,EAAA,UAKJC,SAAA,iBArCyBiB,KAAK,mBAwCtBR,OAAUlB,KAAAE,eAAMyB,MAAxBT,OAAAV,EAAA,UAAAoB,IAAA,QAAA,UAMA5B,KAAA2B,IACAE,GAAA,YAAA,SAAAb,GACAhB,KAAK8B,UAALd,EAAAI,OA5FwBtB,EAAA6B,IAAAlB,SAAA,iBA+F5BoB,GAAA,WAAA,SAAAb,GACMA,EAAAC,mBAhGsBY,GAAA,YAAA,SAAAb,GA6DhBhB,KAAKmB,YAAcH,EAAEI,QAAUtB,EAAK6B,IAAII,YAAY,iBAwChEC,GAAQ,OAAA,SAAAhB,GACJlB,EAAKG,YAALe,KAIJiB,KAAAA,WAnCIjC,KAAKyB,SAASzB,KAAKC,MAAO,cAAeD,KAAKkC,YAAalC,MAuC/DA,KAAAyB,SAAAzB,KAAAC,MAAA,cAAAD,KAAA8B,YAAA9B,MACAG,KAAAA,SAAOH,KAAAC,MAASkC,iBAAWnC,KAAAoC,eAAApC,MACvBmC,KAAAA,SAAAA,KAAcE,MAAAA,eAAwBC,KAAIC,aAASJ,MACnDnC,KAAAyB,SACAzB,KAAIC,MACA,gEACAD,KAAAwC,YACIC,MAEIzC,KAAA0C,SAGI1C,KAAA6B,GAAA,SAAA,WACIc,EAAAA,UAAAA,EAAOC,SAAOC,EAAKC,YAOtBJ,OAAA,WACJ1C,KAAAwC,cACDG,KAAAA,eAAmB3C,KAAA8B,eAG1BiB,KAAA,WACJ/C,KAtBDC,MAsBOqC,IAAA,QAAA,IAIVN,OA5I2B,WAsGxBhC,KAAKC,MAAMqC,IAAI,QAAQ,IA2CvBU,OAAAA,SAAOjD,GACHC,KAAAC,MAAAqC,IAAIxC,OAAWmD,IAIV9C,MAAA,SAAAgC,QACDrC,IAAAA,GAAKoD,KAAY/C,MAAjBmC,IAAA,QAAAH,GACH,IAAAgB,EANDnD,KAMOC,MAAAgD,IAAA,WACHG,GAAAA,KAAAA,OAAAA,GAAA,CACH,IAAAX,EAAAzC,KAAAqD,OAAAF,GAAAhD,QACJ,GAVD,OAAAsC,IAjJwBA,EAAAjC,EAAA8C,QAAAb,GAAAA,GAAAA,IAsHJc,OAAS,EAAG,CAwCpC,IAAAZ,EAAA3C,KAAAwD,QAAAZ,YACAJ,IAAa,IAAAiB,KAAAhB,EAAA,CACE,IAAXK,EAAA9C,KAAA0D,QAAAjB,EAAAgB,GAAA,IAAAzD,KAAA2D,OAAAR,GAAAjE,KAtCgB,IAAI4D,EAiDJc,OAJZ5E,OAAe6E,KAAfD,MACc5E,6BADdA,oCAEGyD,EAAAgB,GAFHzE,MAIkB,KATtB2D,EAAAC,OAAAC,KAAAC,GAaI7D,OADJ0D,EAAAC,OAAAkB,KAAA,SAAAC,EAAAC,GAAA,OAAAD,EAAAE,IAAAD,EAAAC,MACWnE,QAIXoE,OAAAC,KAAAP,MAAA,6BAAA,yBAAAzB,EAAA,MAEA,OAAA,MAIQhD,eAAAA,WACAC,IAAAA,EAAAA,KAHkB4D,EAAAoB,KAAApE,KAAtBqD,OAAA,SAAAD,EAAAK,GAKA3D,EAAKuD,MAALJ,IAAYJ,YACJY,GACAY,EAAAA,IAAAA,OACAhF,EAAAA,KAAAA,EAAAA,OAAYA,SAAAA,EAFAiF,GAGZC,EACIzE,EAAGT,OAAHoE,GAAgBxE,OAAQA,EAAR,OAA8BC,YAElDsF,EAAAA,YAAAA,MAAAA,IAEI1E,EAAAA,IAAAA,UAOZb,YAAAA,WACAwF,IAAAA,EAAAA,KAGCZ,GANc7D,KAAnBC,MAAAgD,IAAA,UAAAjD,KAAAC,MAAAgD,IAAA,UAAmB,IAAnB,IArCIyB,OAAO1E,KAAKC,MAAMgD,IAAI,UA8C1BjD,KAAAC,MAAAgD,IAAA,YAAA,YAAA,IACAjE,EAAA6E,GACA7D,KAAI2E,OAAAA,EAAJd,IAEI7D,KAAA2D,OAASzC,EAAAA,KACTyD,OAAAA,KAAAA,MAAAA,mCAAAA,kCAAAd,EAAAc,OAIH,IAAA1F,EAFDa,EAAAG,MAAAgD,IAAA,QAGAD,EAAYjC,EAAAA,QAAZ6D,QAAoB5E,KAAC6E,MAAAA,IAAD,eAChB/E,EAASoB,KAAAA,MAAO2D,IAAAA,cAGpB7E,KAAAqD,UACArD,KAAA8E,eACH9B,EAnO2BoB,KAAApE,KAAA2D,OAAA,SAAAoB,EAAAtB,GAuLpB3D,EAAKgF,YAAYjC,MA8CzB1C,MAAAsD,EACA3B,KAAaiD,EAAA5F,KACLW,QAAOiF,EAAX3F,UAEIgE,EAAAA,OAAMtD,KADV,IAAAkF,EAAArE,QAAAE,MAxOwBwD,SAAAvE,EAAAG,MAAAgD,IAAA,YA+LZ5D,SAAU0F,EAAE1F,SA8C5BkF,YACaQ,EAAA1F,UAAAJ,GAAWA,EAAA8F,EAAA7F,MAAAD,EAAA8F,EAAA7F,KAAAqE,OAAAzD,EAAAG,MAAAgD,IAAA,aAChBlD,YAAeE,EACfH,WAAAA,OAAJmF,EAAAA,EAAA,IAAA,KAAAC,EAAAH,EAAA7F,MAAA,WAAIY,cACAqF,SAAAA,WACGpF,EAASqF,QAAA,gBAKJC,KAAAA,YAAAA,IAAMC,EAAAA,QAAAA,YAFezE,MAGrB0E,MAAAA,KAAAA,MAAAA,IAAUD,WACVnF,KAAAA,KAAAA,YACAqF,SAAAA,SAAMF,GALexF,EAAzBG,MAAAqC,IAAA,UAAAnC,GAOAL,EAAAA,QAAK4D,aAI0D1D,KAAA2B,IAAA8D,QAAA,IAAAd,EAAnE,EACH3E,KAFDqD,OAAAE,OAAA,IA/PwBvD,KAAA2B,IAAAT,OAAAlB,KAAAkD,YAAAvB,KAwNpBgD,EAAkBe,KAAKC,IAAI,EAAwB,GAArB3F,KAAKqD,OAAOE,QAA1C,MA6CRhB,EAAAA,KAAAA,KAAAA,OAAc,SAAAa,GACVtD,EAAIqC,IAAAA,OAAYiB,EAAKnD,IAAL2B,KAAegE,cAA/BjB,OAEI3B,EAAAoB,KAAApE,KAAAe,OAAA,SAAA8D,EAAAP,GACAxE,EAAA6B,IAAIkE,OAAOhB,EAAXjD,KAAAgE,cAAAjB,OAEIkB,KAAAA,MAAAA,IAAAA,UAAU1F,GACbH,KAAAoC,iBACDpC,KAAAkC,eAIIJ,YAAA,WACA,IAAAhC,EAAAE,KACAgD,EAAAoB,KAAApE,KAAAqD,OAAMnE,SAAAA,GACFkE,EAAAtD,EAAAG,MAAKA,IAAAA,QAAU,OAAf,eAKXiC,YAlBD,WAmBIc,IAAAA,EAAAhD,KAAOC,MAAKoD,IAAQ,QAChBD,EAAAA,KACH+B,KACJnC,EAAAoB,KAAArE,EAAA,SAAA+F,EAAA5G,GA7RuBiG,EAAAjG,MAoPpB8D,EAAEoB,KAAK0B,EAAO,SAAAR,GA4CtBH,EAAAjG,GAAA2D,MACAxB,IAAaiE,EAAArB,IACLoB,KAAAC,EAAAD,KACIpG,MAAOqG,EAAKrF,IAAZhB,KAAsBqG,EAAfS,KACP5C,MAAAA,EAAU6C,GACVrC,KAAAA,EAAS6B,OAEb1F,EAAImG,QAAYC,EAAKC,GAArB,IAA2BC,GAAGC,MAG9BrD,EAAAoB,KAAApE,KAAImC,OAAAA,SAAAA,EAAYsB,GAChB0B,EAAIlG,EAAQ+D,MAAEsD,EAAUrH,OAAKsH,GAALC,IAAerE,EAAY4C,EAAA7F,KAAA,SAAA6E,EAAAC,GAAA,OAAAA,EAAAC,IAAAF,EAAAE,SAKnCwC,aAAAA,WACH,IAAAtE,EAAAnC,KAAAC,MAAAgD,IAAA,SACJ,GAAAd,GAJDA,EAIOS,QAAAT,EAAAS,OAAAW,OAAA,EAAA,CAEN,IAAAsC,KACDzC,EAAAA,KAAAA,EAAAA,OAAYqD,SAAAA,GACfZ,EAVDhD,KAAA1C,EAUO6F,MAKP,IAAA,IAFC9G,EAAAiD,EAAAS,OAAA,GAAA1D,IACDG,EAAK+F,EAAQxC,OAAbW,OAAA,EACAE,EAAKiD,EAAAA,EAAAA,KAAAA,OAAkBnD,OAAvBE,IAAA,CACH,IAjBDL,EAiBOpD,KAAAqD,OAAAI,GACHsB,EAAA/E,KAAK0G,OAAAA,GACR,GAAA3B,EAAA7F,KAAAA,IAAA,KAAAG,GAAA,GAAAsH,QAAA5B,EAAA1F,UAAA,CACHW,KAAUC,MAAAqC,IAAA,UAAAmB,GACRL,EAAKsD,MAAAA,GACR,aAIL1D,EAAAoB,KAAApE,KAAAqD,OAAA,SAAAD,GACAsD,EAAAA,MAAmB,SAMlBrF,YA5U2B,SAAA+E,GAkSxB,IA4CJ,IAAAnH,EAAAe,KAAAC,MAAAgD,IAAA,QACQE,EAAAnD,KAAAC,MAAS0C,IAAQ,WACrBA,EAAO3C,KAAW2D,OAAlBR,GACIA,EAAAA,KAAUE,OAAAF,GACVQ,EAASuC,KAAKvC,MAAOR,EAAAA,cAAzByD,aAAAC,QAAA,SAAA,GACIlD,EAAOzE,EAAO8G,GACdO,EAA2B,WAAvBjG,EAAYoD,qBAAL,MAAX,OACAvB,GAAY7B,GAAKwG,EAAAA,IAAjBP,GACI5D,GAAAA,GAAAA,EAAAA,UAAA1D,EAAkBsH,GAAlBpE,GAAA,CACH,GAAAwB,EAAAzE,KAAAqH,EAAA,CACJ,IAAAE,EAAArD,EAAAjD,QACUb,GAAeP,EAAU4E,UAChC,GAAO8C,EAAPE,QAAAI,IACWzH,EAAeR,KAAAA,GAG7B2H,EAAAM,EAEJ3D,EAAAjD,MAAAsG,QAzCezG,KAAKC,MAAMqC,IAAI,SAAWM,QAAST,KACnCnC,KA2CLC,MAAAmF,QAAA,gBAzCCpF,KAAKoF,QAAQ,UACbpF,KAAK0G,kBAAkB,gBAEvB1G,KAAK0G,kBAAkB,UAE7B,MAAO1F,GACLhB,KAAK0G,kBAAkB,UAE3BN,EAAGnF,kBAIPyF,kBAAmB,SAASM,GACxB,IAAIlH,EAAOE,KACXA,KAAK2B,IAAII,YAAY,eAAetB,SAApC,eAA4DuG,GAC5DC,WAAW,WACPnH,EAAK6B,IAAII,YAAT,eAAoCiF,IACrChH,KAAKC,MAAMgD,IAAI,iBAItBO,OAAQ,SAASb,GACbA,EAAA,OAAkB,EAClB,IAAIQ,EAAUnD,KAAKC,MAAMgD,IAAI,WACzBU,EAAS3D,KAAK2D,OAAOR,GACzB,GAAkB,QAAdQ,EAAOzE,MAAkByE,EAAOtE,SAAU,CAC1C,IAAIiB,EAAON,KAAK0D,QAAW1D,KAAKqD,OAAOF,GAAShD,QAArC,SACPG,GAAQA,EAAKwG,gBACbnE,EAAA,OAAkB,GAS1B,OANIgB,EAAOrE,OAASV,EAAMG,QAAU4E,EAAOrE,OAASV,EAAME,UACtD6D,EAAA,OAAkB,EACdgB,EAAOrE,OAASV,EAAME,SAA2C,SAAhCkB,KAAKE,eAAeC,UACrDwC,EAAA,SAAoB,IAGrBA,gBAKX9B,KAAMA","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Select from \"mvc/ui/ui-select-default\";\n/** Batch mode variations */\nvar Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.LINKED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.LINKED\n        }\n    ],\n    data_multiple: [\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collections\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }\n    ],\n    data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data_multiple: [\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    module_data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }\n    ],\n    module_data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder\",\n            tooltip: \"Multiple collections\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }\n    ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                pagelimit: 100,\n                statustimer: 1000\n            }).set(options);\n        this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n        this.button_product = new Ui.RadioButton.View({\n            value: \"false\",\n            data: [\n                {\n                    icon: \"fa fa-chain\",\n                    value: \"false\",\n                    tooltip:\n                        \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                },\n                {\n                    icon: \"fa fa-chain-broken\",\n                    value: \"true\",\n                    tooltip: \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                }\n            ]\n        });\n        var $batch_div = $(\"<div/>\")\n            .addClass(\"ui-form-info\")\n            .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n            .append(\n                $(\"<span/>\").html(\n                    \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                )\n            );\n        this.$batch = {\n            linked: $batch_div.clone(),\n            enabled: $batch_div\n                .clone()\n                .append(\n                    $(\"<div/>\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-form-title\")\n                                .html(\"Batch options:\")\n                        )\n                        .append(this.button_product.$el)\n                )\n                .append($(\"<div/>\").css(\"clear\", \"both\"))\n        };\n\n        // add drag-drop event handlers\n        this.$el\n            .on(\"dragenter\", function(e) {\n                this.lastenter = e.target;\n                self.$el.addClass(\"ui-dragover\");\n            })\n            .on(\"dragover\", e => {\n                e.preventDefault();\n            })\n            .on(\"dragleave\", function(e) {\n                this.lastenter === e.target && self.$el.removeClass(\"ui-dragover\");\n            })\n            .on(\"drop\", e => {\n                self._handleDrop(e);\n            });\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:current\", this._changeCurrent, this);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(\n            this.model,\n            \"change:type change:optional change:multiple change:extensions\",\n            this._changeType,\n            this\n        );\n        this.render();\n\n        // add change event\n        this.on(\"change\", () => {\n            options.onchange && options.onchange(self.value());\n        });\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Update data representing selectable options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    /** Return the currently selected dataset values */\n    value: function(new_value) {\n        new_value !== undefined && this.model.set(\"value\", new_value);\n        var current = this.model.get(\"current\");\n        if (this.config[current]) {\n            var id_list = this.fields[current].value();\n            if (id_list !== null) {\n                id_list = $.isArray(id_list) ? id_list : [id_list];\n                if (id_list.length > 0) {\n                    var result = this._batch({ values: [] });\n                    for (var i in id_list) {\n                        var details = this.history[`${id_list[i]}_${this.config[current].src}`];\n                        if (details) {\n                            result.values.push(details);\n                        } else {\n                            Galaxy.emit.debug(\n                                \"ui-select-content::value()\",\n                                `Requested details not found for '${id_list[i]}'.`\n                            );\n                            return null;\n                        }\n                    }\n                    result.values.sort((a, b) => a.hid - b.hid);\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug(\"ui-select-content::value()\", `Invalid value/source '${new_value}'.`);\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each(this.fields, (field, i) => {\n            if (self.model.get(\"current\") == i) {\n                field.$el.show();\n                _.each(self.$batch, ($batchfield, batchmode) => {\n                    $batchfield[self.config[i].batch == batchmode ? \"show\" : \"hide\"]();\n                });\n                self.button_type.value(i);\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id =\n            (this.model.get(\"flavor\") ? `${this.model.get(\"flavor\")}_` : \"\") +\n            String(this.model.get(\"type\")) +\n            (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n        if (Configurations[config_id]) {\n            this.config = Configurations[config_id];\n        } else {\n            this.config = Configurations[\"data\"];\n            Galaxy.emit.debug(\"ui-select-content::_changeType()\", `Invalid configuration/type id '${config_id}'.`);\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get(\"data\");\n        var extensions = Utils.textify(this.model.get(\"extensions\"));\n        var src_labels = this.model.get(\"src_labels\");\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each(this.config, (c, i) => {\n            self.button_data.push({\n                value: i,\n                icon: c.icon,\n                tooltip: c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional: self.model.get(\"optional\"),\n                    multiple: c.multiple,\n                    searchable:\n                        !c.multiple || (data && data[c.src] && data[c.src].length > self.model.get(\"pagelimit\")),\n                    individual: true,\n                    error_text: `No ${extensions ? `${extensions} ` : \"\"}${src_labels[c.src] || \"content\"} available.`,\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value: this.model.get(\"current\"),\n            data: this.button_data,\n            onchange: function(value) {\n                self.model.set(\"current\", value);\n                self.trigger(\"change\");\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if (this.fields.length > 1) {\n            this.$el.append(this.button_type.$el);\n            button_width = `${Math.max(0, this.fields.length * 36)}px`;\n        }\n        _.each(this.fields, field => {\n            self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n        });\n        _.each(this.$batch, ($batchfield, batchmode) => {\n            self.$el.append($batchfield.css({ \"margin-left\": button_width }));\n        });\n        this.model.set(\"current\", 0);\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each(this.fields, field => {\n            field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n        });\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get(\"data\");\n        var self = this;\n        var select_options = {};\n        _.each(options, (items, src) => {\n            select_options[src] = [];\n            _.each(items, item => {\n                select_options[src].push({\n                    hid: item.hid,\n                    keep: item.keep,\n                    label: `${item.hid}: ${item.name}`,\n                    value: item.id,\n                    tags: item.tags\n                });\n                self.history[`${item.id}_${src}`] = item;\n            });\n        });\n        _.each(this.config, (c, i) => {\n            select_options[c.src] && self.fields[i].add(select_options[c.src], (a, b) => b.hid - a.hid);\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function() {\n        var new_value = this.model.get(\"value\");\n        if (new_value && new_value.values && new_value.values.length > 0) {\n            // create list with content ids\n            var list = [];\n            _.each(new_value.values, value => {\n                list.push(value.id);\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[0].src;\n            var multiple = new_value.values.length > 1;\n            for (var i = 0; i < this.config.length; i++) {\n                var field = this.fields[i];\n                var c = this.config[i];\n                if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n                    this.model.set(\"current\", i);\n                    field.value(list);\n                    break;\n                }\n            }\n        } else {\n            _.each(this.fields, field => {\n                field.value(null);\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function(ev) {\n        try {\n            var data = this.model.get(\"data\");\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            var field = this.fields[current];\n            var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData(\"text\"))[0];\n            var new_id = drop_data.id;\n            var new_src = drop_data.history_content_type == \"dataset\" ? \"hda\" : \"hdca\";\n            var new_value = { id: new_id, src: new_src };\n            if (data && _.findWhere(data[new_src], new_value)) {\n                if (config.src == new_src) {\n                    var current_value = field.value();\n                    if (current_value && config.multiple) {\n                        if (current_value.indexOf(new_id) == -1) {\n                            current_value.push(new_id);\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value(current_value);\n                } else {\n                    this.model.set(\"value\", { values: [new_value] });\n                    this.model.trigger(\"change:value\");\n                }\n                this.trigger(\"change\");\n                this._handleDropStatus(\"success\");\n            } else {\n                this._handleDropStatus(\"danger\");\n            }\n        } catch (e) {\n            this._handleDropStatus(\"danger\");\n        }\n        ev.preventDefault();\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function(status) {\n        var self = this;\n        this.$el.removeClass(\"ui-dragover\").addClass(`ui-dragover-${status}`);\n        setTimeout(() => {\n            self.$el.removeClass(`ui-dragover-${status}`);\n        }, this.model.get(\"statustimer\"));\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function(result) {\n        result[\"batch\"] = false;\n        var current = this.model.get(\"current\");\n        var config = this.config[current];\n        if (config.src == \"hdca\" && !config.multiple) {\n            var hdca = this.history[`${this.fields[current].value()}_hdca`];\n            if (hdca && hdca.map_over_type) {\n                result[\"batch\"] = true;\n            }\n        }\n        if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n            result[\"batch\"] = true;\n            if (config.batch == Batch.ENABLED && this.button_product.value() === \"true\") {\n                result[\"product\"] = true;\n            }\n        }\n        return result;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}