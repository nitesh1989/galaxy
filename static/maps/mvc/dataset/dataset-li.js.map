{"version":3,"sources":["mvc/dataset/dataset-li.js"],"names":["_super","_listItem2","default","ListItemView","DatasetListItemView","extend","_logNamespace","className","prototype","id","this","model","get","join","initialize","attributes","logger","log","call","logNamespace","linkTarget","_setUpListeners","self","listenTo","changedAttributes","state","expanded","hasDetails","fetch","silent","done","_","has","changed","keys","length","render","_fetchModelDetails","view","inReadyState","jQuery","when","remove","speed","callback","$el","fadeOut","Backbone","_swapNewRender","$newRender","addClass","_renderPrimaryActions","_renderDisplayButton","_states2","NOT_VIEWABLE","DISCARDED","displayBtnData","target","classes","title","_localization2","UPLOAD","NEW","disabled","urls","onclick","ev","Galaxy","frame","active","addDataset","preventDefault","_faIconButton2","faIcon","$","templates","noAccess","$details","_renderDetails","find","empty","_renderSecondaryActions","html","_renderSummary","prepend","_renderDetailMessages","toJSON","_setUpBehaviors","json","summaryRenderFn","summaries","unknown","$warnings","each","detailMessages","templateFn","isDeletedOrPurged","_renderDisplayApplications","debug","FAILED_METADATA","ERROR","_renderDownloadButton","_renderShowParamsButton","href","show_params","add","url","hasData","isEmpty","download","_renderMetaFileDownloadButton","_renderNametags","tpl","map","meta_file","meta_download","file_type","modelString","deleted","template","failed_metadata","tags","wrapTemplate","events","clone","click .display-btn","trigger","click .params-btn","click .download-btn","noAccessTemplate","summaryTemplates","warnings","detailMessageTemplates","resubmitted","_baseMvc2","displayApplicationsTemplate","error","details","displayApplications","purged","detailsTemplate","OK","QUEUED","RUNNING","SETTING_METADATA","PAUSED","EMPTY"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport STATES from \"mvc/dataset/states\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"dataset\";\n/*==============================================================================\nTODO:\n    straighten out state rendering and templates used\n    inaccessible/STATES.NOT_VIEWABLE is a special case\n    simplify button rendering\n\n==============================================================================*/\nvar _super = LIST_ITEM.ListItemView;\n/** @class Read only list view for either LDDAs, HDAs, or HDADCEs.\n *      Roughly, any DatasetInstance (and not a raw Dataset).\n */\nvar DatasetListItemView = _super.extend(\n    /** @lends DatasetListItemView.prototype */ {\n        _logNamespace: logNamespace,\n\n        className: `${_super.prototype.className} dataset`,\n        //TODO:?? doesn't exactly match an hda's type_id\n        id: function() {\n            return [\"dataset\", this.model.get(\"id\")].join(\"-\");\n        },\n\n        /** Set up: instance vars, options, and event handlers */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(`${this}.initialize:`, attributes);\n            _super.prototype.initialize.call(this, attributes);\n\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n        },\n\n        /** event listeners */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            var self = this;\n\n            // re-rendering on any model changes\n            return self.listenTo(self.model, {\n                change: function(model) {\n                    // if the model moved into the ready state and is expanded without details, fetch those details now\n                    if (\n                        self.model.changedAttributes().state &&\n                        self.model.inReadyState() &&\n                        self.expanded &&\n                        !self.model.hasDetails()\n                    ) {\n                        // normally, will render automatically (due to fetch -> change),\n                        // but! setting_metadata sometimes doesn't cause any other changes besides state\n                        // so, not rendering causes it to seem frozen in setting_metadata state\n                        self.model.fetch({ silent: true }).done(() => {\n                            self.render();\n                        });\n                    } else {\n                        if (_.has(model.changed, \"tags\") && _.keys(model.changed).length === 1) {\n                            // If only the tags have changed, rerender specifically\n                            // the titlebar region.  Otherwise default to the full\n                            // render.\n                            self.$(\".nametags\").html(self._renderNametags());\n                        } else {\n                            self.render();\n                        }\n                    }\n                }\n            });\n        },\n\n        // ......................................................................... expandable\n        /** In this override, only get details if in the ready state, get rerunnable if in other states.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n        _fetchModelDetails: function() {\n            var view = this;\n            if (view.model.inReadyState() && !view.model.hasDetails()) {\n                return view.model.fetch({ silent: true });\n            }\n            return jQuery.when();\n        },\n\n        // ......................................................................... removal\n        /** Remove this view's html from the DOM and remove all event listeners.\n     *  @param {Number or String} speed jq effect speed\n     *  @param {Function} callback      an optional function called when removal is done (scoped to this view)\n     */\n        remove: function(speed, callback) {\n            var view = this;\n            speed = speed || this.fxSpeed;\n            this.$el.fadeOut(speed, () => {\n                Backbone.View.prototype.remove.call(view);\n                if (callback) {\n                    callback.call(view);\n                }\n            });\n        },\n\n        // ......................................................................... rendering\n        /* TODO:\n        dataset states are the issue primarily making dataset rendering complex\n            each state should have it's own way of displaying/set of details\n            often with different actions that can be applied\n        throw in deleted/purged/visible and things get complicated easily\n        I've considered (a couple of times) - creating a view for each state\n            - but recreating the view during an update...seems wrong\n    */\n        /** In this override, add the dataset state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            if (this.model.has(\"state\")) {\n                this.$el.addClass(`state-${this.model.get(\"state\")}`);\n            }\n            return this.$el;\n        },\n\n        // ................................................................................ titlebar\n        /** In this override, add the dataset display button. */\n        _renderPrimaryActions: function() {\n            // render just the display for read-only\n            return [this._renderDisplayButton()];\n        },\n\n        /** Render icon-button to display dataset data */\n        _renderDisplayButton: function() {\n            // don't show display if not viewable or not accessible\n            var state = this.model.get(\"state\");\n            if (state === STATES.NOT_VIEWABLE || state === STATES.DISCARDED || !this.model.get(\"accessible\")) {\n                return null;\n            }\n\n            var displayBtnData = {\n                target: this.linkTarget,\n                classes: \"display-btn\"\n            };\n\n            // show a disabled display if the data's been purged\n            if (this.model.get(\"purged\")) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\"Cannot display datasets removed from disk\");\n\n                // disable if still uploading\n            } else if (state === STATES.UPLOAD) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\"This dataset must finish uploading before it can be viewed\");\n\n                // disable if still new\n            } else if (state === STATES.NEW) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\"This dataset is not yet viewable\");\n            } else {\n                displayBtnData.title = _l(\"View data\");\n\n                // default link for dataset\n                displayBtnData.href = this.model.urls.display;\n\n                // add frame manager option onclick event\n                var self = this;\n                displayBtnData.onclick = ev => {\n                    if (Galaxy.frame && Galaxy.frame.active) {\n                        // Add dataset to frames.\n                        Galaxy.frame.addDataset(self.model.get(\"id\"));\n                        ev.preventDefault();\n                    }\n                };\n            }\n            displayBtnData.faIcon = \"fa-eye\";\n            return faIconButton(displayBtnData);\n        },\n\n        // ......................................................................... rendering details\n        /** Render the enclosing div of the hda body and, if expanded, the html in the body\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderDetails: function() {\n            //TODO: generalize to be allow different details for each state\n\n            // no access - render nothing but a message\n            if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                return $(this.templates.noAccess(this.model.toJSON(), this));\n            }\n\n            var $details = _super.prototype._renderDetails.call(this);\n            $details\n                .find(\".actions .left\")\n                .empty()\n                .append(this._renderSecondaryActions());\n            $details\n                .find(\".summary\")\n                .html(this._renderSummary())\n                .prepend(this._renderDetailMessages());\n            $details.find(\".display-applications\").html(this._renderDisplayApplications());\n\n            this._setUpBehaviors($details);\n            return $details;\n        },\n\n        /** Defer to the appropo summary rendering fn based on state */\n        _renderSummary: function() {\n            var json = this.model.toJSON();\n            var summaryRenderFn = this.templates.summaries[json.state];\n            summaryRenderFn = summaryRenderFn || this.templates.summaries.unknown;\n            return summaryRenderFn(json, this);\n        },\n\n        /** Render messages to be displayed only when the details are shown */\n        _renderDetailMessages: function() {\n            var view = this;\n            var $warnings = $('<div class=\"detail-messages\"></div>');\n            var json = view.model.toJSON();\n            //TODO:! unordered (map)\n            _.each(view.templates.detailMessages, templateFn => {\n                $warnings.append($(templateFn(json, view)));\n            });\n            return $warnings;\n        },\n\n        /** Render the external display application links */\n        _renderDisplayApplications: function() {\n            if (this.model.isDeletedOrPurged()) {\n                return \"\";\n            }\n            // render both old and new display apps using the same template\n            return [\n                this.templates.displayApplications(this.model.get(\"display_apps\"), this),\n                this.templates.displayApplications(this.model.get(\"display_types\"), this)\n            ].join(\"\");\n        },\n\n        // ......................................................................... secondary/details actions\n        /** A series of links/buttons for less commonly used actions: re-run, info, etc. */\n        _renderSecondaryActions: function() {\n            this.debug(\"_renderSecondaryActions\");\n            switch (this.model.get(\"state\")) {\n                case STATES.NOT_VIEWABLE:\n                    return [];\n                case STATES.OK:\n                case STATES.FAILED_METADATA:\n                case STATES.ERROR:\n                    return [this._renderDownloadButton(), this._renderShowParamsButton()];\n            }\n            return [this._renderShowParamsButton()];\n        },\n\n        /** Render icon-button to show the input and output (stdout/err) for the job that created this.\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderShowParamsButton: function() {\n            // gen. safe to show in all cases\n            return faIconButton({\n                title: _l(\"View details\"),\n                classes: \"params-btn\",\n                href: this.model.urls.show_params,\n                target: this.linkTarget,\n                faIcon: \"fa-info-circle\",\n                onclick: function(ev) {\n                    if (Galaxy.frame && Galaxy.frame.active) {\n                        Galaxy.frame.add({\n                            title: \"Dataset details\",\n                            url: this.href\n                        });\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                    }\n                }\n            });\n        },\n\n        /** Render icon-button/popupmenu to download the data (and/or the associated meta files (bai, etc.)) for this.\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderDownloadButton: function() {\n            // don't show anything if the data's been purged\n            if (this.model.get(\"purged\") || !this.model.hasData()) {\n                return null;\n            }\n\n            // return either: a popupmenu with links to download assoc. meta files (if there are meta files)\n            //  or a single download icon-button (if there are no meta files)\n            if (!_.isEmpty(this.model.get(\"meta_files\"))) {\n                return this._renderMetaFileDownloadButton();\n            }\n\n            return $(\n                [\n                    '<a class=\"download-btn icon-btn\" ',\n                    'href=\"',\n                    this.model.urls.download,\n                    `\" title=\"${_l(\"Download\")}\" download>`,\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\"\n                ].join(\"\")\n            );\n        },\n\n        /** Render the download button which opens a dropdown with links to download assoc. meta files (indeces, etc.) */\n        _renderMetaFileDownloadButton: function() {\n            var urls = this.model.urls;\n            return $(\n                [\n                    '<div class=\"metafile-dropdown dropdown\">',\n                    '<a class=\"download-btn icon-btn\" href=\"javascript:void(0)\" data-toggle=\"dropdown\"',\n                    ` title=\"${_l(\"Download\")}\">`,\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">',\n                    `<li><a href=\"${urls.download}\" download>`,\n                    _l(\"Download dataset\"),\n                    \"</a></li>\",\n                    _.map(this.model.get(\"meta_files\"), meta_file =>\n                        [\n                            '<li><a href=\"',\n                            urls.meta_download + meta_file.file_type,\n                            '\">',\n                            _l(\"Download\"),\n                            \" \",\n                            meta_file.file_type,\n                            \"</a></li>\"\n                        ].join(\"\")\n                    ).join(\"\\n\"),\n                    \"</ul>\",\n                    \"</div>\"\n                ].join(\"\\n\")\n            );\n        },\n\n        _renderNametags: function() {\n            var tpl = _.template(\n                [\n                    \"<% _.each(_.sortBy(_.uniq(tags), function(x) { return x }), function(tag){ %>\",\n                    '<% if (tag.indexOf(\"name:\") == 0){ %>',\n                    '<span class=\"label label-info\"><%- tag.slice(5) %></span>',\n                    \"<% } %>\",\n                    \"<% }); %>\"\n                ].join(\"\")\n            );\n            return tpl({ tags: this.model.get(\"tags\") });\n        },\n\n        // ......................................................................... misc\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .display-btn\": function(ev) {\n                this.trigger(\"display\", this, ev);\n            },\n            \"click .params-btn\": function(ev) {\n                this.trigger(\"params\", this, ev);\n            },\n            \"click .download-btn\": function(ev) {\n                this.trigger(\"download\", this, ev);\n            }\n        }),\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DatasetListItemView(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemView.prototype.templates = (() => {\n    //TODO: move to require text! plugin\n\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: BASE_MVC.wrapTemplate([\n            // failed metadata is rendered as a warning on an otherwise ok dataset view\n            '<% if( model.state === \"failed_metadata\" ){ %>',\n            '<div class=\"warningmessagesmall\">',\n            _l(\"An error occurred setting the metadata for this dataset\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        error: BASE_MVC.wrapTemplate([\n            // error during index fetch - show error on dataset\n            \"<% if( model.error ){ %>\",\n            '<div class=\"errormessagesmall\">',\n            _l(\"There was an error getting the data for this dataset\"),\n            \": <%- model.error %>\",\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        purged: BASE_MVC.wrapTemplate([\n            \"<% if( model.purged ){ %>\",\n            '<div class=\"purged-msg warningmessagesmall\">',\n            _l(\"This dataset has been deleted and removed from disk\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        deleted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.deleted && !model.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This dataset has been deleted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n\n        //NOTE: hidden warning is only needed for HDAs\n    });\n\n    var detailsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            '<div class=\"summary\"></div>',\n\n            '<div class=\"actions clear\">',\n            '<div class=\"left\"></div>',\n            '<div class=\"right\"></div>',\n            \"</div>\",\n\n            // do not display tags, annotation, display apps, or peek when deleted\n            \"<% if( !dataset.deleted && !dataset.purged ){ %>\",\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"display-applications\"></div>',\n\n            \"<% if( dataset.peek ){ %>\",\n            '<pre class=\"dataset-peek\"><%= dataset.peek %></pre>',\n            \"<% } %>\",\n            \"<% } %>\",\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n\n    var noAccessTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            '<div class=\"summary\">',\n            _l(\"You do not have permission to view this dataset\"),\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n\n    //TODO: still toooooooooooooo complex - rework\n    var summaryTemplates = {};\n    summaryTemplates[STATES.OK] = summaryTemplates[STATES.FAILED_METADATA] = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( dataset.misc_blurb ){ %>\",\n            '<div class=\"blurb\">',\n            '<span class=\"value\"><%- dataset.misc_blurb %></span>',\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.file_ext ){ %>\",\n            '<div class=\"datatype\">',\n            '<label class=\"prompt\">',\n            _l(\"format\"),\n            \"</label>\",\n            '<span class=\"value\"><%- dataset.file_ext %></span>',\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.metadata_dbkey ){ %>\",\n            '<div class=\"dbkey\">',\n            '<label class=\"prompt\">',\n            _l(\"database\"),\n            \"</label>\",\n            '<span class=\"value\">',\n            \"<%- dataset.metadata_dbkey %>\",\n            \"</span>\",\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.misc_info ){ %>\",\n            '<div class=\"info\">',\n            '<span class=\"value\"><%- dataset.misc_info %></span>',\n            \"</div>\",\n            \"<% } %>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.NEW] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This is a new dataset and not all of its data are available yet\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.NOT_VIEWABLE] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"You do not have permission to view this dataset\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.DISCARDED] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"The job creating this dataset was cancelled before completion\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.QUEUED] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This job is waiting to run\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.RUNNING] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This job is currently running\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.UPLOAD] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This dataset is currently uploading\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.SETTING_METADATA] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"Metadata is being auto-detected\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.PAUSED] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l('This job is paused. Use the \"Resume Paused Jobs\" in the history menu to resume'), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.ERROR] = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( !dataset.purged ){ %>\",\n            \"<div><%- dataset.misc_blurb %></div>\",\n            \"<% } %>\",\n            '<span class=\"help-text\">',\n            _l(\"An error occurred with this dataset\"),\n            \":</span>\",\n            '<div class=\"job-error-text\"><%- dataset.misc_info %></div>'\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.EMPTY] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"No data\"), \": <i><%- dataset.misc_blurb %></i></div>\"],\n        \"dataset\"\n    );\n    summaryTemplates.unknown = BASE_MVC.wrapTemplate(\n        ['<div>Error: unknown dataset state: \"<%- dataset.state %>\"</div>'],\n        \"dataset\"\n    );\n\n    // messages to be displayed only within the details section ('below the fold')\n    var detailMessageTemplates = {\n        resubmitted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.resubmitted ){ %>\",\n            '<div class=\"resubmitted-msg infomessagesmall\">',\n            _l(\"The job creating this dataset has been resubmitted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n    };\n\n    // this is applied to both old and new style display apps\n    var displayApplicationsTemplate = BASE_MVC.wrapTemplate(\n        [\n            \"<% _.each( apps, function( app ){ %>\",\n            '<div class=\"display-application\">',\n            '<span class=\"display-application-location\"><%- app.label %></span> ',\n            '<span class=\"display-application-links\">',\n            \"<% _.each( app.links, function( link ){ %>\",\n            '<a target=\"<%- link.target %>\" href=\"<%- link.href %>\">',\n            \"<% print( _l( link.text ) ); %>\",\n            \"</a> \",\n            \"<% }); %>\",\n            \"</span>\",\n            \"</div>\",\n            \"<% }); %>\"\n        ],\n        \"apps\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        details: detailsTemplate,\n        noAccess: noAccessTemplate,\n        summaries: summaryTemplates,\n        detailMessages: detailMessageTemplates,\n        displayApplications: displayApplicationsTemplate\n    });\n})();\n\n// ============================================================================\nexport default {\n    DatasetListItemView: DatasetListItemView\n};\n"]}