{"version":3,"sources":["mvc/dataset/dataset-li-edit.js"],"names":["_super","_datasetLi2","default","DatasetListItemView","DatasetListItemEdit","extend","initialize","attributes","prototype","call","this","hasUser","purgeAllowed","tagsEditorShown","annotationEditorShown","actions","_renderPrimaryActions","model","get","_states2","NOT_VIEWABLE","_renderEditButton","_renderDeleteButton","self","DISCARDED","purged","deleted","editBtnData","title","href","Galaxy","root","id","faIcon","classes","onclick","ev","router","preventDefault","push","dataset_id","_localization2","UPLOAD","NEW","_faIconButton2","deletedAlready","isDeletedOrPurged","_","$el","find","trigger","_renderDetails","$details","disabled","contains","OK","FAILED_METADATA","state","_renderAnnotation","_setUpBehaviors","_renderToolHelpButton","jobID","creating_job","parseToolBuild","helpString","datasetID","data","name","help","append","$","parseHTML","parseToolID","user","url","length","toggle","ajax","done","fail","console","log","_renderSecondaryActions","ERROR","unshift","_renderErrButton","concat","_renderRerunButton","_renderVisualizationsButton","urls","rerun","linkTarget","job_id","visualizations","hasData","isEmpty","isObject","$visualizations","templates","attr","_addScratchBookFn","addBack","$links","frame","active","add","li","click","stopPropagation","view","tagsEditor","_tag2","TagsEditor","_renderTags","onshowFirstTime","render","onshow","$activator","onhide","$where","annotationEditor","_annotation2","AnnotationEditor","_makeDbkeyEditLink","editableDbkey","edit","replaceWith","events","clone","click .undelete-link","click .purge-link","click .edit-btn","click .delete-btn","click .rerun-btn","click .report-err-btn","click .visualization-btn","click .dbkey a","_clickUndeleteLink","undelete","_clickPurgeLink","confirm","purge","toString","warnings","failed_metadata","_baseMvc2","wrapTemplate","visualizationsTemplate"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li-edit.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport DATASET_LI from \"mvc/dataset/dataset-li\";\nimport TAGS from \"mvc/tag\";\nimport ANNOTATIONS from \"mvc/annotation\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar _super = DATASET_LI.DatasetListItemView;\n/** @class Editing view for DatasetAssociation.\n */\nvar DatasetListItemEdit = _super.extend(\n    /** @lends DatasetListItemEdit.prototype */ {\n        /** set up: options */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            this.hasUser = attributes.hasUser;\n\n            /** allow user purge of dataset files? */\n            this.purgeAllowed = attributes.purgeAllowed || false;\n\n            //TODO: move to HiddenUntilActivatedViewMixin\n            /** should the tags editor be shown or hidden initially? */\n            this.tagsEditorShown = attributes.tagsEditorShown || false;\n            /** should the tags editor be shown or hidden initially? */\n            this.annotationEditorShown = attributes.annotationEditorShown || false;\n        },\n\n        // ......................................................................... titlebar actions\n        /** In this override, add the other two primary actions: edit and delete */\n        _renderPrimaryActions: function() {\n            var actions = _super.prototype._renderPrimaryActions.call(this);\n            if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                return actions;\n            }\n            // render the display, edit attr and delete icon-buttons\n            return _super.prototype._renderPrimaryActions\n                .call(this)\n                .concat([this._renderEditButton(), this._renderDeleteButton()]);\n        },\n\n        //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n        /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n        _renderEditButton: function() {\n            var self = this;\n            // don't show edit while uploading, in-accessible\n            // DO show if in error (ala previous history panel)\n            if (this.model.get(\"state\") === STATES.DISCARDED || !this.model.get(\"accessible\")) {\n                return null;\n            }\n            var purged = this.model.get(\"purged\");\n            var deleted = this.model.get(\"deleted\");\n\n            var editBtnData = {\n                title: _l(\"Edit attributes\"),\n                href: `${Galaxy.root}datasets/edit?dataset_id=${this.model.attributes.id}`,\n                faIcon: \"fa-pencil\",\n                classes: \"edit-btn\",\n                onclick: function(ev) {\n                    if (Galaxy.router) {\n                        ev.preventDefault();\n                        Galaxy.router.push(\"datasets/edit\", {\n                            dataset_id: self.model.attributes.id\n                        });\n                    }\n                }\n            };\n\n            // disable if purged or deleted and explain why in the tooltip\n            if (deleted || purged) {\n                editBtnData.disabled = true;\n                if (purged) {\n                    editBtnData.title = _l(\"Cannot edit attributes of datasets removed from disk\");\n                } else if (deleted) {\n                    editBtnData.title = _l(\"Undelete dataset to edit attributes\");\n                }\n\n                // disable if still uploading or new\n            } else if (_.contains([STATES.UPLOAD, STATES.NEW], this.model.get(\"state\"))) {\n                editBtnData.disabled = true;\n                editBtnData.title = _l(\"This dataset is not yet editable\");\n            }\n            return faIconButton(editBtnData);\n        },\n\n        /** Render icon-button to delete this hda. */\n        _renderDeleteButton: function() {\n            // don't show delete if...\n            if (!this.model.get(\"accessible\")) {\n                return null;\n            }\n\n            var self = this;\n            var deletedAlready = this.model.isDeletedOrPurged();\n            return faIconButton({\n                title: !deletedAlready ? _l(\"Delete\") : _l(\"Dataset is already deleted\"),\n                disabled: deletedAlready,\n                faIcon: \"fa-times\",\n                classes: \"delete-btn\",\n                onclick: function() {\n                    // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                    self.$el.find(\".icon-btn.delete-btn\").trigger(\"mouseout\");\n                    self.model[\"delete\"]();\n                }\n            });\n        },\n\n        // ......................................................................... details\n        /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n        _renderDetails: function() {\n            //TODO: generalize to be allow different details for each state\n            var $details = _super.prototype._renderDetails.call(this);\n\n            var state = this.model.get(\"state\");\n\n            if (!this.model.isDeletedOrPurged() && _.contains([STATES.OK, STATES.FAILED_METADATA], state)) {\n                this._renderTags($details);\n                this._renderAnnotation($details);\n                this._makeDbkeyEditLink($details);\n            }\n\n            this._setUpBehaviors($details);\n            return $details;\n        },\n\n        /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n        _renderToolHelpButton: function() {\n            var datasetID = this.model.attributes.dataset_id;\n            var jobID = this.model.attributes.creating_job;\n            var self = this;\n\n            var parseToolBuild = data => {\n                var helpString = `<div id=\"thdiv-${datasetID}\" class=\"toolhelp\">`;\n                if (data.name && data.help) {\n                    helpString += `<strong>Tool help for ${data.name}</strong><hr/>`;\n                    helpString += data.help;\n                } else {\n                    helpString += \"<strong>Tool help is unavailable for this dataset.</strong><hr/>\";\n                }\n                helpString += \"</div>\";\n                self.$el.find(\".details\").append($.parseHTML(helpString));\n            };\n            var parseToolID = data => {\n                $.ajax({\n                    url: `${Galaxy.root}api/tools/${data.tool_id}/build`\n                })\n                    .done(data => {\n                        parseToolBuild(data);\n                    })\n                    .fail(() => {\n                        parseToolBuild({});\n                    });\n            };\n            if (Galaxy.user.id === null) {\n                return null;\n            }\n            return faIconButton({\n                title: _l(\"Tool Help\"),\n                classes: \"icon-btn\",\n                href: \"#\",\n                faIcon: \"fa-question\",\n                onclick: function() {\n                    var divString = `thdiv-${datasetID}`;\n                    if (self.$el.find(\".toolhelp\").length > 0) {\n                        self.$el.find(\".toolhelp\").toggle();\n                    } else {\n                        $.ajax({\n                            url: `${Galaxy.root}api/jobs/${jobID}`\n                        })\n                            .done(data => {\n                                parseToolID(data);\n                            })\n                            .fail(() => {\n                                console.log(\n                                    `Failed at recovering job information from the  Galaxy API for job id \"${jobID}\".`\n                                );\n                            });\n                    }\n                }\n            });\n        },\n        //*************************************************************************\n\n        /** Add less commonly used actions in the details section based on state */\n        _renderSecondaryActions: function() {\n            var actions = _super.prototype._renderSecondaryActions.call(this);\n            switch (this.model.get(\"state\")) {\n                case STATES.UPLOAD:\n                case STATES.NOT_VIEWABLE:\n                    return actions;\n                case STATES.ERROR:\n                    // error button comes first\n                    actions.unshift(this._renderErrButton());\n                    return actions.concat([this._renderRerunButton(), this._renderToolHelpButton()]);\n                case STATES.OK:\n                case STATES.FAILED_METADATA:\n                    return actions.concat([\n                        this._renderRerunButton(),\n                        this._renderVisualizationsButton(),\n                        this._renderToolHelpButton()\n                    ]);\n            }\n            return actions.concat([this._renderRerunButton(), this._renderToolHelpButton()]);\n        },\n\n        /** Render icon-button to report an error on this dataset to the galaxy admin. */\n        _renderErrButton: function() {\n            var self = this;\n            return faIconButton({\n                title: _l(\"View or report this error\"),\n                href: `${Galaxy.root}datasets/error?dataset_id=${this.model.attributes.id}`,\n                classes: \"report-error-btn\",\n                faIcon: \"fa-bug\",\n                onclick: function(ev) {\n                    if (Galaxy.router) {\n                        ev.preventDefault();\n                        Galaxy.router.push(\"datasets/error\", {\n                            dataset_id: self.model.attributes.id\n                        });\n                    }\n                }\n            });\n        },\n\n        /** Render icon-button to re-run the job that created this dataset. */\n        _renderRerunButton: function() {\n            var creating_job = this.model.get(\"creating_job\");\n            if (this.model.get(\"rerunnable\")) {\n                return faIconButton({\n                    title: _l(\"Run this job again\"),\n                    href: this.model.urls.rerun,\n                    classes: \"rerun-btn\",\n                    target: this.linkTarget,\n                    faIcon: \"fa-refresh\",\n                    onclick: function(ev) {\n                        if (Galaxy.router) {\n                            ev.preventDefault();\n                            Galaxy.router.push(\"/\", {\n                                job_id: creating_job\n                            });\n                        }\n                    }\n                });\n            }\n        },\n\n        /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n        _renderVisualizationsButton: function() {\n            //TODO: someday - lazyload visualizations\n            var visualizations = this.model.get(\"visualizations\");\n            if (this.model.isDeletedOrPurged() || !this.hasUser || !this.model.hasData() || _.isEmpty(visualizations)) {\n                return null;\n            }\n            if (!_.isObject(visualizations[0])) {\n                this.warn(\"Visualizations have been switched off\");\n                return null;\n            }\n\n            var $visualizations = $(this.templates.visualizations(visualizations, this));\n            //HACK: need to re-write those directed at galaxy_main with linkTarget\n            $visualizations.find('[target=\"galaxy_main\"]').attr(\"target\", this.linkTarget);\n            // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n            this._addScratchBookFn($visualizations.find(\".visualization-link\").addBack(\".visualization-link\"));\n            return $visualizations;\n        },\n\n        /** add scratchbook functionality to visualization links */\n        _addScratchBookFn: function($links) {\n            var li = this;\n            $links.click(function(ev) {\n                if (Galaxy.frame && Galaxy.frame.active) {\n                    Galaxy.frame.add({\n                        title: \"Visualization\",\n                        url: $(this).attr(\"href\")\n                    });\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            });\n        },\n\n        //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n        /** Render the tags list/control */\n        _renderTags: function($where) {\n            if (!this.hasUser) {\n                return;\n            }\n            var view = this;\n            this.tagsEditor = new TAGS.TagsEditor({\n                model: this.model,\n                el: $where.find(\".tags-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                // persist state on the hda view (and not the editor) since these are currently re-created each time\n                onshow: function() {\n                    view.tagsEditorShown = true;\n                },\n                onhide: function() {\n                    view.tagsEditorShown = false;\n                },\n                $activator: faIconButton({\n                    title: _l(\"Edit dataset tags\"),\n                    classes: \"tag-btn\",\n                    faIcon: \"fa-tags\"\n                }).appendTo($where.find(\".actions .right\"))\n            });\n            if (this.tagsEditorShown) {\n                this.tagsEditor.toggle(true);\n            }\n        },\n\n        /** Render the annotation display/control */\n        _renderAnnotation: function($where) {\n            if (!this.hasUser) {\n                return;\n            }\n            var view = this;\n            this.annotationEditor = new ANNOTATIONS.AnnotationEditor({\n                model: this.model,\n                el: $where.find(\".annotation-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                // persist state on the hda view (and not the editor) since these are currently re-created each time\n                onshow: function() {\n                    view.annotationEditorShown = true;\n                },\n                onhide: function() {\n                    view.annotationEditorShown = false;\n                },\n                $activator: faIconButton({\n                    title: _l(\"Edit dataset annotation\"),\n                    classes: \"annotate-btn\",\n                    faIcon: \"fa-comment\"\n                }).appendTo($where.find(\".actions .right\"))\n            });\n            if (this.annotationEditorShown) {\n                this.annotationEditor.toggle(true);\n            }\n        },\n\n        /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n        _makeDbkeyEditLink: function($details) {\n            // make the dbkey a link to editing\n            if (this.model.get(\"metadata_dbkey\") === \"?\" && !this.model.isDeletedOrPurged()) {\n                var editableDbkey = $('<a class=\"value\">?</a>')\n                    .attr(\"href\", this.model.urls.edit)\n                    .attr(\"target\", \"_top\");\n                $details.find(\".dbkey .value\").replaceWith(editableDbkey);\n            }\n        },\n\n        // ......................................................................... events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .undelete-link\": \"_clickUndeleteLink\",\n            \"click .purge-link\": \"_clickPurgeLink\",\n\n            \"click .edit-btn\": function(ev) {\n                this.trigger(\"edit\", this, ev);\n            },\n            \"click .delete-btn\": function(ev) {\n                this.trigger(\"delete\", this, ev);\n            },\n            \"click .rerun-btn\": function(ev) {\n                this.trigger(\"rerun\", this, ev);\n            },\n            \"click .report-err-btn\": function(ev) {\n                this.trigger(\"report-err\", this, ev);\n            },\n            \"click .visualization-btn\": function(ev) {\n                this.trigger(\"visualize\", this, ev);\n            },\n            \"click .dbkey a\": function(ev) {\n                this.trigger(\"edit\", this, ev);\n            }\n        }),\n\n        /** listener for item undelete (in the messages section) */\n        _clickUndeleteLink: function(ev) {\n            this.model.undelete();\n            return false;\n        },\n\n        /** listener for item purge (in the messages section) */\n        _clickPurgeLink: function(ev) {\n            if (confirm(_l(\"This will permanently remove the data in your dataset. Are you sure?\"))) {\n                this.model.purge();\n            }\n            return false;\n        },\n\n        // ......................................................................... misc\n        /** string rep */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `HDAEditView(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemEdit.prototype.templates = (() => {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: BASE_MVC.wrapTemplate(\n            [\n                // in this override, provide a link to the edit page\n                '<% if( dataset.state === \"failed_metadata\" ){ %>',\n                '<div class=\"failed_metadata-warning warningmessagesmall\">',\n                _l(\"An error occurred setting the metadata for this dataset\"),\n                '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"_top\">',\n                _l(\"Set it manually or retry auto-detection\"),\n                \"</a>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        ),\n\n        deleted: BASE_MVC.wrapTemplate(\n            [\n                // in this override, provide links to undelete or purge the dataset\n                \"<% if( dataset.deleted && !dataset.purged ){ %>\",\n                // deleted not purged\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                _l(\"This dataset has been deleted\"),\n                '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">',\n                _l(\"Undelete it\"),\n                \"</a>\",\n                \"<% if( view.purgeAllowed ){ %>\",\n                '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">',\n                _l(\"Permanently remove it from disk\"),\n                \"</a>\",\n                \"<% } %>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        )\n    });\n\n    var visualizationsTemplate = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( visualizations.length === 1 ){ %>\",\n            '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"',\n            ' target=\"<%- visualizations[0].target %>\" title=\"',\n            _l(\"Visualize in\"),\n            ' <%- visualizations[0].html %>\">',\n            '<span class=\"fa fa-bar-chart-o\"></span>',\n            \"</a>\",\n\n            \"<% } else { %>\",\n            '<div class=\"visualizations-dropdown dropdown icon-btn\">',\n            '<a data-toggle=\"dropdown\" title=\"',\n            _l(\"Visualize\"),\n            '\">',\n            '<span class=\"fa fa-bar-chart-o\"></span>',\n            \"</a>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( visualizations, function( visualization ){ %>\",\n            '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"',\n            ' target=\"<%- visualization.target %>\">',\n            \"<%- visualization.html %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\"\n        ],\n        \"visualizations\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        visualizations: visualizationsTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    DatasetListItemEdit: DatasetListItemEdit\n};\n"]}