{"version":3,"sources":["mvc/dataset/data.js"],"names":["DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","hda_ldda","metadata","initialize","this","get","_set_metadata","_","each","attributes","k","indexOf","split","set","new_key","silent","attribute","urlRoot","Galaxy","root","TabularDataset","prototype","get_metadata","first_data_chunk","offset","at_eof","options","call","url_viz","get_next_chunk","self","next_chunk","$","Deferred","getJSON","chunk_url","rval","chunk","DatasetCollection","Collection","model","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","$el","height","scroll_elt","attempt_to_fetch","loading_indicator","show","when","then","result","expand_to_container","hide","render","attr","_renderChunk","cellpadding","append","data_table","column_names","appendTo","header_row","header_container","join","j","first_chunk","scroll","scrolled_to_bottom","_renderCell","cell_contents","index","colspan","$cell","text","column_types","undefined","addClass","length","cells","row","num_columns","_renderRow","line","slice","range","find","ck_data","TopLevelTabularDatasetChunkedView","parents","p","css","window","scrollTop","overflow","innerHeight","el","scrollHeight","col","start","end","dataset_id","genome_build","file_ext","parent","modal","frame","chrom","console","log","search","str","array","match","title","IconButtonView","icon_class","IconButton","setElement","btn_viz","mouseleave","mouseover tr","e","target","children","eq","html","n","isNaN","parseFloat","isFinite","is_numeric","top","left","gene_region","url","off","click","add","param","btn_viz_pars","createTabularDatasetChunkedView","view","dataset_config","parent_elt","embedded","EmbeddedTabularDatasetChunkedView"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["// Additional dependencies: jQuery, underscore.\nimport Modal from \"mvc/ui/ui-modal\";\nimport Frames from \"mvc/ui/ui-frames\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: \"\",\n        type: \"\",\n        name: \"\",\n        hda_ldda: \"hda\",\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get(\"metadata\")) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on(\"change\", this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(\n            _.keys(this.attributes),\n            function(k) {\n                if (k.indexOf(\"metadata_\") === 0) {\n                    // Found metadata.\n                    var new_key = k.split(\"metadata_\")[1];\n                    metadata.set(new_key, this.attributes[k]);\n                    delete this.attributes[k];\n                }\n            },\n            this\n        );\n\n        // Because this is an internal change, silence it.\n        this.set(\"metadata\", metadata, { silent: true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: `${Galaxy.root}api/datasets`\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk) {\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url = `${Galaxy.root}dataset/display?dataset_id=${this.id}`;\n        this.attributes.url_viz = `${Galaxy.root}visualization`;\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this;\n\n        var next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(chunk => {\n            var rval;\n            if (chunk.ck_data !== \"\") {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            } else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model: options.model,\n            $el: this.$el\n        });\n    },\n\n    expand_to_container: function() {\n        if (this.$el.height() < this.scroll_elt.height()) {\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function(func) {\n        var self = this;\n        if (!this.loading_chunk && this.scrolled_to_bottom()) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(result => {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $(\"<table/>\").attr({\n            id: \"content_table\",\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata(\"column_names\");\n        var header_container = $(\"<thead/>\").appendTo(data_table);\n        var header_row = $(\"<tr/>\").appendTo(header_container);\n        if (column_names) {\n            header_row.append(`<th>${column_names.join(\"</th><th>\")}</th>`);\n        } else {\n            for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                header_row.append(`<th>${j}</th>`);\n            }\n        }\n\n        // Render first chunk.\n        var self = this;\n\n        var first_chunk = this.model.get(\"first_data_chunk\");\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        } else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(result => {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(() => {\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $(\"<td>\").text(cell_contents);\n        var column_types = this.model.get_metadata(\"column_types\");\n        if (colspan !== undefined) {\n            $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (column_types[index] === \"str\" || column_types[index] === \"list\") {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass(\"stringalign\");\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split(\"\\t\");\n\n        var row = $(\"<tr>\");\n        var num_columns = this.model.get_metadata(\"columns\");\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass(\"dark_row\");\n        }\n\n        if (cells.length === num_columns) {\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n        } else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(\n                cells.slice(0, num_columns - 1),\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            row.append(this._renderCell(cells.slice(num_columns - 1).join(\"\\t\"), num_columns - 1));\n        } else if (cells.length === 1) {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        } else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            _.each(_.range(num_columns - cells.length), () => {\n                row.append($(\"<td>\"));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find(\"table\");\n        _.each(\n            chunk.ck_data.split(\"\\n\"),\n            function(line, index) {\n                if (line !== \"\") {\n                    data_table.append(this._renderRow(line));\n                }\n            },\n            this\n        );\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        var scroll_elt = _.find(this.$el.parents(), p => $(p).css(\"overflow\") === \"auto\");\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) {\n            scroll_elt = window;\n        }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0;\n    }\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: \"relative\",\n            overflow: \"scroll\",\n            height: options.height || \"500px\"\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n    }\n});\n\n/** Button for trackster visualization */\nvar TabularButtonTracksterView = Backbone.View.extend({\n    // gene region columns\n    col: {\n        chrom: null,\n        start: null,\n        end: null\n    },\n\n    // url for trackster\n    url_viz: null,\n\n    // dataset id\n    dataset_id: null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext: null,\n\n    // backbone initialize\n    initialize: function(options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model = options.model;\n        var metadata = model.get(\"metadata\");\n\n        // check for datatype\n        if (!model.get(\"file_ext\")) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get(\"file_ext\");\n\n        // check for bed-file format\n        if (this.file_ext == \"bed\") {\n            // verify that metadata exists\n            if (metadata.get(\"chromCol\") && metadata.get(\"startCol\") && metadata.get(\"endCol\")) {\n                // read in columns\n                this.col.chrom = metadata.get(\"chromCol\") - 1;\n                this.col.start = metadata.get(\"startCol\") - 1;\n                this.col.end = metadata.get(\"endCol\") - 1;\n            } else {\n                console.log(\"TabularButtonTrackster : Bed-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == \"vcf\") {\n            // search array\n            function search(str, array) {\n                for (var j = 0; j < array.length; j++) if (array[j].match(str)) return j;\n                return -1;\n            }\n\n            // load\n            this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n            this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n            this.col.end = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log(\"TabularButtonTrackster : VCF-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check\n        if (this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log(\"TabularButtonTrackster : Dataset identification is missing.\");\n            return;\n        }\n\n        // get url\n        if (model.get(\"url_viz\")) {\n            this.url_viz = model.get(\"url_viz\");\n        } else {\n            console.log(\"TabularButtonTrackster : Url for visualization controller is missing.\");\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get(\"genome_build\")) {\n            this.genome_build = model.get(\"genome_build\");\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model: new mod_icon_btn.IconButton({\n                title: \"Visualize\",\n                icon_class: \"chart_curve\",\n                id: \"btn_viz\"\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    /** Add event handlers */\n    events: {\n        \"mouseover tr\": \"show\",\n        mouseleave: \"hide\"\n    },\n\n    // show button\n    show: function(e) {\n        var self = this;\n\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        // check\n        if (this.col.chrom === null) return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row\n            .children()\n            .eq(this.col.chrom)\n            .html();\n        var start = row\n            .children()\n            .eq(this.col.start)\n            .html();\n\n        // end is optional\n        var end = this.col.end\n            ? row\n                  .children()\n                  .eq(this.col.end)\n                  .html()\n            : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id: this.dataset_id,\n                gene_region: `${chrom}:${start}-${end}`\n            };\n\n            // get button position\n            var offset = row.offset();\n            var left = offset.left - 10;\n            var top = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $(\"#btn_viz\").css({\n                position: \"fixed\",\n                top: `${top}px`,\n                left: `${left}px`\n            });\n            $(\"#btn_viz\").off(\"click\");\n            $(\"#btn_viz\").click(() => {\n                self.frame.add({\n                    title: \"Trackster\",\n                    url: `${self.url_viz}/trackster?${$.param(btn_viz_pars)}`\n                });\n            });\n\n            // show the button\n            $(\"#btn_viz\").show();\n        } else {\n            // hide the button\n            $(\"#btn_viz\").hide();\n        }\n    },\n\n    /** hide button */\n    hide: function() {\n        this.$(\"#btn_viz\").hide();\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = (model, view, model_config, parent_elt) => {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = options => {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = embedded\n        ? new EmbeddedTabularDatasetChunkedView(options)\n        : new TopLevelTabularDatasetChunkedView(options);\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nexport default {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n"]}