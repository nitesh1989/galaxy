{"version":3,"sources":["viz/sweepster.js"],"names":["_","d3","ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","self","this","get","each","input","on","set_tree_data","add_param","remove_param","config","input_config","name","set","param","get_tree_params","length","index","params_samples","map","samples","get_samples","node_id","id","children","param_samples","settings","setting","create_tree_data","param_label","where","in_ptree","sortBy","get_num_leaves","reduce","memo","fixed_settings","get_inputs_dict","cur_node","target_node","parent","depth","value","all_settings","get_settings","node","flatten","c","clone","isArray","get_connected_nodes","parents","cur_parent","push","get_subtree_nodes","a_node","get_leaf","find","child","find_child","toJSON","min","max","num_samples","SweepsterTrack","regions","track","data_url","Galaxy","root","_tracks2","default","object_from_template","track_config","same_settings","a_track","this_settings","other_settings","prop","to_dict","TrackCollection","Collection","model","SweepsterVisualization","_visualization2","Visualization","prototype","parameter_tree","tracks","_data2","Dataset","dataset","_tools2","Tool","GenomeRegionCollection","tool_with_samplable_inputs","remove_inputs","tree_config","add_track","add","title","type","dataset_id","tool_id","SweepsterTrackView","View","tagName","TILE_LEN","canvas_manager","render","draw_tiles","settings_td","$","settings_div","append","css","text","icon_menu","click","toggle","trigger","_iconButton2","create_icon_buttons_menu","icon_class","on_click","$el","remove","prepend","run_on_dataset_button","addClass","html","attr","when","data_is_ready","then","data_ok","region","resolution","w_scale","mode","data_manager","get_data","tile_data","canvas","new_canvas","width","height","get_canvas_height","draw_tile","getContext","tile_containers","empty","ToolInputValOrSweepView","number_input_template","select_input_template","tool_row","sweep_inputs_row","val","IntegerToolParameter","template","SelectToolParameter","options_text","single_input_row","option","join","menu","show","hide","change","parseFloat","className","ToolFormView","tool_form_view","not","i","ToolParameterTreeView","tree_params","cluster","layout","size","diagonal","svg","projection","d","y","x","nodes","param_depths","uniq","pluck","center_left","position","left","vis","select","link","selectAll","filter","enter","undefined","style","connected_node_ids","helpText","SweepsterVisualizationView","key","label","CanvasManager","default_value","handle_node_clicks","view","_config2","ConfigSettingCollection","from_models_and_saved_values","tr","first","ToolParameterTreeDesignView","help_div","appendTo","track_collection_container","tool_param_tree_view","tracks_div","close_button","window","location","tooltip_config","run_tool_on_dataset","placement","modes","mode_mapping","param_tree","track_view","hover","pm_track","get_base_color","base","tool_name","set_input_values","outputs","show_modal","Ok","run_jobs_deferred","settings_leaf","run_jobs","Deferred","track_obj","hide_modal","resolve","new_tracks","setTimeout","rerun","output","prefs","to_key_value_dict","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\nimport * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport util from \"viz/trackster/util\";\nimport visualization from \"viz/visualization\";\nimport tracks from \"viz/trackster/tracks\";\nimport tools from \"mvc/tool/tools\";\nimport data from \"mvc/dataset/data\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get(\"tool\")\n            .get(\"inputs\")\n            .each(input => {\n                // Listen for changes to input's attributes.\n                input.on(\n                    \"change:min change:max change:num_samples\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.set_tree_data();\n                        }\n                    },\n                    self\n                );\n                input.on(\n                    \"change:in_ptree\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.add_param(input);\n                        } else {\n                            self.remove_param(input);\n                        }\n                        self.set_tree_data();\n                    },\n                    self\n                );\n            });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, input_config => {\n                var input = self\n                    .get(\"tool\")\n                    .get(\"inputs\")\n                    .find(input => input.get(\"name\") === input_config.name);\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get(\"ptree_index\")) {\n            return;\n        }\n\n        param.set(\"in_ptree\", true);\n        param.set(\"ptree_index\", this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set(\"in_ptree\", false);\n        param.set(\"ptree_index\", null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each((input, index) => {\n            // +1 to use 1-based indexing.\n            input.set(\"ptree_index\", index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), param => ({\n            param: param,\n            samples: param.get_samples()\n        }));\n        var node_id = 0;\n\n        var // Creates tree data recursively.\n        create_tree_data = (params_samples, index) => {\n            var param_samples = params_samples[index],\n                param = param_samples.param,\n                param_label = param.get(\"label\"),\n                settings = param_samples.samples;\n\n            // Create leaves when last parameter setting is reached.\n            if (params_samples.length - 1 === index) {\n                return _.map(settings, setting => ({\n                    id: node_id++,\n                    name: setting,\n                    param: param,\n                    value: setting\n                }));\n            }\n\n            // Recurse to handle other parameters.\n            return _.map(settings, setting => ({\n                id: node_id++,\n                name: setting,\n                param: param,\n                value: setting,\n                children: create_tree_data(params_samples, index + 1)\n            }));\n        };\n\n        this.set(\"tree_data\", {\n            name: \"Root\",\n            id: node_id++,\n            children: params_samples.length !== 0 ? create_tree_data(params_samples, 0) : null\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(\n            this.get(\"tool\")\n                .get(\"inputs\")\n                .where({ in_ptree: true })\n        ).sortBy(input => input.get(\"ptree_index\"));\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce((memo, param) => memo * param.get_samples().length, 1);\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while (cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this;\n\n        var get_settings = (node, settings) => {\n            // Add setting for this node. Root node does not have a param,\n            // however.\n            if (node.param) {\n                settings[node.param.get(\"name\")] = node.value;\n            }\n\n            if (!node.children) {\n                // At leaf node, so return settings.\n                return new ToolInputsSettings({\n                    inputs: self.get(\"tool\").get(\"inputs\"),\n                    values: settings\n                });\n            } else {\n                // At interior node: return list of subtree settings.\n                return _.flatten(_.map(node.children, c => get_settings(c, _.clone(settings))));\n            }\n        };\n\n        var all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) {\n            all_settings = [all_settings];\n        }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = a_node => {\n            if (!a_node.children) {\n                return a_node;\n            } else {\n                // At interior node: return subtree nodes.\n                return _.flatten([a_node, _.map(a_node.children, c => get_subtree_nodes(c))]);\n            }\n        };\n\n        // Get node's parents.\n        var parents = [];\n\n        var cur_parent = node.parent;\n        while (cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get(\"tree_data\");\n\n        var find_child = children => _.find(children, child => settings[child.param.get(\"name\")] === child.value);\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(param => ({\n            name: param.get(\"name\"),\n            min: param.get(\"min\"),\n            max: param.get(\"max\"),\n            num_samples: param.get(\"num_samples\")\n        }));\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: \"Pack\",\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set(\"regions\", options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend(\n                {\n                    data_url: `${Galaxy.root}dummy1`,\n                    converted_datasets_state_url: `${Galaxy.root}dummy2`\n                },\n                options.track\n            );\n            this.set(\"track\", tracks.object_from_template(track_config, {}, null));\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get(\"settings\");\n        var other_settings = a_track.get(\"settings\");\n        for (var prop in this_settings) {\n            if (!other_settings[prop] || this_settings[prop] !== other_settings[prop]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get(\"track\").to_dict(),\n            settings: this.get(\"settings\"),\n            regions: this.get(\"regions\")\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: \"Pack\"\n    }),\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data.Dataset(options.dataset));\n        this.set(\"tool\", new tools.Tool(options.tool));\n        this.set(\"regions\", new visualization.GenomeRegionCollection(options.regions));\n        this.set(\"tracks\", new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get(\"tool\");\n        this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs([\"data\", \"hidden_data\", \"conditional\", \"text\"]);\n\n        this.set(\n            \"parameter_tree\",\n            new ToolParameterTree({\n                tool: tool_with_samplable_inputs,\n                config: options.tree_config\n            })\n        );\n    },\n\n    add_track: function(track) {\n        this.get(\"tracks\").add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get(\"id\"),\n            title: `Parameter exploration for dataset '${this.get(\"dataset\").get(\"name\")}'`,\n            type: \"sweepster\",\n            dataset_id: this.get(\"dataset\").id,\n            tool_id: this.get(\"tool\").id,\n            regions: this.get(\"regions\").toJSON(),\n            tree_config: this.get(\"parameter_tree\").toJSON(),\n            tracks: this.get(\"tracks\").toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: \"tr\",\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get(\"settings\");\n\n        var values = settings.get(\"values\");\n\n        var settings_td = $(\"<td/>\")\n            .addClass(\"settings\")\n            .appendTo(this.$el);\n\n        var settings_div = $(\"<div/>\")\n            .addClass(\"track-info\")\n            .hide()\n            .appendTo(settings_td);\n\n        settings_div.append(\n            $(\"<div/>\")\n                .css(\"font-weight\", \"bold\")\n                .text(\"Track Settings\")\n        );\n        settings.get(\"inputs\").each(input => {\n            settings_div.append(`${input.get(\"label\")}: ${values[input.get(\"name\")]}<br/>`);\n        });\n        var self = this;\n\n        var run_on_dataset_button = $(\"<button/>\")\n            .appendTo(settings_div)\n            .text(\"Run on complete dataset\")\n            .click(() => {\n                settings_div.toggle();\n                self.trigger(\"run_on_dataset\", settings);\n            });\n\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Settings\",\n                icon_class: \"gear track-settings\",\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: \"Remove\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    self.$el.remove();\n                    $(\".tooltip\").remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get(\"regions\").each(() => {\n            self.$el.append(\n                $(\"<td/>\")\n                    .addClass(\"tile\")\n                    .html($(\"<img/>\").attr(\"src\", `${Galaxy.root}images/loading_large_white_bg.gif`))\n            );\n        });\n\n        if (this.model.get(\"track\")) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this;\n        var track = this.model.get(\"track\");\n        var regions = this.model.get(\"regions\");\n        var tile_containers = this.$el.find(\"td.tile\");\n\n        // Do nothing if track is not defined.\n        if (!track) {\n            return;\n        }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(data_ok => {\n            // Draw tile for each region.\n            regions.each((region, index) => {\n                var resolution = region.length() / self.TILE_LEN;\n                var w_scale = 1 / resolution;\n                var mode = self.model.get(\"mode\");\n                $.when(track.data_manager.get_data(region, mode, resolution, {})).then(tile_data => {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(tile_data, mode, w_scale, canvas.width);\n                    track.draw_tile(tile_data, canvas.getContext(\"2d\"), mode, region, w_scale);\n                    $(tile_containers[index])\n                        .empty()\n                        .append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n    // Template for rendering sweep inputs:\n    number_input_template:\n        '<div class=\"form-row-input sweep\">' +\n        '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n        '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n        ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n        \"</div>\",\n\n    select_input_template: '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model;\n        var type = input.get(\"type\");\n        var single_input_row = this.$el.find(\".form-row-input\");\n        var sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(\":input\").change(function() {\n            input.set(\"value\", $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $(_.template(this.number_input_template)(this.model.toJSON()));\n        } else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find(\"select option\"), option => $(option).val());\n\n            var options_text = options.join(\", \");\n            sweep_inputs_row = $(\n                _.template(this.select_input_template)({\n                    options: options_text\n                })\n            );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    title: \"Add parameter to tree\",\n                    icon_class: \"plus-button\",\n                    on_click: function() {\n                        input.set(\"in_ptree\", true);\n                        single_input_row.hide();\n                        sweep_inputs_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.toggle\").show();\n                    }\n                },\n                {\n                    title: \"Remove parameter from tree\",\n                    icon_class: \"toggle\",\n                    on_click: function() {\n                        // Remove parameter from tree params where name matches clicked paramter.\n                        input.set(\"in_ptree\", false);\n                        sweep_inputs_row.hide();\n                        single_input_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.plus-button\").show();\n                    }\n                }\n            ],\n            {}\n        );\n\n        this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get(\"in_ptree\")) {\n            single_input_row.hide();\n            self.$el.find(\".icon-button.plus-button\").hide();\n        } else {\n            self.$el.find(\".icon-button.toggle\").hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each([\"min\", \"max\", \"num_samples\"], attr => {\n            sweep_inputs_row.find(`.${attr}`).change(function() {\n                input.set(attr, parseFloat($(this).val()));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: \"tree-design\",\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get(\"tool\")\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this;\n\n        var inputs = self.model.get(\"tool\").get(\"inputs\");\n        this.$el\n            .find(\".form-row\")\n            .not(\".form-actions\")\n            .each(function(i) {\n                var input_view = new ToolInputValOrSweepView({\n                    model: inputs.at(i),\n                    tool_row: $(this)\n                });\n            });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: \"tool-parameter-tree\",\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on(\"change:tree_data\", this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, (param, index) => {\n            var x = param_depths[index + 1];\n            var center_left = $(\"#center\").position().left;\n            self.$el.append(\n                $(\"<div>\")\n                    .addClass(\"label\")\n                    .text(param.get(\"label\"))\n                    .css(\"left\", x + center_left)\n            );\n        });\n\n        // Set up vis element.\n        var vis = d3\n            .select(this.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis\n            .selectAll(\"path.link\")\n            .data(cluster.links(nodes))\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis\n            .selectAll(\"g.node\")\n            .data(nodes)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", d => `translate(${d.y},${d.x})`)\n            .on(\"mouseover\", a_node => {\n                var connected_node_ids = _.pluck(self.model.get_connected_nodes(a_node), \"id\");\n                // TODO: probably can use enter() to do this more easily.\n                node.filter(d => _.find(connected_node_ids, id => id === d.id) !== undefined).style(\"fill\", \"#f00\");\n            })\n            .on(\"mouseout\", () => {\n                node.style(\"fill\", \"#000\");\n            });\n\n        node.append(\"circle\").attr(\"r\", 9);\n\n        node\n            .append(\"text\")\n            .attr(\"dx\", d => (d.children ? -12 : 12))\n            .attr(\"dy\", 3)\n            .attr(\"text-anchor\", d => (d.children ? \"end\" : \"start\"))\n            .text(d => d.name);\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: \"Sweepster\",\n\n    helpText:\n        \"<div><h4>Getting Started</h4>\" +\n        \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n        \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n        \"<li>Run the tool with different settings by clicking on tree nodes\" +\n        \"</ol></div>\",\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(this.$el.parents(\"body\"));\n        this.tool_param_tree_view = new ToolParameterTreeView({\n            model: this.model.get(\"parameter_tree\")\n        });\n        this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n        // Handle node clicks for tree data.\n        this.model.get(\"parameter_tree\").on(\"change:tree_data\", this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get(\"tracks\").each(track => {\n            track.get(\"track\").view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\"\n                }\n            ],\n            {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get(\"parameter_tree\")\n        });\n\n        $(\"#left\").append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this;\n\n        var regions = self.model.get(\"regions\");\n        var tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n        regions.each(region => {\n            tr.append($(\"<th>\").text(region.toString()));\n        });\n        tr\n            .children()\n            .first()\n            .attr(\"colspan\", 2);\n\n        var tracks_div = $(\"<div>\").addClass(\"tiles\");\n        $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n        self.model.get(\"tracks\").each(track => {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass(\"help\");\n\n        var close_button = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Close\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    $(\".tooltip\").remove();\n                    help_div.remove();\n                }\n            }\n        ]);\n\n        help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n        $(\"#center\").append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $(\"#center\").append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Set display mode\"\n                },\n                // Close viz.\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location = \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n        var modes = [\"Squish\", \"Pack\"];\n\n        var mode_mapping = {};\n        _.each(modes, mode => {\n            mode_mapping[mode] = () => {\n                self.model.set(\"default_mode\", mode);\n                self.model.get(\"tracks\").each(track => {\n                    track.set(\"mode\", mode);\n                });\n            };\n        });\n\n        make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(`${base.toLowerCase()}_color`) || this.config.get_value(\"n_color\");\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get(\"tool\");\n        var tool_name = tool.get(\"name\");\n        var dataset = this.model.get(\"dataset\");\n        tool.set_input_values(settings.get(\"values\"));\n        $.when(tool.rerun(dataset)).then(outputs => {\n            // TODO.\n        });\n\n        show_modal(\n            `Running ${tool_name} on complete dataset`,\n            `${tool_name} is running on dataset '${dataset.get(\"name\")}'. Outputs are in the dataset's history.`,\n            {\n                Ok: function() {\n                    hide_modal();\n                }\n            }\n        );\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this;\n        var param_tree = this.model.get(\"parameter_tree\");\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(\n            () => {\n                var settings_leaf = param_tree.get_leaf(pm_track.get(\"settings\").get(\"values\"));\n                var connected_node_ids = _.pluck(param_tree.get_connected_nodes(settings_leaf), \"id\");\n\n                // TODO: can do faster with enter?\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .filter(d => _.find(connected_node_ids, id => id === d.id) !== undefined)\n                    .style(\"fill\", \"#f00\");\n            },\n            () => {\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .style(\"fill\", \"#000\");\n            }\n        );\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this;\n\n        var param_tree = this.model.get(\"parameter_tree\");\n        var regions = this.model.get(\"regions\");\n\n        var node = d3.select(this.tool_param_tree_view.$el[0]).selectAll(\"g.node\");\n\n        node.on(\"click\", (d, i) => {\n            // Get all settings corresponding to node.\n            var tool = self.model.get(\"tool\");\n\n            var dataset = self.model.get(\"dataset\");\n            var all_settings = param_tree.get_node_settings(d);\n            var run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\n                    \"Whoa there cowboy!\",\n                    `You clicked on a node to try ${self.model\n                        .get(\"tool\")\n                        .get(\n                            \"name\"\n                        )} with ${all_settings.length} different combinations of settings. You can only run 10 jobs at a time.`,\n                    {\n                        Ok: function() {\n                            hide_modal();\n                            run_jobs_deferred.resolve(false);\n                        }\n                    }\n                );\n            } else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(run_jobs => {\n                if (!run_jobs) {\n                    return;\n                }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, settings => {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get(\"default_mode\")\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, (pm_track, index) => {\n                    setTimeout(() => {\n                        // Set inputs and run tool.\n                        tool.set_input_values(pm_track.get(\"settings\").get(\"values\"));\n                        $.when(tool.rerun(dataset, regions)).then(output => {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first();\n\n                            var track_config = dataset.get(\"track_config\");\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(track_config, self, null);\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set(\"track\", track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nexport default {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n"]}