{"version":3,"sources":["viz/bbi-data-manager.js"],"names":["bigwig","BBIDataManager","_visualization2","default","GenomeDataManager","extend","load_data","region","mode","resolution","extra_params","deferred","$","Deferred","this","set_data","url","Galaxy","root","get","id","self","data","when","makeBwg","then","bb","err","readWigData","result","prev","max","Number","MIN_VALUE","forEach","d","min","push","score","promise","entry","resolve"],"mappings":"yNACYA,6JAIRC,EAAiBC,EAAAC,QAAcC,kBAAkBC,QAMjDC,UAAW,SAASC,EAAQC,EAAMC,EAAYC,GAC1C,IAAIC,EAAWC,EAAEC,WACjBC,KAAKC,SAASR,EAAQI,GAEtB,IAAIK,EAASC,OAAOC,KAAhB,YAAgCJ,KAAKK,IAAI,WAAWC,GAApD,WAEAC,EAAOP,KACG,IAAIF,EAAEC,SAQZS,OAPRV,EAAEW,KAAKvB,EAAOwB,QAAQR,IAAMS,KAAK,SAACC,EAAIC,GAClCf,EAAEW,KAAKG,EAAGE,YAAYrB,EAAOY,IAAI,SAAUZ,EAAOY,IAAI,SAAUZ,EAAOY,IAAI,SAASM,KAAK,SAAAH,GAGrF,IAAIO,KAEAC,GAASC,IAAKC,OAAOC,WACzBX,EAAKY,QAAQ,SAAAC,GAGLL,EAAKC,MAAQI,EAAEC,IAAM,IAErBP,EAAOQ,MAAMP,EAAKC,IAAM,EAAG,IA7BnDF,EAAAQ,MAAAF,EAAAC,IAAA,EAAA,KAqCoBP,EAAOQ,MAAMF,EAAEC,IAAM,EAAGD,EAAEG,QAG1BT,EAAOQ,MAAMF,EAAEJ,IAAKI,EAAEG,QA9B9B3B,EAAWC,IAGXI,IAAAA,GAiCQM,KAAMO,EA/BdR,OAAJd,EACIgC,aAAgB1B,UAGZQ,EAAAN,SAAAR,EAAAiC,GACA7B,EAAA8B,QAAAD,OAIAlB,gBAKQO,eAAAA","file":"../../scripts/viz/bbi-data-manager.js","sourcesContent":["import visualization from \"viz/visualization\";\nimport * as bigwig from \"libs/bbi/bigwig\";\n/**\n     * Data manager for BBI datasets/files, including BigWig and BigBed.\n     */\nvar BBIDataManager = visualization.GenomeDataManager.extend({\n    /**\n         * Load data from server and manage data entries. Adds a Deferred to manager\n         * for region; when data becomes available, replaces Deferred with data.\n         * Returns the Deferred that resolves when data is available.\n         */\n    load_data: function(region, mode, resolution, extra_params) {\n        var deferred = $.Deferred();\n        this.set_data(region, deferred);\n\n        var url = `${Galaxy.root}datasets/${this.get(\"dataset\").id}/display`;\n\n        var self = this;\n        var promise = new $.Deferred();\n        $.when(bigwig.makeBwg(url)).then((bb, err) => {\n            $.when(bb.readWigData(region.get(\"chrom\"), region.get(\"start\"), region.get(\"end\"))).then(data => {\n                // Transform data into \"bigwig\" format for LinePainter. \"bigwig\" format is an array of 2-element arrays\n                // where each element is [position, score]; unlike real bigwig format, no gaps are allowed.\n                var result = [];\n\n                var prev = { max: Number.MIN_VALUE };\n                data.forEach(d => {\n                    // If there is a gap between prev and d, fill it with an interval with score 0.\n                    // This is necessary for LinePainter to draw correctly.\n                    if (prev.max !== d.min - 1) {\n                        // +1 to start after previous region.\n                        result.push([prev.max + 1, 0]);\n                        // -2 = -1 for converting from 1-based to 0-based coordinates,\n                        //      -1 for ending before current region.\n                        result.push([d.min - 2, 0]);\n                    }\n\n                    // Add data point for entry start. -1 to convert from wiggle\n                    // 1-based coordinates to 0-based browser coordinates.\n                    result.push([d.min - 1, d.score]);\n\n                    // Add data point for entry end:\n                    result.push([d.max, d.score]);\n\n                    prev = d;\n                });\n\n                var entry = {\n                    data: result,\n                    region: region,\n                    dataset_type: \"bigwig\"\n                };\n\n                self.set_data(region, entry);\n                deferred.resolve(entry);\n            });\n        });\n\n        return deferred;\n    }\n});\n\nexport default {\n    BBIDataManager: BBIDataManager\n};\n"]}