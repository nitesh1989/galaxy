{"version":3,"sources":["viz/visualization.js"],"names":["_","CustomToJSON","toJSON","self","this","json","each","constructor","to_json_keys","k","val","get","to_json_mappers","buttons","default_font","Cancel","undefined","dummy_canvas","new_canvas","Add","getContext","dummy_context","font","requests","window","$","width","url","data_type","hda_ldda","load_pattern","extend","CanvasManager","prototype","apply","path","patterns","image","Image","src","Galaxy","track_defs","arguments","onload","key","createPattern","canvas","manager","Cache","Backbone","defaults","num_elements","obj_cache","key_ary","initialize","options","get_elt","attributes","get_pattern","key_str","stale","index","move_key_to_end","set_elt","value","toString","length","shift","push","splice","clear","size","most_recently_added","GenomeDataManager","dataset","init_data","min_region_size","filters_manager","data_mode_compatible","entry","mode","initial_entries","add_data","entries","set","genome","region","can_subset","ready_deferred","Deferred","query_type","ss_deferred","_util2","default","ServerStateDeferred","ajax_settings","data","dataType","interval","success_fn","response","when","go","then","resolve","search_features","query","params","data_is_ready","getJSON","chrom","low","high","extra_params","filters","i","name","stringify","filter_names","result","set_data","load_data","resolution","is_subregion","filter_cols","entry_region","contains","is_deferred","subset_entry","last_request","trim","DEEP_DATA_REQ","BROAD_DATA_REQ","get_more_data","req_type","cur_data","start_val","query_low","max_high","query_region","data_manager","new_data_request","new_data_available","concat","max_low","message","replace","can_get_more_detailed_data","dataset_type","get_more_detailed_data","detail_multiplier","_mark_stale","num_samples","console","get_genome_wide_data","all_data_available","gw_data","chrom_info","chrom_data","start","end","deferred","genome_wide_data","subregion","subset_fns","bigwig","filter","data_point","refseq","seq_start","slice","subregion_data","same","GenomeReferenceDataManager","dataset_placeholder","Model","urlRoot","Genome","id","dbkey","get_chroms_info","get_chrom_region","find","chr_name","GenomeRegion","len","str_val","from_str","pieces","split","start_end","parseInt","on","copy","compute_overlap","a_region","first_chrom","second_chrom","first_start","second_start","first_end","second_end","overlap_results","DIF_CHROMS","BEFORE","OVERLAP_START","CONTAINS","AFTER","CONTAINED_BY","OVERLAP_END","overlap","chrom_len","get_chrom_len","overlaps","intersection","Collection","BrowserBookmark","GenomeRegionCollection","model","BrowserBookmarkCollection","BackboneTrack","_data2","Dataset","default_value","models","label","type","_config2","ConfigSettingCollection","from_models_and_saved_values","prefs","preloaded_data","p","color","d","BackboneTrackCollection","title","Visualization","ajax","save","vis_json","JSON","drawables","bookmarks","viewport","tracks","add_tracks","add","unset","obj_type","view","dummy","content_visible","Router","navigate","route","new_loc","TrackBrowserRouter","select_datasets","GenomeVisualization","history_grid","_gridView2","url_base","root","dict_format","tabs","_uiTabs2","View","$el","append","library_grid","modal","show","body","closing_events","hide","log","current","Array","map","arg"],"mappings":"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","file":"../../scripts/viz/visualization.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport data_mod from \"mvc/dataset/data\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\nimport GridView from \"mvc/grid/grid-view\";\nimport Tabs from \"mvc/ui/ui-tabs\";\nimport Ui from \"mvc/ui/ui-misc\";\n/**\n * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n * to include in the representation; to_json_mappers defines mappers for returned objects.\n */\nvar CustomToJSON = {\n    /**\n     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n     */\n    toJSON: function() {\n        var self = this;\n        var json = {};\n        _.each(self.constructor.to_json_keys, k => {\n            var val = self.get(k);\n            if (k in self.constructor.to_json_mappers) {\n                val = self.constructor.to_json_mappers[k](val, self);\n            }\n            json[k] = val;\n        });\n        return json;\n    }\n};\n\n/**\n * Model, view, and controller objects for Galaxy visualization framework.\n *\n * Models have no references to views, instead using events to indicate state\n * changes; this is advantageous because multiple views can use the same object\n * and models can be used without views.\n */\n\n/**\n * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n * track definitions are obtained from the server and the success_fn is called with the list of\n * definitions for selected datasets.\n */\nvar select_datasets = (filters, success_fn) => {\n    // history dataset selection tab\n    var history_grid = new GridView({\n        url_base: `${Galaxy.root}visualization/list_history_datasets`,\n        filters: filters,\n        dict_format: true,\n        embedded: true\n    });\n\n    // library dataset selection tab\n    var library_grid = new GridView({\n        url_base: `${Galaxy.root}visualization/list_library_datasets`,\n        dict_format: true,\n        embedded: true\n    });\n\n    // build tabs\n    var tabs = new Tabs.View();\n    tabs.add({\n        id: \"histories\",\n        title: \"Histories\",\n        $el: $(\"<div/>\").append(history_grid.$el)\n    });\n    tabs.add({\n        id: \"libraries\",\n        title: \"Libraries\",\n        $el: $(\"<div/>\").append(library_grid.$el)\n    });\n\n    // modal\n    Galaxy.modal.show({\n        title: \"Select datasets for new tracks\",\n        body: tabs.$el,\n        closing_events: true,\n        buttons: {\n            Cancel: function() {\n                Galaxy.modal.hide();\n            },\n            Add: function() {\n                var requests = [];\n                tabs.$(\"input.grid-row-select-checkbox[name=id]:checked\").each(function() {\n                    window.console.log($(this).val());\n                    requests[requests.length] = $.ajax({\n                        url: `${Galaxy.root}api/datasets/${$(this).val()}`,\n                        dataType: \"json\",\n                        data: {\n                            data_type: \"track_config\",\n                            hda_ldda: tabs.current() == \"histories\" ? \"hda\" : \"ldda\"\n                        }\n                    });\n                });\n                // To preserve order, wait until there are definitions for all tracks and then add\n                // them sequentially.\n                $.when.apply($, requests).then(function() {\n                    // jQuery always returns an Array for arguments, so need to look at first element\n                    // to determine whether multiple requests were made and consequently how to\n                    // map arguments to track definitions.\n                    var track_defs = arguments[0] instanceof Array ? $.map(arguments, arg => arg[0]) : [arguments[0]];\n                    success_fn(track_defs);\n                });\n                Galaxy.modal.hide();\n            }\n        }\n    });\n};\n\n// --------- Models ---------\n\n/**\n * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n */\nvar CanvasManager = function(default_font) {\n    this.default_font = default_font !== undefined ? default_font : \"9px Monaco, Lucida Console, monospace\";\n\n    this.dummy_canvas = this.new_canvas();\n    this.dummy_context = this.dummy_canvas.getContext(\"2d\");\n    this.dummy_context.font = this.default_font;\n\n    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\n    this.patterns = {};\n\n    // FIXME: move somewhere to make this more general\n    this.load_pattern(\"right_strand\", \"/visualization/strand_right.png\");\n    this.load_pattern(\"left_strand\", \"/visualization/strand_left.png\");\n    this.load_pattern(\"right_strand_inv\", \"/visualization/strand_right_inv.png\");\n    this.load_pattern(\"left_strand_inv\", \"/visualization/strand_left_inv.png\");\n};\n\n_.extend(CanvasManager.prototype, {\n    load_pattern: function(key, path) {\n        var patterns = this.patterns;\n        var dummy_context = this.dummy_context;\n        var image = new Image();\n        image.src = `${Galaxy.root}static/images${path}`;\n        image.onload = () => {\n            patterns[key] = dummy_context.createPattern(image, \"repeat\");\n        };\n    },\n    get_pattern: function(key) {\n        return this.patterns[key];\n    },\n    new_canvas: function() {\n        var canvas = $(\"<canvas/>\")[0];\n        // Keep a reference back to the manager\n        canvas.manager = this;\n        return canvas;\n    }\n});\n\n/**\n * Generic cache that handles key/value pairs. Keys can be any object that can be\n * converted to a String and compared.\n */\nvar Cache = Backbone.Model.extend({\n    defaults: {\n        num_elements: 20,\n        // Objects in cache; indexes into cache are strings of keys.\n        obj_cache: null,\n        // key_ary contains keys for objects in cache.\n        key_ary: null\n    },\n\n    initialize: function(options) {\n        this.clear();\n    },\n\n    /**\n     * Get an element from the cache using its key.\n     */\n    get_elt: function(key) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n\n        var index = _.indexOf(key_ary, k => k.toString() === key_str);\n\n        // Update cache.\n        if (index !== -1) {\n            // Object is in cache, so update it.\n            if (obj_cache[key_str].stale) {\n                // Object is stale: remove key and object.\n                key_ary.splice(index, 1);\n                delete obj_cache[key_str];\n            } else {\n                // Move key to back because it is most recently used.\n                this.move_key_to_end(key, index);\n            }\n        }\n\n        return obj_cache[key_str];\n    },\n\n    /**\n     * Put an element into the cache.\n     */\n    set_elt: function(key, value) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n        var num_elements = this.attributes.num_elements;\n\n        // Update keys, objects.\n        if (!obj_cache[key_str]) {\n            // Add object to cache.\n\n            if (key_ary.length >= num_elements) {\n                // Cache full, so remove first element.\n                var deleted_key = key_ary.shift();\n                delete obj_cache[deleted_key.toString()];\n            }\n\n            // Add key.\n            key_ary.push(key);\n        }\n\n        // Add object.\n        obj_cache[key_str] = value;\n        return value;\n    },\n\n    /**\n     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n     * delays the key's removal.\n     */\n    move_key_to_end: function(key, index) {\n        this.attributes.key_ary.splice(index, 1);\n        this.attributes.key_ary.push(key);\n    },\n\n    /**\n     * Clear all elements from the cache.\n     */\n    clear: function() {\n        this.attributes.obj_cache = {};\n        this.attributes.key_ary = [];\n    },\n\n    /** Returns the number of elements in the cache. */\n    size: function() {\n        return this.attributes.key_ary.length;\n    },\n\n    /** Returns key most recently added to cache. */\n    most_recently_added: function() {\n        return this.size() === 0\n            ? null\n            : // Most recent key is at the end of key array.\n              this.attributes.key_ary[this.attributes.key_ary.length - 1];\n    }\n});\n\n/**\n * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n */\nvar GenomeDataManager = Cache.extend({\n    defaults: _.extend({}, Cache.prototype.defaults, {\n        dataset: null,\n        genome: null,\n        init_data: null,\n        min_region_size: 200,\n        filters_manager: null,\n        data_type: \"data\",\n        data_mode_compatible: function(entry, mode) {\n            return true;\n        },\n        can_subset: function(entry) {\n            return false;\n        }\n    }),\n\n    /**\n     * Initialization.\n     */\n    initialize: function(options) {\n        Cache.prototype.initialize.call(this);\n\n        // Set initial entries in data manager.\n        var initial_entries = this.get(\"init_data\");\n        if (initial_entries) {\n            this.add_data(initial_entries);\n        }\n    },\n\n    /**\n     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n     * If necessary, manager size is increased to hold all data.\n     */\n    add_data: function(entries) {\n        // Increase size to accomodate all entries.\n        if (this.get(\"num_elements\") < entries.length) {\n            this.set(\"num_elements\", entries.length);\n        }\n\n        // Put data into manager.\n        var self = this;\n        _.each(entries, entry => {\n            self.set_data(entry.region, entry);\n        });\n    },\n\n    /**\n     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n     * cannot be used).\n     */\n    data_is_ready: function() {\n        var dataset = this.get(\"dataset\");\n        var ready_deferred = $.Deferred();\n\n        var // If requesting raw data, query dataset state; if requesting (converted) data,\n        // need to query converted datasets state.\n        query_type =\n            this.get(\"data_type\") === \"raw_data\"\n                ? \"state\"\n                : this.get(\"data_type\") === \"data\" ? \"converted_datasets_state\" : \"error\";\n\n        var ss_deferred = new util_mod.ServerStateDeferred({\n            ajax_settings: {\n                url: this.get(\"dataset\").url(),\n                data: {\n                    hda_ldda: dataset.get(\"hda_ldda\"),\n                    data_type: query_type\n                },\n                dataType: \"json\"\n            },\n            interval: 5000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        $.when(ss_deferred.go()).then(response => {\n            ready_deferred.resolve(response === \"ok\" || response === \"data\");\n        });\n        return ready_deferred;\n    },\n\n    /**\n     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n     */\n    search_features: function(query) {\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            query: query,\n            hda_ldda: dataset.get(\"hda_ldda\"),\n            data_type: \"features\"\n        };\n\n        return $.getJSON(dataset.url(), params);\n    },\n\n    /**\n     * Load data from server and manages data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        // Setup data request params.\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            data_type: this.get(\"data_type\"),\n            chrom: region.get(\"chrom\"),\n            low: region.get(\"start\"),\n            high: region.get(\"end\"),\n            mode: mode,\n            resolution: resolution,\n            hda_ldda: dataset.get(\"hda_ldda\")\n        };\n\n        $.extend(params, extra_params);\n\n        // Add track filters to params.\n        var filters_manager = this.get(\"filters_manager\");\n        if (filters_manager) {\n            var filter_names = [];\n            var filters = filters_manager.filters;\n            for (var i = 0; i < filters.length; i++) {\n                filter_names.push(filters[i].name);\n            }\n            params.filter_cols = JSON.stringify(filter_names);\n        }\n\n        // Do request.\n        var manager = this;\n\n        var entry = $.getJSON(dataset.url(), params, result => {\n            // Add region to the result.\n            result.region = region;\n            manager.set_data(region, result);\n        });\n\n        this.set_data(region, entry);\n        return entry;\n    },\n\n    /**\n     * Get data from dataset.\n     */\n    get_data: function(region, mode, resolution, extra_params) {\n        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n        var entry = this.get_elt(region);\n        if (entry && (util_mod.is_deferred(entry) || this.get(\"data_mode_compatible\")(entry, mode))) {\n            return entry;\n        }\n\n        //\n        // Look in cache for data that can be used.\n        // TODO: this logic could be improved if the visualization knew whether\n        // the data was \"index\" or \"data.\"\n        //\n        var key_ary = this.get(\"key_ary\");\n\n        var obj_cache = this.get(\"obj_cache\");\n        var entry_region;\n        var is_subregion;\n        for (var i = 0; i < key_ary.length; i++) {\n            entry_region = key_ary[i];\n\n            if (entry_region.contains(region)) {\n                is_subregion = true;\n\n                // This entry has data in the requested range. Return if data\n                // is compatible and can be subsetted.\n                entry = obj_cache[entry_region.toString()];\n                if (\n                    util_mod.is_deferred(entry) ||\n                    (this.get(\"data_mode_compatible\")(entry, mode) && this.get(\"can_subset\")(entry))\n                ) {\n                    this.move_key_to_end(entry_region, i);\n\n                    // If there's data, subset it.\n                    if (!util_mod.is_deferred(entry)) {\n                        var subset_entry = this.subset_entry(entry, region);\n                        this.set_data(region, subset_entry);\n                        entry = subset_entry;\n                    }\n\n                    return entry;\n                }\n            }\n        }\n\n        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n        // subsetted. For these cases, do not increase length because region will never be found (and\n        // an infinite loop will occur.)\n        // If needed, extend region to make it minimum size.\n        if (!is_subregion && region.length() < this.attributes.min_region_size) {\n            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n            // below.\n\n            // Use copy of region to avoid changing actual region.\n            region = region.copy();\n\n            // Use heuristic to extend region: extend relative to last data request.\n            var last_request = this.most_recently_added();\n            if (!last_request || region.get(\"start\") > last_request.get(\"start\")) {\n                // This request is after the last request, so extend right.\n                region.set(\"end\", region.get(\"start\") + this.attributes.min_region_size);\n            } else {\n                // This request is after the last request, so extend left.\n                region.set(\"start\", region.get(\"end\") - this.attributes.min_region_size);\n            }\n\n            // Trim region to avoid invalid coordinates.\n            region.set(\"genome\", this.attributes.genome);\n            region.trim();\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Alias for set_elt for readbility.\n     */\n    set_data: function(region, entry) {\n        this.set_elt(region, entry);\n    },\n\n    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n    DEEP_DATA_REQ: \"deep\",\n\n    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n    BROAD_DATA_REQ: \"breadth\",\n\n    /**\n     * Gets more data for a region using either a depth-first or a breadth-first approach.\n     */\n    get_more_data: function(region, mode, resolution, extra_params, req_type) {\n        var cur_data = this._mark_stale(region);\n        if (!(cur_data && this.get(\"data_mode_compatible\")(cur_data, mode))) {\n            console.log(\"ERROR: problem with getting more data: current data is not compatible\");\n            return;\n        }\n\n        //\n        // Set parameters based on request type.\n        //\n        var query_low = region.get(\"start\");\n        if (req_type === this.DEEP_DATA_REQ) {\n            // Use same interval but set start_val to skip data that's already in cur_data.\n            $.extend(extra_params, {\n                start_val: cur_data.data.length + 1\n            });\n        } else if (req_type === this.BROAD_DATA_REQ) {\n            // To get past an area of extreme feature depth, set query low to be after either\n            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n            query_low = (cur_data.max_high ? cur_data.max_high : cur_data.data[cur_data.data.length - 1][2]) + 1;\n        }\n        var query_region = region.copy().set(\"start\", query_low);\n\n        //\n        // Get additional data, append to current data, and set new data. Use a custom deferred object\n        // to signal when new data is available.\n        //\n        var data_manager = this;\n\n        var new_data_request = this.load_data(query_region, mode, resolution, extra_params);\n\n        var new_data_available = $.Deferred();\n        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n        // is all data, not just new data.\n        this.set_data(region, new_data_available);\n        $.when(new_data_request).then(result => {\n            // Update data and message.\n            if (result.data) {\n                result.data = cur_data.data.concat(result.data);\n                if (result.max_low) {\n                    result.max_low = cur_data.max_low;\n                }\n                if (result.message) {\n                    // HACK: replace number in message with current data length. Works but is ugly.\n                    result.message = result.message.replace(/[0-9]+/, result.data.length);\n                }\n            }\n            data_manager.set_data(region, result);\n            new_data_available.resolve(result);\n        });\n        return new_data_available;\n    },\n\n    /**\n     * Returns true if more detailed data can be obtained for entry.\n     */\n    can_get_more_detailed_data: function(region) {\n        var cur_data = this.get_elt(region);\n\n        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n        return cur_data.dataset_type === \"bigwig\" && cur_data.data.length < 8000;\n    },\n\n    /**\n     * Returns more detailed data for an entry.\n     */\n    get_more_detailed_data: function(region, mode, resolution, detail_multiplier, extra_params) {\n        // Mark current entry as stale.\n        var cur_data = this._mark_stale(region);\n        if (!cur_data) {\n            console.log(\"ERROR getting more detailed data: no current data\");\n            return;\n        }\n\n        if (!extra_params) {\n            extra_params = {};\n        }\n\n        // Use additional parameters to get more detailed data.\n        if (cur_data.dataset_type === \"bigwig\") {\n            // FIXME: constant should go somewhere.\n            extra_params.num_samples = 1000 * detail_multiplier;\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Marks cache data as stale.\n     */\n    _mark_stale: function(region) {\n        var entry = this.get_elt(region);\n        if (!entry) {\n            console.log(\"ERROR: no data to mark as stale: \", this.get(\"dataset\"), region.toString());\n        }\n        entry.stale = true;\n        return entry;\n    },\n\n    /**\n     * Returns an array of data with each entry representing one chromosome/contig\n     * of data or, if data is not available, returns a Deferred that resolves to the\n     * data when it becomes available.\n     */\n    get_genome_wide_data: function(genome) {\n        // -- Get all data. --\n\n        var self = this;\n\n        var all_data_available = true;\n\n        var //  Map chromosome info into genome data.\n        gw_data = _.map(genome.get(\"chroms_info\").chrom_info, chrom_info => {\n            var chrom_data = self.get_elt(\n                new GenomeRegion({\n                    chrom: chrom_info.chrom,\n                    start: 0,\n                    end: chrom_info.len\n                })\n            );\n\n            // Set flag if data is not available.\n            if (!chrom_data) {\n                all_data_available = false;\n            }\n\n            return chrom_data;\n        });\n\n        // -- If all data is available, return it. --\n        if (all_data_available) {\n            return gw_data;\n        }\n\n        // -- All data is not available, so load from server. --\n\n        var deferred = $.Deferred();\n        $.getJSON(this.get(\"dataset\").url(), { data_type: \"genome_data\" }, genome_wide_data => {\n            self.add_data(genome_wide_data.data);\n            deferred.resolve(genome_wide_data.data);\n        });\n\n        return deferred;\n    },\n\n    /**\n     * Returns entry with only data in the subregion.\n     */\n    subset_entry: function(entry, subregion) {\n        // Dictionary from entry type to function for subsetting data.\n        var subset_fns = {\n            bigwig: function(data, subregion) {\n                return _.filter(\n                    data,\n                    data_point => data_point[0] >= subregion.get(\"start\") && data_point[0] <= subregion.get(\"end\")\n                );\n            },\n            refseq: function(data, subregion) {\n                var seq_start = subregion.get(\"start\") - entry.region.get(\"start\");\n                return entry.data.slice(seq_start, seq_start + subregion.length());\n            }\n        };\n\n        // Subset entry if there is a function for subsetting and regions are not the same.\n        var subregion_data = entry.data;\n        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n            subregion_data = subset_fns[entry.dataset_type](entry.data, subregion);\n        }\n\n        // Return entry with subregion's data.\n        return {\n            region: subregion,\n            data: subregion_data,\n            dataset_type: entry.dataset_type\n        };\n    }\n});\n\nvar GenomeReferenceDataManager = GenomeDataManager.extend({\n    initialize: function(options) {\n        // Use generic object in place of dataset and set urlRoot to fetch data.\n        var dataset_placeholder = new Backbone.Model();\n        dataset_placeholder.urlRoot = options.data_url;\n        this.set(\"dataset\", dataset_placeholder);\n    },\n\n    load_data: function(region, mode, resolution, extra_params) {\n        // Fetch data if region is not too large.\n        return region.length() <= 100000\n            ? GenomeDataManager.prototype.load_data.call(this, region, mode, resolution, extra_params)\n            : { data: null, region: region };\n    }\n});\n\n/**\n * A genome build.\n */\nvar Genome = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        key: null,\n        chroms_info: null\n    },\n\n    initialize: function(options) {\n        this.id = options.dbkey;\n    },\n\n    /**\n     * Shorthand for getting to chromosome information.\n     */\n    get_chroms_info: function() {\n        return this.attributes.chroms_info.chrom_info;\n    },\n\n    /**\n     * Returns a GenomeRegion object denoting a complete chromosome.\n     */\n    get_chrom_region: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        var chrom_info = _.find(this.get_chroms_info(), chrom_info => chrom_info.chrom === chr_name);\n        return new GenomeRegion({\n            chrom: chrom_info.chrom,\n            end: chrom_info.len\n        });\n    },\n\n    /** Returns the length of a chromosome. */\n    get_chrom_len: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        return _.find(this.get_chroms_info(), chrom_info => chrom_info.chrom === chr_name).len;\n    }\n});\n\n/**\n * A genomic region.\n */\nvar GenomeRegion = Backbone.Model.extend(\n    {\n        defaults: {\n            chrom: null,\n            start: 0,\n            end: 0,\n            str_val: null,\n            genome: null\n        },\n\n        /**\n     * Returns true if this region is the same as a given region.\n     * It does not test the genome right now.\n     */\n        same: function(region) {\n            return (\n                this.attributes.chrom === region.get(\"chrom\") &&\n                this.attributes.start === region.get(\"start\") &&\n                this.attributes.end === region.get(\"end\")\n            );\n        },\n\n        /**\n     * If from_str specified, use it to initialize attributes.\n     */\n        initialize: function(options) {\n            if (options.from_str) {\n                var pieces = options.from_str.split(\":\");\n                var chrom = pieces[0];\n                var start_end = pieces[1].split(\"-\");\n                this.set({\n                    chrom: chrom,\n                    start: parseInt(start_end[0], 10),\n                    end: parseInt(start_end[1], 10)\n                });\n            }\n\n            // Keep a copy of region's string value for fast lookup.\n            this.attributes.str_val = `${this.get(\"chrom\")}:${this.get(\"start\")}-${this.get(\"end\")}`;\n\n            // Set str_val on attribute change.\n            this.on(\n                \"change\",\n                function() {\n                    this.attributes.str_val = `${this.get(\"chrom\")}:${this.get(\"start\")}-${this.get(\"end\")}`;\n                },\n                this\n            );\n        },\n\n        copy: function() {\n            return new GenomeRegion({\n                chrom: this.get(\"chrom\"),\n                start: this.get(\"start\"),\n                end: this.get(\"end\")\n            });\n        },\n\n        length: function() {\n            return this.get(\"end\") - this.get(\"start\");\n        },\n\n        /** Returns region in canonical form chrom:start-end */\n        toString: function() {\n            return this.attributes.str_val;\n        },\n\n        toJSON: function() {\n            return {\n                chrom: this.get(\"chrom\"),\n                start: this.get(\"start\"),\n                end: this.get(\"end\")\n            };\n        },\n\n        /**\n     * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n     * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n     */\n        compute_overlap: function(a_region) {\n            var first_chrom = this.get(\"chrom\");\n            var second_chrom = a_region.get(\"chrom\");\n            var first_start = this.get(\"start\");\n            var second_start = a_region.get(\"start\");\n            var first_end = this.get(\"end\");\n            var second_end = a_region.get(\"end\");\n            var overlap;\n\n            // Compare chroms.\n            if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n                return GenomeRegion.overlap_results.DIF_CHROMS;\n            }\n\n            // Compare regions.\n            if (first_start < second_start) {\n                if (first_end < second_start) {\n                    overlap = GenomeRegion.overlap_results.BEFORE;\n                } else if (first_end < second_end) {\n                    overlap = GenomeRegion.overlap_results.OVERLAP_START;\n                } else {\n                    // first_end >= second_end\n                    overlap = GenomeRegion.overlap_results.CONTAINS;\n                }\n            } else if (first_start > second_start) {\n                if (first_start > second_end) {\n                    overlap = GenomeRegion.overlap_results.AFTER;\n                } else if (first_end <= second_end) {\n                    overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n                } else {\n                    overlap = GenomeRegion.overlap_results.OVERLAP_END;\n                }\n            } else {\n                // first_start === second_start\n                overlap =\n                    first_end >= second_end\n                        ? GenomeRegion.overlap_results.CONTAINS\n                        : GenomeRegion.overlap_results.CONTAINED_BY;\n            }\n\n            return overlap;\n        },\n\n        /**\n     * Trim a region to match genome's constraints.\n     */\n        trim: function(genome) {\n            // Assume that all chromosome/contigs start at 0.\n            if (this.attributes.start < 0) {\n                this.attributes.start = 0;\n            }\n\n            // Only try to trim the end if genome is set.\n            if (this.attributes.genome) {\n                var chrom_len = this.attributes.genome.get_chrom_len(this.attributes.chrom);\n                if (this.attributes.end > chrom_len) {\n                    this.attributes.end = chrom_len - 1;\n                }\n            }\n\n            return this;\n        },\n\n        /**\n     * Returns true if this region contains a given region.\n     */\n        contains: function(a_region) {\n            return this.compute_overlap(a_region) === GenomeRegion.overlap_results.CONTAINS;\n        },\n\n        /**\n     * Returns true if regions overlap.\n     */\n        overlaps: function(a_region) {\n            return (\n                _.intersection(\n                    [this.compute_overlap(a_region)],\n                    [\n                        GenomeRegion.overlap_results.DIF_CHROMS,\n                        GenomeRegion.overlap_results.BEFORE,\n                        GenomeRegion.overlap_results.AFTER\n                    ]\n                ).length === 0\n            );\n        }\n    },\n    {\n        overlap_results: {\n            DIF_CHROMS: 1000,\n            BEFORE: 1001,\n            CONTAINS: 1002,\n            OVERLAP_START: 1003,\n            OVERLAP_END: 1004,\n            CONTAINED_BY: 1005,\n            AFTER: 1006\n        }\n    }\n);\n\nvar GenomeRegionCollection = Backbone.Collection.extend({\n    model: GenomeRegion\n});\n\n/**\n * A genome browser bookmark.\n */\nvar BrowserBookmark = Backbone.Model.extend({\n    defaults: {\n        region: null,\n        note: \"\"\n    },\n\n    initialize: function(options) {\n        this.set(\"region\", new GenomeRegion(options.region));\n    }\n});\n\n/**\n * Bookmarks collection.\n */\nvar BrowserBookmarkCollection = Backbone.Collection.extend({\n    model: BrowserBookmark\n});\n\n/**\n * A track of data in a genome visualization.\n */\n// TODO: rename to Track and merge with Trackster's Track object.\nvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend(\n    {\n        defaults: {\n            mode: \"Auto\"\n        },\n\n        initialize: function(options) {\n            this.set(\"dataset\", new data_mod.Dataset(options.dataset));\n\n            // -- Set up config settings. --\n            var models = [\n                {\n                    key: \"name\",\n                    default_value: this.get(\"dataset\").get(\"name\")\n                },\n                { key: \"color\" },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: 0\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: 1\n                }\n            ];\n\n            this.set(\"config\", config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n            // -- Set up data manager. --\n            var preloaded_data = this.get(\"preloaded_data\");\n            if (preloaded_data) {\n                preloaded_data = preloaded_data.data;\n            } else {\n                preloaded_data = [];\n            }\n            this.set(\n                \"data_manager\",\n                new GenomeDataManager({\n                    dataset: this.get(\"dataset\"),\n                    init_data: preloaded_data\n                })\n            );\n        }\n    },\n    {\n        // This definition matches that produced by to_dict() methods in tracks.js\n        to_json_keys: [\"track_type\", \"dataset\", \"prefs\", \"mode\", \"filters\", \"tool_state\"],\n        to_json_mappers: {\n            prefs: function(p, self) {\n                if (_.size(p) === 0) {\n                    p = {\n                        name: self\n                            .get(\"config\")\n                            .get(\"name\")\n                            .get(\"value\"),\n                        color: self\n                            .get(\"config\")\n                            .get(\"color\")\n                            .get(\"value\")\n                    };\n                }\n                return p;\n            },\n            dataset: function(d) {\n                return {\n                    id: d.id,\n                    hda_ldda: d.get(\"hda_ldda\")\n                };\n            }\n        }\n    }\n);\n\nvar BackboneTrackCollection = Backbone.Collection.extend({\n    model: BackboneTrack\n});\n\n/**\n * A visualization.\n */\nvar Visualization = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        type: \"\"\n    },\n\n    urlRoot: `${Galaxy.root}api/visualizations`,\n\n    /**\n     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n     * Note: This is necessary because (a) Galaxy requires keyword args and\n     * (b) Galaxy does not handle PUT now.\n     */\n    save: function() {\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                vis_json: JSON.stringify(this)\n            }\n        });\n    }\n});\n\n/**\n * A visualization of genome data.\n */\nvar GenomeVisualization = Visualization.extend(CustomToJSON).extend(\n    {\n        defaults: _.extend({}, Visualization.prototype.defaults, {\n            dbkey: \"\",\n            drawables: null,\n            bookmarks: null,\n            viewport: null\n        }),\n\n        initialize: function(options) {\n            // Replace drawables with tracks.\n            this.set(\"drawables\", new BackboneTrackCollection(options.tracks));\n\n            var models = [];\n            this.set(\"config\", config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n            // Clear track and data definitions to avoid storing large objects.\n            this.unset(\"tracks\");\n            this.get(\"drawables\").each(d => {\n                d.unset(\"preloaded_data\");\n            });\n        },\n\n        /**\n     * Add a track or array of tracks to the visualization.\n     */\n        add_tracks: function(tracks) {\n            this.get(\"drawables\").add(tracks);\n        }\n    },\n    {\n        // This definition matches that produced by to_dict() methods in tracks.js\n        to_json_keys: [\"view\", \"viewport\", \"bookmarks\"],\n\n        to_json_mappers: {\n            view: function(dummy, self) {\n                return {\n                    obj_type: \"View\",\n                    prefs: {\n                        name: self.get(\"title\"),\n                        content_visible: true\n                    },\n                    drawables: self.get(\"drawables\")\n                };\n            }\n        }\n    }\n);\n\n/**\n * -- Routers --\n */\n\n/**\n * Router for track browser.\n */\nvar TrackBrowserRouter = Backbone.Router.extend({\n    initialize: function(options) {\n        this.view = options.view;\n\n        // Can't put regular expression in routes dictionary.\n        // NOTE: parentheses are used to denote parameters returned to callback.\n        this.route(/([\\w]+)$/, \"change_location\");\n        this.route(/([\\w\\+]+\\:[\\d,]+-[\\d,]+)$/, \"change_location\");\n\n        // Handle navigate events from view.\n        var self = this;\n        self.view.on(\"navigate\", new_loc => {\n            self.navigate(new_loc);\n        });\n    },\n\n    change_location: function(new_loc) {\n        this.view.go_to(new_loc);\n    }\n});\n\nexport default {\n    BackboneTrack: BackboneTrack,\n    BrowserBookmark: BrowserBookmark,\n    BrowserBookmarkCollection: BrowserBookmarkCollection,\n    Cache: Cache,\n    CanvasManager: CanvasManager,\n    Genome: Genome,\n    GenomeDataManager: GenomeDataManager,\n    GenomeRegion: GenomeRegion,\n    GenomeRegionCollection: GenomeRegionCollection,\n    GenomeVisualization: GenomeVisualization,\n    GenomeReferenceDataManager: GenomeReferenceDataManager,\n    TrackBrowserRouter: TrackBrowserRouter,\n    Visualization: Visualization,\n    select_datasets: select_datasets\n};\n"]}