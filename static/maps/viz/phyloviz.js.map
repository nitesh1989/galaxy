{"version":3,"sources":["viz/phyloviz.js"],"names":["alert","maxDepth","depth","node","nodes","push","sumChildVertSeparation","forEach","defaultDist","dist","children","numLeaves","depthSeparation","maxTextWidth","child","parent","layout","vertSeparation","x0","length","leafIndex","x","y","self","this","hierarchy","d3","value","height","layoutMode","leafHeight","hasIllegalJsonCharacters","inputLeafHeight","PhyloTreeLayout","mode","layoutAngle","angle","links","tree","toString","call","d","i","window","_d","_nodes","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","$inputKey","min","max","val","fieldName","attr","replace","n","isNaN","parseFloat","isFinite","isNumeric","search","PhyloTree","_visualization2","default","Visualization","defaults","separation","type","title","fontSize","selectedNode","initialize","options","_data2","Dataset","id","dataset_id","root","scaleFactor","_children","toggleAll","toggle","getData","cleanTree","_selected","config","jQuery","attributes","show_message","$","dataType","data","JSON","stringify","success","res","hide_modal","nodeRadius","url","width","source","select","model","renderNodes","stdInit","addTooltips","renderLinks","link","duration","vis","selectAll","target","calcalateLinePos","updateAndRender","y0","pos1","pos2","enter","insert","diagonal","transition","exit","remove","selectNode","classed","linkUpdate","set","name","annotation","__data__","bootstrap","Math","round","tooltip","placement","trigger","margins","svg","projection","get","append","on","event","stopPropagation","altKey","nodeEnter","style","nodeUpdate","text","nodeExit","MAX_SCALE","MIN_SCALE","MAX_DISPLACEMENT","radius","render","zoomFunc","behavior","zoom","scaleExtent","phyloTree","HeaderButtons","translate","scale","nodeSelectionView","NodeSelectionView","navMenu","zoomAndPan","setTimeout","empty","mainSVG","boundingRect","layoutOptions","linearView","translateParams","zoomParams","translateStatement","translationCoor","zoomStatement","split","reloadViz","getJSON","treeIndex","packedJson","phylovizView","initRightHeaderBtns","off","icon_class","nexSelected","create_icon_buttons_menu","on_click","show","settingsMenu","updateUI","open","tooltip_config","rightMenu","$el","initNavBtns","_iconButton2","SettingsMenu","el","inputs","hide","resetToDefaults","each","apply","enableEdit","$input","saveChanges","key","valuesOfConcern","updateNodes","removeAttr","toggleUI","cancelChanges","checked","UI","isEnabled","enable","PhyloVizSearch","condition","searchConditionVal","searchTree","attrVal","Date","searchTerm","toLowerCase","indexOf","PhylovizView"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["import * as d3 from \"libs/d3\";\nimport visualization_mod from \"viz/visualization\";\nimport data_mod from \"mvc/dataset/data\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n    className: \"UserMenuBase\",\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue: function($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val();\n\n        var fieldName = $inputKey.attr(\"displayLabel\") || $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)) {\n            alert(`${fieldName} is not a number!`);\n            return false;\n        }\n\n        if (value > max) {\n            alert(`${fieldName} is too large.`);\n            return false;\n        } else if (value < min) {\n            alert(`${fieldName} is too small.`);\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters: function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n            alert(\n                \"Named fields cannot contain these illegal characters: \" +\n                    \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n            );\n            return true;\n        }\n        return false;\n    }\n});\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n    var self = this; // maximum length of the text labels\n\n    var hierarchy = d3.layout\n        .hierarchy()\n        .sort(null)\n        .value(null);\n\n    var // ! represents both the layout angle and the height of the layout, in px\n    height = 360;\n\n    var layoutMode = \"Linear\";\n\n    var // height of each individual leaf node\n    leafHeight = 18;\n\n    var // separation between nodes of different depth, in px\n    depthSeparation = 200;\n\n    var // change to recurssive call\n    leafIndex = 0;\n\n    var // tree defaults to 0.5 dist if no dist is specified\n    defaultDist = 0.5;\n\n    var maxTextWidth = 50;\n\n    self.leafHeight = inputLeafHeight => {\n        if (typeof inputLeafHeight === \"undefined\") {\n            return leafHeight;\n        } else {\n            leafHeight = inputLeafHeight;\n            return self;\n        }\n    };\n\n    self.layoutMode = mode => {\n        if (typeof mode === \"undefined\") {\n            return layoutMode;\n        } else {\n            layoutMode = mode;\n            return self;\n        }\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = angle => {\n        if (typeof angle === \"undefined\") {\n            return height;\n        }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) {\n            return self;\n        } else {\n            height = angle;\n            return self;\n        }\n    };\n\n    self.separation = dist => {\n        // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\") {\n            return depthSeparation;\n        } else {\n            depthSeparation = dist;\n            return self;\n        }\n    };\n\n    self.links = (\n        nodes // uses d3 native method to generate links. Done.\n    ) => d3.layout.tree().links(nodes);\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = (d, i) => {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(d) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i);\n\n        var nodes = [];\n        var maxDepth = 0;\n        var numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(node => {\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(node => {\n            if (!node.children) {\n                //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight = layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout(node, maxDepth, vertSeparation, parent) {\n        var children = node.children;\n        var sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null) {\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {\n            //root node\n            node.y0 = maxTextWidth;\n        }\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach(child => {\n                child.parent = node;\n                sumChildVertSeparation += layout(child, maxDepth, vertSeparation, node);\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults: {\n        layout: \"Linear\",\n        separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type: \"phyloviz\", // visualization type\n        title: \"Title\",\n        scaleFactor: 1,\n        translate: [0, 0],\n        fontSize: 12, //fontSize of node label\n        selectedNode: null,\n        nodeAttrChangedTime: 0\n    },\n\n    initialize: function(options) {\n        this.set(\n            \"dataset\",\n            new data_mod.Dataset({\n                id: options.dataset_id\n            })\n        );\n    },\n\n    root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle: function(d) {\n        if (typeof d === \"undefined\") {\n            return;\n        }\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll: function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData: function() {\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node) {\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected) {\n                delete node._selected;\n            }\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                config: JSON.stringify(config),\n                type: \"phyloviz\"\n            },\n            success: function(res) {\n                hide_modal();\n            }\n        });\n    }\n});\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase = Backbone.View.extend({\n    defaults: {\n        nodeRadius: 4.5 // radius of each node in the diagram\n    },\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit: function(options) {\n        var self = this;\n        self.model.on(\n            \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender,\n            self\n        );\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender: function(source) {\n        var vis = d3.select(\".vis\");\n        var self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks: function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis.selectAll(\"g.completeLink\").data(self.tree.links(self.nodes), d => d.target.id);\n\n        var calcalateLinePos = d => {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = `${d.source.y0} ${d.source.x0}`;\n            // position where the line makes a right angle bend\n            d.pos1 = `${d.source.y0} ${d.target.x0}`;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = `${d.target.y0} ${d.target.x0}`;\n        };\n\n        var linkEnter = link\n            .enter()\n            .insert(\"svg:g\", \"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter\n            .append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", d => {\n                calcalateLinePos(d);\n                return `M ${d.pos0} L ${d.pos1}`;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\").attr(\"d\", d => {\n            calcalateLinePos(d);\n            return `M ${d.pos0} L ${d.pos1} L ${d.pos2}`;\n        });\n\n        var linkExit = link.exit().remove();\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode: function(node) {\n        var self = this;\n        d3.selectAll(\"g.node\").classed(\"selectedHighlight\", d => {\n            if (node.id === d.id) {\n                if (node._selected) {\n                    // for de=selecting node.\n                    delete node._selected;\n                    return false;\n                } else {\n                    node._selected = true;\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips: function() {\n        $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function() {\n                var d = this.__data__;\n                var annotation = d.annotation || \"None\";\n                return d\n                    ? `${d.name ? `${d.name}<br/>` : \"\"}Dist: ${d.dist} <br/>Annotation1: ${annotation}${d.bootstrap\n                          ? `<br/>Confidence level: ${Math.round(100 * d.bootstrap)}`\n                          : \"\"}`\n                    : \"\";\n            })\n            .tooltip({ placement: \"top\", trigger: \"hover\" });\n    }\n});\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView = PhylovizLayoutBase.extend({\n    initialize: function(options) {\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout: function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes: function(source) {\n        var self = this;\n        var fontSize = `${self.model.get(\"fontSize\")}px`;\n\n        // assigning properties from models\n        self.tree.separation(self.model.get(\"separation\")).leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500;\n\n        var nodes = self.tree.separation(self.model.get(\"separation\")).nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\").data(nodes, d => d.name + d.id || (d.id = ++self.i));\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node\n            .enter()\n            .append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", () => {\n                d3.event.stopPropagation();\n            })\n            .on(\"click\", d => {\n                if (d3.event.altKey) {\n                    self.selectNode(d); // display info if alt is pressed\n                } else {\n                    if (d.children && d.children.length === 0) {\n                        return;\n                    } // there is no need to toggle leaves\n                    self.model.toggle(d); // contract/expand nodes at data level\n                    self.updateAndRender(d); // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(source) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", d => `translate(${source.y0},${source.x0})`);\n\n        nodeEnter\n            .append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", d => (d._children ? \"lightsteelblue\" : \"#fff\"));\n\n        nodeEnter\n            .append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", d => (d.children || d._children ? -10 : 10))\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", d => (d.children || d._children ? \"end\" : \"start\"))\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition().duration(duration);\n\n        nodeUpdate.attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n        nodeUpdate\n            .select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", d => (d._children ? \"lightsteelblue\" : \"#fff\"));\n\n        nodeUpdate\n            .select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(d => (d.name && d.name !== \"\" ? d.name : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\"));\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node\n            .exit()\n            .transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(d => {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n});\n\nvar PhylovizView = Backbone.View.extend({\n    className: \"phyloviz\",\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(() => {\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior.zoom().scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({\n            phyloTree: self.phyloTree\n        });\n        self.nodeSelectionView = new NodeSelectionView({\n            phyloTree: self.phyloTree\n        });\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(() => {\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function() {\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3\n            .select(\"#PhyloViz\")\n            .append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(\n                self.zoomFunc.on(\"zoom\", () => {\n                    self.zoomAndPan();\n                })\n            );\n\n        self.boundingRect = self.mainSVG\n            .append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model: self.phyloTree,\n            width: self.width,\n            height: self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(`Phylogenetic Tree from ${self.phyloTree.get(\"title\")}:`);\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan: function(event) {\n        var zoomParams;\n        var translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this;\n        var scaleFactor = self.zoomFunc.scale();\n        var translationCoor = self.zoomFunc.translate();\n        var zoomStatement = \"\";\n        var translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0, 0];\n                break;\n            case \"+\":\n                scaleFactor *= 1.1;\n                break;\n            case \"-\":\n                scaleFactor *= 0.9;\n                break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) {\n            return;\n        }\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement = `translate(${self.margins[3]},${self.margins[0]}) scale(${scaleFactor})`;\n\n        // Do manual translation.\n        if (d3.event !== null) {\n            translateStatement = `translate(${d3.event.translate})`;\n        } else {\n            if (typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)) {\n                    translationCoor = [translationCoor[0] + parseFloat(x), translationCoor[1] + parseFloat(y)];\n                }\n            }\n            self.zoomFunc.translate(translationCoor); // update zoomFunc\n            translateStatement = `translate(${translationCoor})`;\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz: function() {\n        var self = this;\n        var treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(\n            self.phyloTree.get(\"dataset\").url(),\n            {\n                tree_index: treeIndex,\n                data_type: \"raw_data\"\n            },\n            packedJson => {\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            }\n        );\n    }\n});\n\nvar HeaderButtons = Backbone.View.extend({\n    initialize: function(phylovizView) {\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\")\n            .off()\n            .on(\"change\", () => {\n                self.phylovizView.reloadViz();\n            });\n    },\n\n    initRightHeaderBtns: function() {\n        var self = this;\n\n        var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"gear\",\n                    title: \"PhyloViz Settings\",\n                    on_click: function() {\n                        $(\"#SettingsMenu\").show();\n                        self.settingsMenu.updateUI();\n                    }\n                },\n                {\n                    icon_class: \"disk\",\n                    title: \"Save visualization\",\n                    on_click: function() {\n                        var nexSelected = $(\"#phylovizNexSelector option:selected\").text();\n                        if (nexSelected) {\n                            self.phylovizView.phyloTree.set(\"title\", nexSelected);\n                        }\n                        self.phylovizView.phyloTree.save();\n                    }\n                },\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Search / Edit Nodes\",\n                    on_click: function() {\n                        $(\"#nodeSelectionView\").show();\n                    }\n                },\n                {\n                    icon_class: \"information\",\n                    title: \"Phyloviz Help\",\n                    on_click: function() {\n                        window.open(\"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\");\n                        // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this;\n\n        var navMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"zoom-in\",\n                    title: \"Zoom in\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                    }\n                },\n                {\n                    icon_class: \"zoom-out\",\n                    title: \"Zoom out\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                    }\n                },\n                {\n                    icon_class: \"arrow-circle\",\n                    title: \"Reset Zoom/Pan\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({\n                            zoom: \"reset\"\n                        });\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\nvar SettingsMenu = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation: $(\"#phyloVizTreeSeparation\"),\n            leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n            fontSize: $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.el.hide();\n            });\n        $(\"#phylovizResetSettingsBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.resetToDefaults();\n            });\n        $(\"#phylovizApplySettingsBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.apply();\n            });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply: function() {\n        var self = this;\n        if (\n            !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n        ) {\n            return;\n        }\n        $.each(self.inputs, (key, $input) => {\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI: function() {\n        var self = this;\n        $.each(self.inputs, (key, $input) => {\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults: function() {\n        $(\".tooltip\").remove(); // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, (key, value) => {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function() {}\n});\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit: $(\"#phylovizEditNodesCheck\"),\n            saveChanges: $(\"#phylovizNodeSaveChanges\"),\n            cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n            name: $(\"#phyloVizSelectedNodeName\"),\n            dist: $(\"#phyloVizSelectedNodeDist\"),\n            annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name: null,\n            dist: null,\n            annotation: null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.el.hide();\n            });\n        self.UI.saveChanges.off().on(\"click\", () => {\n            self.updateNodes();\n        });\n        self.UI.cancelChanges.off().on(\"click\", () => {\n            self.cancelChanges();\n        });\n\n        ($ => {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function(isEnabled) {\n                return $(this).each(function() {\n                    if (isEnabled) {\n                        $(this).removeAttr(\"disabled\");\n                    } else {\n                        $(this).attr(\"disabled\", \"disabled\");\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", () => {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI: function() {\n        var self = this;\n        var checked = self.UI.enableEdit.is(\":checked\");\n\n        if (!checked) {\n            self.cancelChanges();\n        }\n\n        $.each(self.valuesOfConcern, (key, value) => {\n            self.UI[key].enable(checked);\n        });\n        if (checked) {\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            $.each(self.valuesOfConcern, (key, value) => {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            if (\n                !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation)\n            ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, (key, value) => {\n                node[key] = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize: function() {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", () => {\n            var searchTerm = $(\"#phyloVizSearchTerm\");\n\n            var searchConditionVal = $(\"#phyloVizSearchCondition\")\n                .val()\n                .split(\"-\");\n\n            var attr = searchConditionVal[0];\n            var condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\") {\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree: function(attr, condition, val) {\n        d3.selectAll(\"g.node\").classed(\"searchHighlight\", d => {\n            var attrVal = d[attr];\n            if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                if (attr === \"dist\") {\n                    switch (condition) {\n                        case \"greaterEqual\":\n                            return attrVal >= +val;\n                        case \"lesserEqual\":\n                            return attrVal <= +val;\n                        default:\n                            return;\n                    }\n                } else if (attr === \"name\" || attr === \"annotation\") {\n                    return attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1;\n                }\n            }\n        });\n    }\n});\n\nexport default {\n    PhylovizView: PhylovizView\n};\n"]}