{"version":3,"sources":["viz/trackster/slotting.js"],"names":["SlottedInfo","slot","feature","this","FeatureSlotter","w_scale","mode","max_rows","measureText","slots","start_end_dct","extend","include_label","LABEL_SPACING","_get_draw_coords","draw_start","Math","floor","draw_end","ceil","f_name","width","text_len","_find_slot","draw_coords","slot_num","has_overlap","undefined","k","k_len","length","s_e","slot_features","feature_uid","undone","highest_slot","i","len","features","slotted_info","old_draw_coords","new_draw_coords","slotted_coords","dc","push","max"],"mappings":"8IAWIA,EAAc,SAASC,EAAMC,GAC7BC,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,GAUfE,EAAiB,SAASC,EAASC,EAAMC,EAAUC,GACnDL,KAAKM,SACLN,KAAKO,iBAxBTP,KAAIQ,QAAWA,EA0BXR,KAAKG,KAAOA,EAxBhBH,KAAAS,cAAA,SAAAN,EACAH,KAAIU,SAAAA,EA0BAV,KAAKK,YAAcA,IAlBnBG,6JAXWA,QAWXP,EAAYH,WAIhBa,iBAAA,SAAAZ,GA2BQ,IAAIa,EAAaC,KAAKC,MAAMf,EAAQ,GAAKC,KAAKE,SAE1Ca,EAAWF,KAAKG,KAAKjB,EAAQ,GAAKC,KAAKE,SACvCe,EAASlB,EAAQ,GApBzB,QAAeG,IAAfe,GAAAjB,KAAAS,cAAA,CAGA,IAAKL,EAAWA,KAAhBC,YAAAY,GAAAC,MAAgBd,EACXC,EAAcA,GAAnB,GAPJO,GAAAO,EAkC6B,SAEbJ,GAAYI,EACC,SAChB,OAAAP,EAAAG,IAgCTK,WAAY,SAASC,GAKjB,IAAK,IAHDT,EAAaS,EAAY,GAEzBN,EAAWM,EAAY,GAClBC,EAAW,EAAGA,GAAYtB,KAAKI,SAAUkB,IAAY,CAC1D,IAAIC,GAAc,EACdzB,EAAOE,KAAKO,cAAce,GAC9B,QAAaE,IAAT1B,EAEA,IAAK,IAAI2B,EAAI,EAAGC,EAAQ5B,EAAK6B,OAAQF,EAAIC,EAAOD,IAAK,CACjD,IAAIG,EAAM9B,EAAK2B,GACf,GAAIV,EAAWa,EAAI,IAAMhB,EAAagB,EAAI,GAAI,CAE1CL,GAAc,EACd,OAIZ,IAAKA,EAvBb,OAAAD,EA2BI,OAAQ,GAlBRO,cAAK,SAAIP,GAUO,IAAA,IANRvB,EACA+B,EAJJvB,EAAIgB,KAAAA,cACJQ,KACAC,EAAIlC,EAOQmC,EAAA,EAAAC,EAAAC,EAAAR,OAAAM,EAAAC,EAAAD,IAAA,CAEPH,GADI/B,EAAAoC,EAAAF,IACJ,GACJ,IAAAG,EAAApC,KAAAM,MAAAwB,GAGA,GAAAM,EAAA,CA7EoB,GAAArC,EAAA,GAAAqC,EAAArC,QAAA,IAAAqC,EAAArC,QAAA,GAAAA,EAAA,GAuFrBgC,IAAS,IAoBGM,EAAkBrC,KAAKW,iBAAiByB,EAAarC,SAtB1DuC,EAAAtC,KAASmC,iBAAUpC,GAC1BQ,EAAqBA,KAAAA,cAAzB6B,EAAAtC,MACA2B,EAAA,EAAAA,EAAAc,EAAAZ,OAAAF,IAAA,CACIO,IAAAA,EAAJO,EAAAd,GACAe,EAAA,KAAAH,EAAA,IAAAG,EAAA,KAAAH,EAAA,KA0BoBE,EAAed,GAAKa,GApBxCN,EAAgBE,KAAMC,IAAAA,EAAiBF,KAAvC3B,MAAqDwB,GAAAhC,WAEjDgC,EAAAA,KAAAA,GAOI,IAAA,IAAAG,EAAA,EAAIlC,EAAAA,EAAaqC,OAAAA,EAAAA,EAAarC,IAAb,CAEb+B,GADA/B,EAAAoC,EAAAJ,EAAAE,KACA,GACA,IAAAZ,EAAIgB,KAAAA,iBAAuB1B,GAG3BW,EAAAtB,KAAIuC,WAAAA,GAGAjB,GAAA,SAEIE,IAAAe,EAAAA,KACHhC,EAAAe,OAERf,EAAAe,GAAAmB,KAAApB,GACDW,KAAAA,MAAAA,GAAoBU,IAAIV,EAAcV,EAAAvB,GACzCiC,EAAMnB,KAAA6B,IAAAV,EAAAV,IAgBP,OAAAU,EAAA,gBAKK/B,eAAAA","file":"../../../scripts/viz/trackster/slotting.js","sourcesContent":["import * as _ from \"libs/underscore\";\nvar extend = _.extend;\n\n// HACK: LABEL_SPACING is currently duplicated between here and painters\nvar LABEL_SPACING = 2;\n\nvar PACK_SPACING = 5;\n\n/**\n * Hold slotting information for a feature.\n */\nvar SlottedInfo = function(slot, feature) {\n    this.slot = slot;\n    this.feature = feature;\n};\n\n/**\n * FeatureSlotter determines slots in which to draw features for vertical\n * packing.\n *\n * This implementation is incremental, any feature assigned a slot will be\n * retained for slotting future features.\n */\nvar FeatureSlotter = function(w_scale, mode, max_rows, measureText) {\n    this.slots = {};\n    this.start_end_dct = {};\n    this.w_scale = w_scale;\n    this.mode = mode;\n    this.include_label = mode === \"Pack\";\n    this.max_rows = max_rows;\n    this.measureText = measureText;\n};\n\n/**\n * Slot a set of features, `this.slots` will be updated with slots by id, and\n * the largest slot required for the passed set of features is returned\n */\nextend(FeatureSlotter.prototype, {\n    /**\n     * Get drawing coordinate for a feature.\n     */\n    _get_draw_coords: function(feature) {\n        // Get initial draw coordinates using w_scale.\n        var draw_start = Math.floor(feature[1] * this.w_scale);\n\n        var draw_end = Math.ceil(feature[2] * this.w_scale);\n        var f_name = feature[3];\n        var text_align;\n\n        // Update start, end drawing locations to include feature name.\n        // Try to put the name on the left, if not, put on right.\n        if (f_name !== undefined && this.include_label) {\n            // Add gap for label spacing and extra pack space padding\n            // TODO: Fix constants\n            var text_len = this.measureText(f_name).width + (LABEL_SPACING + PACK_SPACING);\n            if (draw_start - text_len >= 0) {\n                draw_start -= text_len;\n                text_align = \"left\";\n            } else {\n                draw_end += text_len;\n                text_align = \"right\";\n            }\n        }\n\n        /*\n        if (slot_num < 0) {\n            \n            TODO: this is not yet working --\n            console.log(feature_uid, \"looking for slot with text on the right\");\n            // Slot not found. If text was on left, try on right and see\n            // if slot can be found.\n            // TODO: are there any checks we need to do to ensure that text\n            // will fit on tile?\n            if (text_align === \"left\") {\n                draw_start -= text_len;\n                draw_end -= text_len;\n                text_align = \"right\";\n                slot_num = find_slot(draw_start, draw_end);\n            }\n            if (slot_num >= 0) {\n                console.log(feature_uid, \"found slot with text on the right\");\n            }\n\n        }\n        */\n\n        return [draw_start, draw_end];\n    },\n\n    /**\n     * Find the first slot such that current feature doesn't overlap any other features in that slot.\n     * Returns -1 if no slot was found.\n     */\n    _find_slot: function(draw_coords) {\n        // TODO: Use a data structure for faster searching of available slots.\n        var draw_start = draw_coords[0];\n\n        var draw_end = draw_coords[1];\n        for (var slot_num = 0; slot_num <= this.max_rows; slot_num++) {\n            var has_overlap = false;\n            var slot = this.start_end_dct[slot_num];\n            if (slot !== undefined) {\n                // Iterate through features already in slot to see if current feature will fit.\n                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n                    var s_e = slot[k];\n                    if (draw_end > s_e[0] && draw_start < s_e[1]) {\n                        // There is overlap\n                        has_overlap = true;\n                        break;\n                    }\n                }\n            }\n            if (!has_overlap) {\n                return slot_num;\n            }\n        }\n        return -1;\n    },\n\n    /**\n     * Slot features.\n     */\n    slot_features: function(features) {\n        var start_end_dct = this.start_end_dct;\n        var undone = [];\n        var highest_slot = 0;\n        var feature;\n        var feature_uid;\n\n        // Loop through features to (a) find those that are not yet slotted and (b) update\n        // those that are slotted if new information is availabe. For (a), features already\n        // slotted (based on slotting from other tiles) will retain their current slot.\n        for (var i = 0, len = features.length; i < len; i++) {\n            feature = features[i];\n            feature_uid = feature[0];\n            var slotted_info = this.slots[feature_uid];\n\n            // Separate and handle slotted vs. unslotted features.\n            if (slotted_info) {\n                // Feature is slotted; if feature now has larger start/end coordinates,\n                // update drawing coordinates.\n                if (feature[1] < slotted_info.feature[1] || slotted_info.feature[2] < feature[2]) {\n                    // Feature has changed (e.g. a single read now has its pair), so recalculate its\n                    // drawing coordinates.\n                    var old_draw_coords = this._get_draw_coords(slotted_info.feature);\n\n                    var new_draw_coords = this._get_draw_coords(feature);\n                    var slotted_coords = this.start_end_dct[slotted_info.slot];\n                    for (var k = 0; k < slotted_coords.length; k++) {\n                        var dc = slotted_coords[k];\n                        if (dc[0] === old_draw_coords[0] && dc[1] === old_draw_coords[1]) {\n                            // Replace old drawing coordinates with new ones.\n                            slotted_coords[k] = new_draw_coords;\n                        }\n                    }\n                }\n                highest_slot = Math.max(highest_slot, this.slots[feature_uid].slot);\n            } else {\n                undone.push(i);\n            }\n        }\n\n        // Slot unslotted features.\n\n        // Do slotting.\n        for (var i = 0, len = undone.length; i < len; i++) {\n            feature = features[undone[i]];\n            feature_uid = feature[0];\n            var draw_coords = this._get_draw_coords(feature);\n\n            // Find slot.\n            var slot_num = this._find_slot(draw_coords);\n\n            // Do slotting.\n            if (slot_num >= 0) {\n                // Add current feature to slot.\n                if (start_end_dct[slot_num] === undefined) {\n                    start_end_dct[slot_num] = [];\n                }\n                start_end_dct[slot_num].push(draw_coords);\n                this.slots[feature_uid] = new SlottedInfo(slot_num, feature);\n                highest_slot = Math.max(highest_slot, slot_num);\n            }\n        }\n\n        // Debugging: view slots data.\n        /*\n        for (var i = 0; i < MAX_FEATURE_DEPTH; i++) {\n            var slot = start_end_dct[i];\n            if (slot !== undefined) {\n                console.log(i, \"*************\");\n                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n                    console.log(\"\\t\", slot[k][0], slot[k][1]);\n                }\n            }\n        }\n        */\n        return highest_slot + 1;\n    }\n});\n\nexport default {\n    FeatureSlotter: FeatureSlotter\n};\n"]}