{"version":3,"sources":["viz/trackster/tracks.js"],"names":["MAX_FEATURE_DEPTH","places","MIN_SQUISH_VIEW_WIDTH","TILE_SIZE","pow","Math","round","num","val","DATA_ERROR","url","promise","$","Deferred","ajax","type","DATA_NONE","beforeSend","xhr","DATA_PENDING","DATA_CANNOT_RUN_TOOL","status","DATA_LOADING","_","extend","html_elt_js_obj_dict","is_container","element","obj","attr","moveable","handle_class","container_selector","element_js_obj","bind","handle","relative","e","d","this","child","container","top","bottom","i","parent","children","this_obj","parents","length","position","outerHeight","cur_container","offsetY","insertBefore","remove_drawable","add_drawable_before","add_drawable","get","is","find","prepend","append","hasClass","move_drawable","deltaY","addClass","removeClass","DATA_NOCONVERTER","CONTINUOUS_DATA_MODES","view","obj_dict","id_counter","setRequestHeader","success","resolve","is_overview","action_icons","config","_config2","default","ConfigSettingCollection","from_models_and_saved_values","config_params","prefs","get_value","set_value","name","config_onchange","on","container_div","build_container_div","header_div","header","header_view","_viz_views2","TrackHeaderView","model","id","Drawable","$el","icons_div","drag_handle_class","show","hide","prototype","title","css_class","on_click_fn","drawable","toggle_icon","show_contents","ConfigSettingCollectionView","collection","render_in_modal","key","label","default_value","init","changed","enabled","request_draw","to_dict","set_name","new_name","revert_name","old_name","remove","update_intro_div","update_icons","hide_contents","get_drawables","call","obj_type","DrawableCollection","unpack_drawables","drawables_array","drawables","object_from_template","_draw","options","dictified_drawables","push","to_key_value_dict","other","indexOf","index","splice","replace_drawable","old_drawable","new_drawable","update_html","replaceWith","new_position","get_tracks","track_type","queue","slice","tracks","concat","DrawableGroup","content_div","shift","appendTo","filters_manager","_filters2","FiltersManager","after","parent_div","old_manager","filters","visible","setup_multitrack_filtering","action_icons_def","saved_filters_managers","group","show_composite_track","_restore_filter_managers","clear_tile_cache","toggle","clear_filters","tiles_div","num_drawables","composite_icon","CompositeTrack","filters_icon","j","a_type","get_type","num_feature_tracks","can_composite","FeatureTrack","LineTrack","same_type","filter","shared_filters","remove_all","new_filter","filter_name","NumberFilter","add_filter","init_filters","composite_track","each","TracksterView","Backbone","View","initialize","dbkey","stand_alone","undefined","label_tracks","tracks_to_be_redrawn","max_low","max_high","zoom_factor","min_separation","has_changes","_visualization2","CanvasManager","ownerDocument","reset","vis_id","load_chroms_deferred","render","parent_element","top_container","requested_redraw","browser_content_div","bottom_container","top_labeltrack","viewport_container","add_tracks_button","select_datasets","text","nav_container","click","nav","track","overview_viewport","overview_close","prependTo","overview_highlight","overview_box_background","overview_box","default_overview_height","nav_controls","chrom_select","submit_nav","location_span","nav_input","autocomplete","height","feature_search_deferreds","all_features","hidden_input","zo_link","keyCode","which","apply","go_to","value","stopPropagation","zoom_out","zi_link","zoom_in","tooltip","placement","change_chrom","high","css","select","focus","source","request","response","map","t","data_manager","search_features","term","dataset_features","when","done","feature","minLength","current_x","delta","offsetX","delta_chrom","reset_overview","clientX","original_low","current_height","low","clientY","scrollTop","new_scroll","trigger","width","abs","pageX","startX","span","update_location","min","max","move_delta","proxy","left","offset","intro_div","trigger_navigate","clearTimeout","timer","old_low","delay","request_redraw","add_label_track","LabelTrack","url_parms","MAX_CHROMS_SELECTABLE","chrom_data","dataType","setTimeout","document","redraw","window","get_base_color","base","result","chrom_info","prev_chroms","new_chrom","new_low","new_high","error","self","_util2","commatize","chrom","load_chroms","Galaxy","root","data","found","grep","ref_track","reference_track","len","chrom_option","next_chroms","chrom_start_index","start_index","alert","chrom_pos","parseInt","fraction","current_chrom_span","str","replace","split","label_track","data_fetch","redraw_on_move_fn","width_px","track_list","track_options","to","requestAnimationFrame","_redraw","cur_center","new_half","ceil","resolution_px_b","resize_window","resize_viewport","set_overview","left_px","overview_drawable","point","defaults","hidden","events","dataset","copy","html_div","param","postdraw_actions","param_div","_tools2","Tool","tool","tool_state","param_view","ToolParameterView","state_dict","run_tool_row","run_on_dataset_button","change :input","is_visible","update_params","run_on_dataset","update_event","target","TracksterToolView","modal","set_visible","keydown","region","url_params","target_dataset_id","tool_id","regions","track_name","current_track","run_on_region","hda_ldda","new_track","params","update_value","run","success_callback","action","inputs","ajax_settings","JSON","contentType","interval","success_fn","GenomeRegion","start","end","FilterScaler","toJSON","gen_val","default_val","tool_region_and_parameters_str","html_elt","canvas","LineTrackTile","Tile","init_for_tool_data","FeatureTrackTile","set_filters_manager","all_slotted","incomplete_features","set_dataset","_data2","Dataset","track_data","other_tiles_features_drawn","get_inputs_dict","ss_deferred","ServerStateDeferred","stringify","go","then","message","_painters2","Scaler","feature_data","predisplay_actions","Number","MAX_VALUE","parseFloat","w_scale","stale","mode","feature_mapper","seq_data","has_icons","bookmarked_regions","dataset_check_type","data_query_wait","location","dataset_id","genome","Genome","chroms_info","check_enter_esc","cancel_fn","can_subset","min_height_px","max_height_px","visible_height_px","resize","Track","on_resize","in_handle","in_drag","drag_control","tile_cache","html","unbind","elt","from_str","ReferenceTrack","VariantTrack","regions_to_use","view_region","href","Collection","body","ok_fn","can_draw","init_deferred","retry","set","Close","msg_elt","show_message","valid_chroms","new_height","predraw_init","getJSON","stats","min_value","max_value","set_default_value","msg_html","filters_available","left_offset","clear","tool_view","data_type","TiledTrack","kind","set_min_max","slotters","change_mode","mode_icon","mean","sd","_gen_tile_cache_key","tile_region","TracksterTool","Cache","before_draw","dynamic_tool_div","range","overlay_div","max_rows","tile_index","tile_promises","constructor","tile_promise","tiles","_add_yaxis_label","isNaN","on_change","floor","num_cols","on_finish","new_val","new_mode","tile","force","tools_icon","icons_present","clear_after","resolution","draw_helper","tile_width","get_tile_data","m","tracks_data","tile_data","pref_name","drawing_heights","make_text_editable","tile_low","tile_high","all_data_index","help_text","globalAlpha","show_tile","tile_drawn","get_mode","update_auto_mode","display_mode","_get_drawables","tile_element","get_elt","data_mode","get_data","data_url_extra_params","region_str","param_str","set_elt","is_deferred","entry","extra_info","dataset_type","subset_entry","pop","drawing_modes","get_canvas_height","canvas_manager","new_canvas","ctx","getContext","translate","globalCompositeOperation","draw_tile","canvas_width","_draw_line_track_tile","screenPosition","LinePainter","draw","ref_seq","display_modes","track_height","show_group","toString","values","join","data_and_mode_compatible","tickDistance","log","new_div","max_height","build_config_params","union","data_url","new_visible","char_width_px","visible_height","init_deferreds","fillStyle","fillText","param_space_viz_icon","update_all_min_max","DiagonalHeatmapTrack","reference","GenomeReferenceDataManager","cur_visible","summary_draw_height","subset","help","font","manager","default_font","str_len","c","supportsByteRanges","BBIDataManager","set_painter_from_config","painter","line_track_tiles","tile_incomplete_features","omit","all_incomplete_features","new_canvas_ctx","f","update_ui_elt","example_feature","applies_to","show_more_rows_icon","incremental_slots","start_end_dct","slotter","FeatureSlotter","level","rows_required","dummy_painter","ArcLinkedFeaturePainter","LinkedFeaturePainter","update_attrs","hide_feature","filtered","pluck","inc_features","filter_height_scaler","keys","textAlign","draw_results","drawImage","cur_tile","new_tile","features","num_samples","dummy_context","_slotting2","x","measureText","samples_div_html","font_size","get_required_height","slots","flen","keep","filter_alpha_scaler","alpha_filter","height_filter","b","addable_objects","ReadTrack","VcfTrack","template","drawable_type","get_metadata","match","deferreds","fetch","sample_names","font-size","line-height","ReadPainter"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = (element, obj) => {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = (element, handle_class, container_selector, element_js_obj) => {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: `.${handle_class}`, relative: true }, function(e, d) {\n            var element = $(this);\n            var parent = $(this).parent();\n\n            var // Only sorting amongst tracks and groups.\n            children = parent.children(\".track,.group\");\n\n            var this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")];\n            var child;\n            var container;\n            var top;\n            var bottom;\n            var i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(this_obj, cur_container);\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (child.is(container_selector) && this !== child.get(0) && d.offsetY >= top && d.offsetY <= bottom) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\"))\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, d.deltaY > 0 ? i - 1 : i);\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\nERROR_PADDING = 20;\n\nvar // Maximum number of rows un a slotted track\nMAX_FEATURE_DEPTH = 100;\n\nvar // Minimum width for window for squish to be used.\nMIN_SQUISH_VIEW_WIDTH = 12000;\n\nvar // Number of pixels per tile, not including left offset.\nTILE_SIZE = 400;\n\nvar DEFAULT_DATA_QUERY_WAIT = 5000;\n\nvar // Maximum number of chromosomes that are selectable at any one time.\nMAX_CHROMS_SELECTABLE = 100;\n\nvar DATA_ERROR = \"Cannot display dataset due to an error. \";\n\nvar DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\";\n\nvar DATA_NONE = \"No data for this chrom/contig.\";\n\nvar DATA_PENDING =\n    \"Preparing data. This can take a while for a large dataset. \" +\n    \"If the visualization is saved and closed, preparation will continue in the background.\";\n\nvar DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \";\nvar DATA_LOADING = \"Loading data...\";\nvar DATA_OK = \"Ready for display\";\nvar TILE_CACHE_SIZE = 10;\nvar DATA_CACHE_SIZE = 20;\n\nvar // Numerical/continuous data display modes.\nCONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            () => {\n                icons_div.show();\n            },\n            () => {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0);\n\n        var tracks = [];\n        var drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", `group_${this.id}_content_div`)\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: \"Show composite track\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                } else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\")\n            .addClass(\"group\")\n            .attr(\"id\", `group_${this.id}`);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function() {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        } else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        } else {\n            // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i;\n\n            var j;\n            var drawable;\n            var same_type = true;\n            var a_type = this.drawables[0].get_type();\n            var num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            } else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {};\n\n                var filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var filters;\n                var new_filter;\n                var min;\n                var max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new filters_mod.NumberFilter({\n                            name: filters[0].name,\n                            index: filters[0].index\n                        });\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            } else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                var drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value(\"name\"),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), {\n            filters: this.filters_manager.to_dict()\n        });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, d => {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(this.container.get(0).ownerDocument);\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container;\n\n        var view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(() => {\n                visualization.select_datasets({ dbkey: view.dbkey }, tracks => {\n                    _.each(tracks, track => {\n                        view.add_drawable(object_from_template(track, view, view));\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(() => {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(`${view.chrom}:${view.low}-${view.high}`);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [];\n\n                    var feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), t =>\n                        t.data_manager.search_features(request.term).success(dataset_features => {\n                            all_features = all_features.concat(dataset_features);\n                        })\n                    );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(() => {\n                        response(\n                            $.map(all_features, feature => ({\n                                label: feature[0],\n                                value: feature[1]\n                            }))\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", () => {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low));\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(() => {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", (e, d) => {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", (e, d) => {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1)\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", (e, d) => {\n                $(d.proxy).css({\n                    left: Math.min(e.pageX, d.startX) - view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n\n                var min = Math.min(e.pageX, d.startX) - view.container.offset().left;\n\n                var max = Math.max(e.pageX, d.startX) - view.container.offset().left;\n\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", (e, d) => {\n                var min = Math.min(e.pageX, d.startX);\n                var max = Math.max(e.pageX, d.startX);\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                var old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(new LabelTrack(this, { content_div: this.top_labeltrack }));\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(() => {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", () => {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(`${base.toLowerCase()}_color`) || this.config.get_value(\"n_color\");\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(() => {\n                self.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n            }, 500);\n        } else {\n            view.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(`${util.commatize(low)} - ${util.commatize(high)}`);\n        this.nav_input.val(`${this.chrom}:${util.commatize(low)}-${util.commatize(high)}`);\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this;\n        var chrom_data = $.Deferred();\n        $.ajax({\n            url: `${Galaxy.root}api/genomes/${this.dbkey}`,\n            data: url_parms,\n            dataType: \"json\",\n            success: function(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append($(`<option value=\"previous\">Previous ${MAX_CHROMS_SELECTABLE}</option>`));\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append($(`<option value=\"next\">Next ${MAX_CHROMS_SELECTABLE}</option>`));\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(`Could not load chroms for this dbkey: ${view.dbkey}`);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(() => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, (v, i) => v.chrom === chrom)[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, () => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/);\n\n        var chrom = chrom_pos[0];\n        var new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined;\n        var new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(() => {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", () => {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this;\n\n        var // Either redrawing a single drawable or all view's drawables.\n        track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, track => {\n            var track_options = _.find(view.tracks_to_be_redrawn, to => to[0] === track);\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(() => {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low;\n        var high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = this.low / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var width_px = (this.high - this.low) / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px) / 2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, track_options => {\n            var track = track_options[0];\n            var options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, label_track => {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() - this.top_container.height() - this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n            content_div: this.overview_viewport\n        });\n\n        var view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = () => {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() + view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\");\n        var param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n        var tool = this.model;\n        var parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", e => {\n                e.stopPropagation();\n            })\n            .click(e => {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", e => {\n                e.stopPropagation();\n            })\n            .keydown(e => {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(param => {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(() => {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(() => {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            track_data => {\n                Galaxy.modal.show({\n                    title: `${tool.get(\"name\")} is Running`,\n                    body: `${tool.get(\n                        \"name\"\n                    )} is running on the complete dataset. Tool outputs are in dataset's history.`,\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\");\n\n        var tool = this.model;\n\n        var region = new visualization.GenomeRegion({\n            chrom: track.view.chrom,\n            start: track.view.low,\n            end: track.view.high\n        });\n\n        var url_params = {\n            target_dataset_id: track.dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id,\n            regions: [region.toJSON()]\n        };\n\n        var current_track = track;\n\n        var // Set name of track to include tool name, parameters, and region used.\n        track_name = tool.get(\"name\") + current_track.tool_region_and_parameters_str(region);\n\n        var container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track, track_data => {\n            new_track.set_dataset(new data.Dataset(track_data));\n            new_track.tiles_div.text(\"Running job.\");\n            new_track.init();\n        });\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: `${Galaxy.root}api/tools`,\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(response => {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (parseFloat(feature_data[this.filter.index]) - this.filter.low) / (this.filter.high - this.filter.low);\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = () => {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = () => {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = () => {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait = \"data_query_wait\" in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value(\"name\") + track.tool_region_and_parameters_str());\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html = `<strong>Tool</strong>:${track.tool.get(\n                    \"name\"\n                )}<br/><strong>Dataset</strong>:${track.config.get_value(\n                    \"name\"\n                )}<br/><strong>Region(s)</strong>: <select name=\"regions\"><option value=\"cur\">current viewing area</option><option value=\"bookmarks\">bookmarks</option><option value=\"both\">current viewing area and bookmarks</option></select>`;\n\n                var cancel_fn = () => {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                };\n\n                var ok_fn = () => {\n                    var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                        regions,\n                        view_region = new visualization.GenomeRegion({\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high\n                        }),\n                        bookmarked_regions = _.map(\n                            $(\".bookmark\"),\n                            elt =>\n                                new visualization.GenomeRegion({\n                                    from_str: $(elt)\n                                        .children(\".position\")\n                                        .text()\n                                })\n                        );\n\n                    // Get regions for visualization.\n                    if (regions_to_use === \"cur\") {\n                        // Use only current region.\n                        regions = [view_region];\n                    } else if (regions_to_use === \"bookmarks\") {\n                        // Use only bookmarks.\n                        regions = bookmarked_regions;\n                    } else {\n                        // Use both current region and bookmarks.\n                        regions = [view_region].concat(bookmarked_regions);\n                    }\n\n                    Galaxy.modal.hide();\n\n                    // Go to visualization.\n                    window.location.href = `${Galaxy.root}visualization/sweepster?${$.param({\n                        dataset_id: track.dataset.id,\n                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                        regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                    })}`;\n                };\n\n                var check_enter_esc = e => {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", `track_${this.id}`);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            () => {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            () => {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", (e, d) => {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", (e, d) => {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px = track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", (e, d) => {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred();\n\n        var params = {\n            hda_ldda: track.dataset.get(\"hda_ldda\"),\n            data_type: this.dataset_check_type,\n            chrom: track.view.chrom,\n            retry: retry\n        };\n\n        $.getJSON(this.dataset.url(), params, result => {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(() => {\n                                Galaxy.modal.show({\n                                    title: \"Trackster Error\",\n                                    body: `<pre>${result.message}</pre>`,\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(() => {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined && (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(() => {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\"height\", `${track.visible_height_px}px`);\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(() => {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                    max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, \"filters\" in obj_dict ? obj_dict.filters : null);\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                    max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: ${track.mode})`);\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return `${w_scale}_${tile_region}`;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after;\n        var low = this.view.low;\n        var high = this.view.high;\n        var range = high - low;\n        var width = this.view.container.width();\n        var w_scale = this.view.resolution_px_b;\n        var resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n        tile_width = Math.floor(TILE_SIZE * resolution);\n\n        var // Index of first tile that overlaps visible region.\n        tile_index = Math.floor(low / tile_width);\n\n        var tile_region;\n        var tile_promise;\n        var tile_promises = [];\n        var tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(tile => {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(() => {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, t => t !== null);\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this;\n        var css_class = type === \"max\" ? \"top\" : \"bottom\";\n        var text = type === \"max\" ? \"max\" : \"min\";\n        var pref_name = type === \"max\" ? \"max_value\" : \"min_value\";\n        var label = this.container_div.find(`.yaxislabel.${css_class}`);\n        var value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            (() => {\n                track.request_draw({ clear_tile_cache: true });\n            });\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        track.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: `Set ${text} value`\n                })\n                .addClass(`yaxislabel ${css_class}`)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, tile => tile instanceof LineTrackTile);\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, tile => {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, tile => tile.has_icons);\n\n            if (icons_present) {\n                _.each(tiles, tile => {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force;\n        var mode = options.mode || this.mode;\n        var resolution = 1 / w_scale;\n\n        var // Useful vars.\n        track = this;\n\n        var drawables = this._get_drawables();\n        var key = this._gen_tile_cache_key(w_scale, region);\n\n        var is_tile = o => o && \"track\" in o;\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = () => {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, m => m === mode) ? \"Coverage\" : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, (\n                d // Get the track data/promise.\n            ) => d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params));\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(\n                    view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(() => {\n            var tile_data = get_tile_data();\n            var tracks_data = tile_data;\n            var seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, d => util.is_deferred(d))) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(tile => {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [];\n\n            var drawing_heights = [];\n\n            _.each(drawables, (d, i) => {\n                var mode = d.mode;\n                var data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas();\n            var tile_low = region.get(\"start\");\n            var tile_high = region.get(\"end\");\n            var all_data_index = 0;\n\n            var width = Math.ceil((tile_high - tile_low) * w_scale) + track.left_offset;\n\n            var height = _.max(drawing_heights);\n            var tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, (d, i) => {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ([undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ([undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1) {\n            this.config.set_value(\"max_value\", _.max(_.map(result.data, d => d[1])) || 0);\n        }\n\n        var canvas = ctx.canvas;\n\n        var painter = new painters.LinePainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this;\n        var tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round((tile.low - (this.is_overview ? this.view.max_low : this.view.low)) * w_scale);\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", `${this.max_height_px}px`);\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", `${track_height}px`);\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this;\n        var region_str = region !== undefined ? region.toString() : \"all\";\n        var param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return ` - region=[${region_str}], parameters=[${param_str}]`;\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (data.dataset_type === \"bigwig\" || data.extra_info === \"no_detail\") {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view;\n        var range = view.high - view.low;\n\n        var tickDistance = Math.floor(Math.pow(10, Math.floor(Math.log(range) / Math.log(10))));\n\n        var position = Math.floor(view.low / tickDistance) * tickDistance;\n        var width = this.view.container.width();\n        var new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor((position - view.low) / range * width);\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, d => {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, d => {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(() => {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n            name: this.config.get_value(\"name\")\n        });\n\n        var track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, d => d.config.get_value(\"min_value\")));\n\n        var max = _.max(_.map(this.drawables, d => d.config.get_value(\"max_value\")));\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this;\n        var min_value = this.config.get_value(\"min_value\");\n        var max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1;\n\n        var i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this;\n\n        var t = () => {\n            track.update_all_min_max();\n        };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = `${Galaxy.root}api/genomes/${this.view.dbkey}`;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\");\n        var new_visible;\n        var tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region);\n\n        var seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(`${Galaxy.root}datasets/${this.dataset.id}/display`)).then(supportsByteRanges => {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"pos_color\",\n                label: \"Positive Color\",\n                type: \"color\",\n                default_value: \"#FF8C00\"\n            },\n            {\n                key: \"neg_color\",\n                label: \"Negative Color\",\n                type: \"color\",\n                default_value: \"#4169E1\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"int\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"int\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 500,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n            }\n        );\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas;\n\n        var painter = new painters.DiagonalHeatmapPainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help: \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this;\n        var i;\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), inc_features => {\n                _.each(inc_features, feature => {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, tile => {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, f => f[0])\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                        data: _.values(tile_incomplete_features)\n                    };\n\n                    var new_canvas = self.view.canvas_manager.new_canvas();\n                    var new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        self.get_canvas_height(features, tile.mode, tile.w_scale, 100)\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters;\n            var f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false;\n\n            var example_feature;\n            var filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (filter.applies_to(example_feature) && filter.min !== filter.max) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: Auto/${mode})`);\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context;\n\n        var slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(level, mode, MAX_FEATURE_DEPTH, x => dummy_context.measureText(x));\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width));\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this;\n        var canvas = ctx.canvas;\n        var tile_low = region.get(\"start\");\n        var tile_high = region.get(\"end\");\n        var left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [];\n\n        var slots = this.slotters[w_scale].slots;\n        var all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n            ? new FilterScaler(this.filters_manager.alpha_filter)\n            : null;\n\n        var filter_height_scaler = this.filters_manager.height_filter\n            ? new FilterScaler(this.filters_manager.height_filter)\n            : null;\n\n        var painter = new this.painter(\n            filtered,\n            tile_low,\n            tile_high,\n            this.config.to_key_value_dict(),\n            mode,\n            filter_alpha_scaler,\n            filter_height_scaler,\n            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n            ref_seq,\n            b => track.view.get_base_color(b)\n        );\n\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view;\n\n            var painter = new this.painter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode,\n                b => view.get_base_color(b)\n            );\n\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": `${font_size}px`,\n                            top: `${(this.config.get_value(\"summary_height\") - font_size) / 2}px`\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = `${this.mode === \"Squish\" ? 5 : 10}px`;\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"detail_block_color\",\n                label: \"Sense strand block color\",\n                type: \"color\",\n                default_value: \"#AAAAAA\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand block color\",\n                type: \"color\",\n                default_value: \"#DDDDDD\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_insertions\",\n                label: \"Show insertions\",\n                type: \"bool\",\n                default_value: false\n            },\n            {\n                key: \"show_differences\",\n                label: \"Show differences only\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = (template, view, container) => {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n"]}