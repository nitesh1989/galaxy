{"version":3,"sources":["viz/trackster/util.js"],"names":["ServerStateDeferred","Backbone","is_deferred","defaults","ajax_settings","interval","success_fn","result","deferred","$","Deferred","self","this","get","_go","ajax","success","setTimeout","num_tries","number","rgx","test","replace","d","get_random_color","colors","i","length","parseInt","slice","new_color","nr","ng","nb","other_color","or","og","ob","n_brightness","o_brightness","diff","brightness","r","b","ok","Math","round","random","r1","g1","b1","r2","g2","b2","max","min","toString","substr"],"mappings":"kHASI,IAMJA,EAAkBC,SAAdC,MAAAA,QAAcC,UAAlBC,iBASQC,SAAU,IAPlBC,WAAA,SAAAC,GASY,OAAO,IADXD,GAAAA,WACI,IAAAE,EAAOC,EAAAC,WACVC,EAAAC,KANuCR,EAAAO,EAAAE,IAAA,iBAgBpCP,EAAaK,EAAKE,IAAI,cAP9BR,EAAAM,EAAAE,IAAA,YAea,OALC,SAANC,IAPJL,EAAAM,KAAAX,GAAWY,QAAA,SAAAT,GACPC,EAAaE,GAEbN,EAAAA,QAAqBS,GAWbI,WAAWH,EAAKT,KAHhBG,GACHA,gBAoFTU,UA9HR,SAAmBC,GACfA,GAAU,GAJd,IAKI,IAAIC,EAAM,eALdA,EAAAC,KAAAF,IAOQA,EAASA,EAAOG,QAAQF,EAAK,SAJrC,OAAAD,GA+HKjB,YAzHMiB,SAAAA,GAAAA,MAAP,YAAAI,GAkIAvB,oBAAqBA,EAPrBwB,iBA9EC,SAAAC,GAUIA,IAPTA,EAAA,WAY0B,iBAAXA,IAPXD,GAAAA,IAIC,IAAA,IAAAE,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IASGD,EAAOC,GAAKE,SAASH,EAAOC,GAAGG,MAAM,GAAI,IAD7C,IAQiBC,EAEjBC,EACAC,EAAiBC,EAAAC,EAabC,EAPJC,EACAC,EASIC,EAPJC,EACAC,EArBAC,EAAa,SAAbC,EAAgBhB,EAAID,GAAP,OAAcE,IAAAA,EAAa,IAALD,EAAK,IAAAiB,GAAA,KAsBxCC,GAAIX,EACJf,EAAIgB,EACJ,EAAA,CAQA,IAFAI,EAAAG,EAHAV,GAAA,UADAD,EAAAe,KAAAC,MAAA,SAAAD,KAAAE,aACA,GACAf,GAAA,MAAIO,IAAJ,EACAN,EAAA,IAAIO,GAEJI,GAAI1B,EACDQ,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IASKQ,GARJA,EAAAT,EAAAC,GACAI,GAAiBgB,SAAjBhB,IAA4BiB,GAC5BhB,GAAkB,MAAZD,IAAN,EACAE,EAAkB,IAAbE,EACLD,EAAKH,EAALK,EAAAC,EAAAC,GACAC,EA3Ba,SAACU,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAArB,OAPjBR,KAAAS,IAAAN,EAAAG,GACAN,KAAAU,IAAAP,EAAAG,IASKN,KAAKS,IAAIL,EAAIG,GAAMP,KAAKU,IAAIN,EAAIG,KAPrCP,KAAAS,IAAAJ,EAAAG,GAAAR,KAAAU,IAAAL,EAAAG,IA+BIf,CAAeG,EAAAA,EAAWV,EAAIC,EAAIC,EAAlCI,GAGIH,KAAAA,IAAAA,EAAAK,GAAA,IAAAC,EAAA,IAAA,CACAL,GAAK,EACLC,MAIAlB,WACA0B,GAAA1B,GAAA,IAGI,MAAA,KAAA,SAAAY,GAAA0B,SAAA,IAAAC,OAAA,EAAA","file":"../../../scripts/viz/trackster/util.js","sourcesContent":["/**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\nfunction commatize(number) {\n    number += \"\"; // Convert to string\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(number)) {\n        number = number.replace(rgx, \"$1\" + \",\" + \"$2\");\n    }\n    return number;\n}\n\n/**\n * Helper to determine if object is jQuery deferred.\n */\nvar is_deferred = d => \"promise\" in d;\n\n/**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\nvar ServerStateDeferred = Backbone.Model.extend({\n    defaults: {\n        ajax_settings: {},\n        interval: 1000,\n        success_fn: function(result) {\n            return true;\n        }\n    },\n\n    /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n    go: function() {\n        var deferred = $.Deferred();\n        var self = this;\n        var ajax_settings = self.get(\"ajax_settings\");\n        var success_fn = self.get(\"success_fn\");\n        var interval = self.get(\"interval\");\n\n        var _go = () => {\n            $.ajax(ajax_settings).success(result => {\n                if (success_fn(result)) {\n                    // Result is good, so resolve.\n                    deferred.resolve(result);\n                } else {\n                    // Result not good, try again.\n                    setTimeout(_go, interval);\n                }\n            });\n        };\n\n        _go();\n        return deferred;\n    }\n});\n\n/**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\nvar get_random_color = colors => {\n    // Default for colors is white.\n    if (!colors) {\n        colors = \"#ffffff\";\n    }\n\n    // If needed, create list of colors.\n    if (typeof colors === \"string\") {\n        colors = [colors];\n    }\n\n    // Convert colors to numbers.\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = parseInt(colors[i].slice(1), 16);\n    }\n\n    // -- Perceived brightness and difference formulas are from\n    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n    // Compute perceived color brightness (based on RGB-YIQ transformation):\n    var brightness = (r, g, b) => (r * 299 + g * 587 + b * 114) / 1000;\n\n    // Compute color difference:\n    var difference = (r1, g1, b1, r2, g2, b2) =>\n        Math.max(r1, r2) -\n        Math.min(r1, r2) +\n        (Math.max(g1, g2) - Math.min(g1, g2)) +\n        (Math.max(b1, b2) - Math.min(b1, b2));\n\n    // Create new random color.\n    var new_color;\n\n    var nr;\n    var ng;\n    var nb;\n    var other_color;\n    var or;\n    var og;\n    var ob;\n    var n_brightness;\n    var o_brightness;\n    var diff;\n    var ok = false;\n    var num_tries = 0;\n    do {\n        // New color is never white b/c random in [0,1)\n        new_color = Math.round(Math.random() * 0xffffff);\n        nr = (new_color & 0xff0000) >> 16;\n        ng = (new_color & 0x00ff00) >> 8;\n        nb = new_color & 0x0000ff;\n        n_brightness = brightness(nr, ng, nb);\n        ok = true;\n        for (i = 0; i < colors.length; i++) {\n            other_color = colors[i];\n            or = (other_color & 0xff0000) >> 16;\n            og = (other_color & 0x00ff00) >> 8;\n            ob = other_color & 0x0000ff;\n            o_brightness = brightness(or, og, ob);\n            diff = difference(nr, ng, nb, or, og, ob);\n            // These thresholds may need to be adjusted. Brightness difference range is 125;\n            // color difference range is 500.\n            if (Math.abs(n_brightness - o_brightness) < 40 || diff < 200) {\n                ok = false;\n                break;\n            }\n        }\n\n        num_tries++;\n    } while (!ok && num_tries <= 10);\n\n    // Add 0x1000000 to left pad number with 0s.\n    return `#${(0x1000000 + new_color).toString(16).substr(1, 6)}`;\n};\n\nexport default {\n    commatize: commatize,\n    is_deferred: is_deferred,\n    ServerStateDeferred: ServerStateDeferred,\n    get_random_color: get_random_color\n};\n"]}