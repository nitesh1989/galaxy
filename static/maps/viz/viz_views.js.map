{"version":3,"sources":["viz/viz_views.js"],"names":["_","TrackHeaderView","Backbone","View","extend","className","initialize","this","model","config","get","on","update_name","render","$el","append","$","addClass","drag_handle_class","text","get_value","action_icons","render_action_icons","dblclick","e","stopPropagation","self","icons_div","hide","appendTo","each","icon_dict","add_action_icon","name","on_click_fn","prepend","set_display_modes","action_icons_def","attr","title","tooltip","click","new_modes","init_mode","display_modes","mode","mode_icon","track","mode_mapping","i","len","length","make_popupmenu"],"mappings":"qIAAYA,6JAIRC,EAAkBC,SAASC,KAAKC,QAChCC,UAAW,eAEXC,WAAY,WAERC,KAAKC,MAAMC,OAAOC,IAAI,QAAQC,GAAG,eAAgBJ,KAAKK,YAAaL,MACnEA,KAAKM,UAGTA,OAAQ,WACJN,KAAKO,IAAIC,OAAOC,EAAE,UAAUC,SAASV,KAAKC,MAAMU,oBAChDX,KAAKO,IAAIC,OACLC,EAAE,UACGC,SAAS,cACTE,KAAKZ,KAAKC,MAAMC,OAAOW,UAAU,UAI1Cb,KAAKc,gBACLd,KAAKe,sBAtBbf,KAAAO,IAAAS,SAAA,SAAAC,GA0BYA,EAAEC,oBAINlB,KAAKO,IAAIC,OAAOC,EAAE,gCAtBlBJ,YAAKJ,WACLD,KAAAO,IAAKD,KAAAA,eAALM,KAAAZ,KAAAC,MAAAC,OAAAW,UAAA,UAGJP,oBAAQ,WACJ,IAAAa,EAAKZ,KACLP,KAAAoB,UAASZ,EAAT,UA0BKE,SAAS,eApBdW,OACAC,SAAKR,KAAAA,KACLrB,EAAA8B,KAAAvB,KAAKe,MAAAA,iBAAL,SAAAS,GAsBIL,EAAKM,gBApBTD,EAAAE,KACAF,EAASR,MACLC,EAAEC,UADNM,EAAAG,YAwBQH,EAAUI,QApBlBJ,EAAAH,QAKArB,KAAA6B,kBAAc7B,KAAAC,MAAeW,gBAS7BnB,gBAAO,SAAWqC,EAAAA,EAAAA,EAAkBH,EAAAC,EAAaP,GAC7CF,IAAAA,EAAAA,KAQHnB,KATDc,aAAAY,GAAAjB,EAAA,QAqBKsB,KAAK,QAASC,GAVnBtB,SAAA,eACAA,SAAKmB,GApD8BI,UAiE9BC,MAAM,WAVfP,EAAAR,EAAAlB,SAaSqB,SAAStB,KAAKoB,WAVvBK,GACIzB,KAAImB,aAAJO,GAAAL,QAaHQ,kBAxEsC,SAAAM,EAAAC,GA8EnC,GAAKD,EAAL,CAECnC,KAAAC,MAAAoC,cAAAF,EAMDnC,KAAKC,MAAMqC,KAAOF,GAAapC,KAAKC,MAAMC,OAAOW,UAAU,SAAWb,KAAKC,MAAMoC,cAAc,GAE/FrC,KAAKc,aAAayB,UAAUR,KAAK,QAAjC,0BAAoE/B,KAAKsC,KAAzE,KAEA,IAAA,IAFAE,EAAK1B,KAAAA,MAMD2B,KAJJC,EAAA,EAAAC,EAAAH,EAAAH,cAAAO,OAAAF,EAAAC,EAAAD,IAAA,CACA,IAAIvB,EAAOqB,EAAXH,cAAAK,GAMID,EAAaH,GAAS,SAAAA,GAAA,OAAQ,WAJ9BE,EAAAA,YAAJF,IAI0B,CAAAA,GAGlBO,eAAA7C,KAAAc,aAAAyB,UAAAE,kBAIP/C,gBAAAA","file":"../../scripts/viz/viz_views.js","sourcesContent":["import * as _ from \"libs/underscore\";\n/**\n * View for track/group header.\n */\nvar TrackHeaderView = Backbone.View.extend({\n    className: \"track-header\",\n\n    initialize: function() {\n        // Watch and update name changes.\n        this.model.config.get(\"name\").on(\"change:value\", this.update_name, this);\n        this.render();\n    },\n\n    render: function() {\n        this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n        this.$el.append(\n            $(\"<div/>\")\n                .addClass(\"track-name\")\n                .text(this.model.config.get_value(\"name\"))\n        );\n\n        // Icons container.\n        this.action_icons = {};\n        this.render_action_icons();\n\n        // Suppress double clicks in header so that they do not impact viz under header.\n        this.$el.dblclick(e => {\n            e.stopPropagation();\n        });\n\n        // Needed for floating elts in header.\n        this.$el.append($(\"<div style='clear: both'/>\"));\n    },\n\n    update_name: function() {\n        this.$el.find(\".track-name\").text(this.model.config.get_value(\"name\"));\n    },\n\n    render_action_icons: function() {\n        var self = this;\n        this.icons_div = $(\"<div/>\")\n            .addClass(\"track-icons\")\n            .hide()\n            .appendTo(this.$el);\n        _.each(this.model.action_icons_def, icon_dict => {\n            self.add_action_icon(\n                icon_dict.name,\n                icon_dict.title,\n                icon_dict.css_class,\n                icon_dict.on_click_fn,\n                icon_dict.prepend,\n                icon_dict.hide\n            );\n        });\n\n        // Set up behavior for modes popup.\n        this.set_display_modes(this.model.display_modes);\n    },\n\n    /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n    add_action_icon: function(name, title, css_class, on_click_fn, prepend, hide) {\n        var self = this;\n        this.action_icons[name] = $(\"<a/>\")\n            .attr(\"title\", title)\n            .addClass(\"icon-button\")\n            .addClass(css_class)\n            .tooltip()\n            .click(() => {\n                on_click_fn(self.model);\n            })\n            .appendTo(this.icons_div);\n        if (hide) {\n            this.action_icons[name].hide();\n        }\n    },\n\n    /**\n     * Set track's modes and update mode icon popup.\n     */\n    set_display_modes: function(new_modes, init_mode) {\n        if (!new_modes) {\n            return;\n        }\n\n        // HACK: move this out of view and into track.\n\n        // Set modes, init mode.\n        this.model.display_modes = new_modes;\n        this.model.mode = init_mode || this.model.config.get_value(\"mode\") || this.model.display_modes[0];\n\n        this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: ${this.mode})`);\n\n        // Setup popup menu for changing modes.\n        var self = this;\n\n        var track = this.model;\n        var mode_mapping = {};\n        for (var i = 0, len = track.display_modes.length; i < len; i++) {\n            var mode = track.display_modes[i];\n            mode_mapping[mode] = (mode => () => {\n                track.change_mode(mode);\n                // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                // icons div for now.\n                //self.icons_div.show();\n                //track.container_div.mouseleave(function() { track.icons_div.hide(); } );\n            })(mode);\n        }\n\n        make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n    }\n});\n\nexport default {\n    TrackHeaderView: TrackHeaderView\n};\n"]}