{"version":3,"sources":["viz/circster.js"],"names":["_","d3","_utils2","default","cssLoadFile","SVGUtils","Backbone","Model","extend","is_visible","svg_elt","svg","eltBRect","getBoundingClientRect","svgBRect","$","right","left","bottom","top","UsesTicks","drawTicks","parent_elt","data","dataHandler","textTransform","horizontal","ticks","append","selectAll","enter","attr","d","Math","PI","radius","tick_coords","text_coords","text_anchor","angle","style","text","label","formatNum","num","sigDigits","rval","abs","toPrecision","roundedNum","round","toFixed","CircsterLabelTrack","CircsterView","View","className","initialize","options","this","genome","label_arc_height","scale","circular_views","chords_views","model","get","on","add_track","remove_track","update_track_bounds","vis_config","get_circular_tracks","filter","track","get_tracks_bounds","dataset_arc_height","get_value","track_gap","min_dimension","min","$el","width","height","radius_start","circular_tracks","length","tracks_start_radii","render","self","chords_tracks","get_chord_tracks","range","tracks_bounds","select","zoom","event","translate","zoom_drag_timeout","call","map","index","view","CircsterBigWigTrackView","radius_bounds","total_gap","el","CircsterChromInteractionsTrackView","outermost_radius","track_bounds","label_track_view","CircsterChromLabelTrackView","new_track","innermost_radius_bounds","new_track_bounds","new_view","track_view","i","each","track_index","update_radius_bounds","tracks","splice","remove","CircsterTrackView","tagName","bg_stroke","bg_fill","chroms_layout","loading_bg_fill","_chroms_layout","data_bounds","get_fill_color","color","track_parent_elt","genome_arcs","arc","innerRadius","outerRadius","chroms_paths","arc_gen","chroms_elts","chrom","data_ready_deferred","data_manager","data_is_ready","when","then","_render_data","render_labels","new_d","_transition_labels","transition","duration","update_scale","_transition_chrom_data","new_scale","old_scale","utils","can_get_more_detailed_data","data_deferred","path_elt","get_chrom_region","_update_data_bounds","chrom_region","get_more_detailed_data","chrom_arc","find","layout","chrom_arcs","chrom_data_paths","num_paths","p_data","get_genome_wide_data","genome_wide_data","reject","chrom_data","path_fn","_get_path_function","new_bounds","old_bounds","path","path_data","silent","get_data_bounds","layout_and_data","rendered_deferred","chrom_info","set_value","zip","_render_chrom_data","chroms_info","pie_layout","resolve","init_arcs","pie","value","len","sort","gap_per_chrom","endAngle","new_endAngle","startAngle","prototype","min_arc_len","chromArcTicks","_update_min_max","c","visibleChroms","k","v","track_config","CircsterQuantitativeTrackView","_quantile","numbers","ascending","quantile","datum","linear","domain","clamp","tick","click","ConfigSettingCollectionView","render_in_modal","radial","interpolate","area","line","_data_bounds_ticks_fn","classed","_config2","new_data","chord_data","values","flatten","source","target","target_angle","max","chrom_layout","get_chroms_info","chrom_angle_data","cur_chrom","chrom_chord_data","_get_region_angle","source_angle","concat","type","hidden","chord","vis","viz_view","icon_class","position","on_click","title","Circster","_visualization2","Genome","galaxy_config","app","GenomeVisualization","viz_config","body","key","ajax","url","id","dbkey","vis_json","Galaxy","tooltip_config","placement","_iconButton2","create_icon_buttons_menu","tooltip","select_datasets","add_tracks","collection","modal","show","root","dataType","JSON","stringify","success","vis_info","hide","set","vis_id","error","buttons","Cancel","window","location","menu","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/circster.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport visualization from \"viz/visualization\";\nimport mod_utils from \"utils/utils\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport \"libs/farbtastic\";\n/**\n * Utility class for working with SVG.\n */\n// load css\nmod_utils.cssLoadFile(\"static/style/circster.css\");\n\nvar SVGUtils = Backbone.Model.extend({\n    /**\n     * Returns true if element is visible.\n     */\n    is_visible: function(svg_elt, svg) {\n        var eltBRect = svg_elt.getBoundingClientRect();\n        var svgBRect = $(\"svg\")[0].getBoundingClientRect();\n\n        if (\n            // To the left of screen?\n            eltBRect.right < 0 ||\n            // To the right of screen?\n            eltBRect.left > svgBRect.right ||\n            // Above screen?\n            eltBRect.bottom < 0 ||\n            // Below screen?\n            eltBRect.top > svgBRect.bottom\n        ) {\n            return false;\n        }\n        return true;\n    }\n});\n\n/**\n * Mixin for using ticks.\n */\nvar UsesTicks = {\n    drawTicks: function(parent_elt, data, dataHandler, textTransform, horizontal) {\n        // Set up group elements for chroms and for each tick.\n        var ticks = parent_elt\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data(dataHandler)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"tick\")\n            .attr(\"transform\", d => `rotate(${d.angle * 180 / Math.PI - 90})translate(${d.radius},0)`);\n\n        // Add line + text for ticks.\n        var tick_coords = [];\n\n        var text_coords = [];\n\n        var text_anchor = d => (d.angle > Math.PI ? \"end\" : null);\n\n        if (horizontal) {\n            tick_coords = [0, 0, 0, -4];\n            text_coords = [4, 0, \"\", \".35em\"];\n            text_anchor = null;\n        } else {\n            tick_coords = [1, 0, 4, 0];\n            text_coords = [0, 4, \".35em\", \"\"];\n        }\n\n        ticks\n            .append(\"line\")\n            .attr(\"x1\", tick_coords[0])\n            .attr(\"y1\", tick_coords[1])\n            .attr(\"x2\", tick_coords[2])\n            .attr(\"y1\", tick_coords[3])\n            .style(\"stroke\", \"#000\");\n\n        return ticks\n            .append(\"text\")\n            .attr(\"x\", text_coords[0])\n            .attr(\"y\", text_coords[1])\n            .attr(\"dx\", text_coords[2])\n            .attr(\"dy\", text_coords[3])\n            .attr(\"text-anchor\", text_anchor)\n            .attr(\"transform\", textTransform)\n            .text(d => d.label);\n    },\n\n    /**\n     * Format number for display at a tick.\n     */\n    formatNum: function(num, sigDigits) {\n        // Use default of 2 sig. digits.\n        if (sigDigits === undefined) sigDigits = 2;\n\n        // Verify input number\n        if (num === null) return null;\n\n        // Calculate return value\n        var rval = null;\n        if (Math.abs(num) < 1) {\n            rval = num.toPrecision(sigDigits);\n        } else {\n            // Use round to turn string from toPrecision() back into a number.\n            var roundedNum = Math.round(num.toPrecision(sigDigits));\n\n            // Use abbreviations.\n            num = Math.abs(num);\n            if (num < 1000) {\n                rval = roundedNum;\n            } else if (num < 1000000) {\n                // Use K.\n                rval = `${Math.round((roundedNum / 1000).toPrecision(3)).toFixed(0)}K`;\n            } else if (num < 1000000000) {\n                // Use M.\n                rval = `${Math.round((roundedNum / 1000000).toPrecision(3)).toFixed(0)}M`;\n            }\n        }\n\n        return rval;\n    }\n};\n\n/**\n * A label track.\n */\nvar CircsterLabelTrack = Backbone.Model.extend({});\n\n/**\n * Renders a full circster visualization.\n */\nvar CircsterView = Backbone.View.extend({\n    className: \"circster\",\n\n    initialize: function(options) {\n        this.genome = options.genome;\n        this.label_arc_height = 50;\n        this.scale = 1;\n        this.circular_views = null;\n        this.chords_views = null;\n\n        // When tracks added to/removed from model, update view.\n        this.model.get(\"drawables\").on(\"add\", this.add_track, this);\n        this.model.get(\"drawables\").on(\"remove\", this.remove_track, this);\n\n        // When config settings change, update view.\n        var vis_config = this.model.get(\"config\");\n        vis_config.get(\"arc_dataset_height\").on(\"change:value\", this.update_track_bounds, this);\n        vis_config.get(\"track_gap\").on(\"change:value\", this.update_track_bounds, this);\n    },\n\n    // HACKs: using track_type for circular/chord distinction in the functions below for now.\n\n    /**\n     * Returns tracks to be rendered using circular view.\n     */\n    get_circular_tracks: function() {\n        return this.model.get(\"drawables\").filter(track => track.get(\"track_type\") !== \"DiagonalHeatmapTrack\");\n    },\n\n    /**\n     * Returns tracks to be rendered using chords view.\n     */\n    get_chord_tracks: function() {\n        return this.model.get(\"drawables\").filter(track => track.get(\"track_type\") === \"DiagonalHeatmapTrack\");\n    },\n\n    /**\n     * Returns a list of circular tracks' radius bounds.\n     */\n    get_tracks_bounds: function() {\n        var circular_tracks = this.get_circular_tracks();\n\n        var dataset_arc_height = this.model.get(\"config\").get_value(\"arc_dataset_height\");\n\n        var track_gap = this.model.get(\"config\").get_value(\"track_gap\");\n\n        var // Subtract 20 to make sure chrom labels are on screen.\n        min_dimension = Math.min(this.$el.width(), this.$el.height()) - 20;\n\n        var // Compute radius start based on model, will be centered\n        // and fit entirely inside element by default.\n        radius_start =\n            min_dimension / 2 -\n            circular_tracks.length * (dataset_arc_height + track_gap) +\n            // Add track_gap back in because no gap is needed for last track.\n            track_gap -\n            this.label_arc_height;\n\n        var // Compute range of track starting radii.\n        tracks_start_radii = d3.range(radius_start, min_dimension / 2, dataset_arc_height + track_gap);\n\n        // Map from track start to bounds.\n        var self = this;\n        return _.map(tracks_start_radii, radius => [radius, radius + dataset_arc_height]);\n    },\n\n    /**\n     * Renders circular tracks, chord tracks, and label tracks.\n     */\n    render: function() {\n        var self = this;\n        var width = self.$el.width();\n        var height = self.$el.height();\n        var circular_tracks = this.get_circular_tracks();\n        var chords_tracks = this.get_chord_tracks();\n        var total_gap = self.model.get(\"config\").get_value(\"total_gap\");\n        var tracks_bounds = this.get_tracks_bounds();\n\n        var // Set up SVG element.\n        svg = d3\n            .select(self.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"pointer-events\", \"all\")\n            // Set up zooming, dragging.\n            .append(\"svg:g\")\n            .call(\n                d3.behavior.zoom().on(\"zoom\", () => {\n                    // Do zoom, drag.\n                    var scale = d3.event.scale;\n                    svg.attr(\"transform\", `translate(${d3.event.translate}) scale(${scale})`);\n\n                    // Propagate scale changes to views.\n                    if (self.scale !== scale) {\n                        // Use timeout to wait for zooming/dragging to stop before rendering more detail.\n                        if (self.zoom_drag_timeout) {\n                            clearTimeout(self.zoom_drag_timeout);\n                        }\n                        self.zoom_drag_timeout = setTimeout(() => {\n                            // Render more detail in tracks' visible elements.\n                            // FIXME: do not do this right now; it is not fully implemented--e.g. data bounds\n                            // are not updated when new data is fetched--and fetching more detailed quantitative\n                            // data is not that useful.\n                            /*\n                        _.each(self.circular_views, function(view) {\n                            view.update_scale(scale);\n                        });\n                        */\n                        }, 400);\n                    }\n                })\n            )\n            .attr(\"transform\", `translate(${width / 2},${height / 2})`)\n            .append(\"svg:g\")\n            .attr(\"class\", \"tracks\");\n\n        // -- Render circular tracks. --\n\n        // Create a view for each track in the visualization and render.\n        this.circular_views = circular_tracks.map((track, index) => {\n            var view = new CircsterBigWigTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[index],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render chords tracks. --\n\n        this.chords_views = chords_tracks.map(track => {\n            var view = new CircsterChromInteractionsTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[0],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render label track. --\n\n        // Track bounds are:\n        // (a) outer radius of last circular track;\n        // (b)\n        var outermost_radius = this.circular_views[this.circular_views.length - 1].radius_bounds[1];\n\n        var track_bounds = [outermost_radius, outermost_radius + this.label_arc_height];\n\n        this.label_track_view = new CircsterChromLabelTrackView({\n            el: svg.append(\"g\")[0],\n            track: new CircsterLabelTrack(),\n            radius_bounds: track_bounds,\n            genome: self.genome,\n            total_gap: total_gap\n        });\n\n        this.label_track_view.render();\n    },\n\n    /**\n     * Render a single track on the outside of the current visualization.\n     */\n    add_track: function(new_track) {\n        var total_gap = this.model.get(\"config\").get_value(\"total_gap\");\n\n        if (new_track.get(\"track_type\") === \"DiagonalHeatmapTrack\") {\n            // Added chords track.\n            var innermost_radius_bounds = this.circular_views[0].radius_bounds;\n\n            var new_view = new CircsterChromInteractionsTrackView({\n                el: d3.select(\"g.tracks\").append(\"g\")[0],\n                track: new_track,\n                radius_bounds: innermost_radius_bounds,\n                genome: this.genome,\n                total_gap: total_gap\n            });\n\n            new_view.render();\n            this.chords_views.push(new_view);\n        } else {\n            // Added circular track.\n\n            // Recompute and update circular track bounds.\n            var new_track_bounds = this.get_tracks_bounds();\n            _.each(this.circular_views, (track_view, i) => {\n                track_view.update_radius_bounds(new_track_bounds[i]);\n            });\n\n            // Update chords tracks.\n            _.each(this.chords_views, track_view => {\n                track_view.update_radius_bounds(new_track_bounds[0]);\n            });\n\n            // Render new track.\n            var track_index = this.circular_views.length;\n\n            var track_view = new CircsterBigWigTrackView({\n                el: d3.select(\"g.tracks\").append(\"g\")[0],\n                track: new_track,\n                radius_bounds: new_track_bounds[track_index],\n                genome: this.genome,\n                total_gap: total_gap\n            });\n\n            track_view.render();\n            this.circular_views.push(track_view);\n\n            // Update label track.\n            /*\n            FIXME: should never have to update label track because vis always expands to fit area\n            within label track.\n            var track_bounds = new_track_bounds[ new_track_bounds.length-1 ];\n            track_bounds[1] = track_bounds[0];\n            this.label_track_view.update_radius_bounds(track_bounds);\n            */\n        }\n    },\n\n    /**\n     * Remove a track from the view.\n     */\n    remove_track: function(track, tracks, options) {\n        // -- Remove track from view. --\n        var track_view = this.circular_views[options.index];\n        this.circular_views.splice(options.index, 1);\n        track_view.$el.remove();\n\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, (track_view, i) => {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n    },\n\n    update_track_bounds: function() {\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, (track_view, i) => {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n\n        // Update chords tracks.\n        _.each(this.chords_views, track_view => {\n            track_view.update_radius_bounds(new_track_bounds[0]);\n        });\n    }\n});\n\n/**\n * Renders a track in a Circster visualization.\n */\nvar CircsterTrackView = Backbone.View.extend({\n    tagName: \"g\",\n\n    /* ----------------------- Public Methods ------------------------- */\n\n    initialize: function(options) {\n        this.bg_stroke = \"#ddd\";\n        // Fill color when loading data.\n        this.loading_bg_fill = \"#ffc\";\n        // Fill color when data has been loaded.\n        this.bg_fill = \"#ddd\";\n        this.total_gap = options.total_gap;\n        this.track = options.track;\n        this.radius_bounds = options.radius_bounds;\n        this.genome = options.genome;\n        this.chroms_layout = this._chroms_layout();\n        this.data_bounds = [];\n        this.scale = 1;\n        this.parent_elt = d3.select(this.$el[0]);\n    },\n\n    /**\n     * Get fill color from config.\n     */\n    get_fill_color: function() {\n        var color = this.track.get(\"config\").get_value(\"block_color\");\n        if (!color) {\n            color = this.track.get(\"config\").get_value(\"color\");\n        }\n        return color;\n    },\n\n    /**\n     * Render track's data by adding SVG elements to parent.\n     */\n    render: function() {\n        // -- Create track group element. --\n        var track_parent_elt = this.parent_elt;\n\n        // -- Render background arcs. --\n        var genome_arcs = this.chroms_layout;\n\n        var arc_gen = d3.svg\n            .arc()\n            .innerRadius(this.radius_bounds[0])\n            .outerRadius(this.radius_bounds[1]);\n\n        var // Attach data to group element.\n        chroms_elts = track_parent_elt\n            .selectAll(\"g\")\n            .data(genome_arcs)\n            .enter()\n            .append(\"svg:g\");\n\n        var // Draw chrom arcs/paths.\n        chroms_paths = chroms_elts\n            .append(\"path\")\n            .attr(\"d\", arc_gen)\n            .attr(\"class\", \"chrom-background\")\n            .style(\"stroke\", this.bg_stroke)\n            .style(\"fill\", this.loading_bg_fill);\n\n        // Append titles to paths.\n        chroms_paths.append(\"title\").text(d => d.data.chrom);\n\n        // -- Render track data and, when track data is rendered, apply preferences and update chrom_elts fill. --\n\n        var self = this;\n\n        var data_manager = self.track.get(\"data_manager\");\n\n        var // If track has a data manager, get deferred that resolves when data is ready.\n        data_ready_deferred = data_manager ? data_manager.data_is_ready() : true;\n\n        // When data is ready, render track.\n        $.when(data_ready_deferred).then(() => {\n            $.when(self._render_data(track_parent_elt)).then(() => {\n                chroms_paths.style(\"fill\", self.bg_fill);\n\n                // Render labels after data is available so that data attributes are available.\n                self.render_labels();\n            });\n        });\n    },\n\n    /**\n     * Render track labels.\n     */\n    render_labels: function() {},\n\n    /**\n     * Update radius bounds.\n     */\n    update_radius_bounds: function(radius_bounds) {\n        // Update bounds.\n        this.radius_bounds = radius_bounds;\n\n        // -- Update background arcs. --\n        var new_d = d3.svg\n            .arc()\n            .innerRadius(this.radius_bounds[0])\n            .outerRadius(this.radius_bounds[1]);\n\n        this.parent_elt\n            .selectAll(\"g>path.chrom-background\")\n            .transition()\n            .duration(1000)\n            .attr(\"d\", new_d);\n\n        this._transition_chrom_data();\n\n        this._transition_labels();\n    },\n\n    /**\n     * Update view scale. This fetches more data if scale is increased.\n     */\n    update_scale: function(new_scale) {\n        // -- Update scale and return if new scale is less than old scale. --\n\n        var old_scale = this.scale;\n        this.scale = new_scale;\n        if (new_scale <= old_scale) {\n            return;\n        }\n\n        // -- Scale increased, so render visible data with more detail. --\n\n        var self = this;\n\n        var utils = new SVGUtils();\n\n        // Select all chrom data and filter to operate on those that are visible.\n        this.parent_elt\n            .selectAll(\"path.chrom-data\")\n            .filter(function(d, i) {\n                return utils.is_visible(this);\n            })\n            .each(function(d, i) {\n                // -- Now operating on a single path element representing chromosome data. --\n\n                var path_elt = d3.select(this);\n\n                var chrom = path_elt.attr(\"chrom\");\n                var chrom_region = self.genome.get_chrom_region(chrom);\n                var data_manager = self.track.get(\"data_manager\");\n                var data_deferred;\n\n                // If can't get more detailed data, return.\n                if (!data_manager.can_get_more_detailed_data(chrom_region)) {\n                    return;\n                }\n\n                // -- Get more detailed data. --\n                data_deferred = self.track\n                    .get(\"data_manager\")\n                    .get_more_detailed_data(chrom_region, \"Coverage\", 0, new_scale);\n\n                // When more data is available, use new data to redraw path.\n                $.when(data_deferred).then(data => {\n                    // Remove current data path.\n                    path_elt.remove();\n\n                    // Update data bounds with new data.\n                    self._update_data_bounds();\n\n                    // Find chromosome arc to draw data on.\n                    var chrom_arc = _.find(self.chroms_layout, layout => layout.data.chrom === chrom);\n\n                    // Add new data path and apply preferences.\n                    var color = self.get_fill_color();\n                    self\n                        ._render_chrom_data(self.parent_elt, chrom_arc, data)\n                        .style(\"stroke\", color)\n                        .style(\"fill\", color);\n                });\n            });\n\n        return self;\n    },\n\n    /* ----------------------- Internal Methods ------------------------- */\n\n    /**\n     * Transitions chrom data to new values (e.g new radius or data bounds).\n     */\n    _transition_chrom_data: function() {\n        var track = this.track;\n        var chrom_arcs = this.chroms_layout;\n        var chrom_data_paths = this.parent_elt.selectAll(\"g>path.chrom-data\");\n        var num_paths = chrom_data_paths[0].length;\n\n        if (num_paths > 0) {\n            var self = this;\n            $.when(track.get(\"data_manager\").get_genome_wide_data(this.genome)).then(genome_wide_data => {\n                // Map chrom data to path data, filtering out null values.\n                var path_data = _.reject(\n                    _.map(genome_wide_data, (chrom_data, i) => {\n                        var rval = null;\n\n                        var path_fn = self._get_path_function(chrom_arcs[i], chrom_data);\n\n                        if (path_fn) {\n                            rval = path_fn(chrom_data.data);\n                        }\n                        return rval;\n                    }),\n                    p_data => p_data === null\n                );\n\n                // Transition each path for data and color.\n                var color = track.get(\"config\").get_value(\"color\");\n                chrom_data_paths.each(function(path, index) {\n                    d3\n                        .select(this)\n                        .transition()\n                        .duration(1000)\n                        .style(\"stroke\", color)\n                        .style(\"fill\", color)\n                        .attr(\"d\", path_data[index]);\n                });\n            });\n        }\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {},\n\n    /**\n     * Update data bounds. If there are new_bounds, use them; otherwise use\n     * default data bounds.\n     */\n    _update_data_bounds: function(new_bounds) {\n        var old_bounds = this.data_bounds;\n        this.data_bounds =\n            new_bounds || this.get_data_bounds(this.track.get(\"data_manager\").get_genome_wide_data(this.genome));\n        this._transition_chrom_data();\n    },\n\n    /**\n     * Render data as elements attached to svg.\n     */\n    _render_data: function(svg) {\n        var self = this;\n        var chrom_arcs = this.chroms_layout;\n        var track = this.track;\n        var rendered_deferred = $.Deferred();\n\n        // When genome-wide data is available, render data.\n        $.when(track.get(\"data_manager\").get_genome_wide_data(this.genome)).then(genome_wide_data => {\n            // Set bounds.\n            self.data_bounds = self.get_data_bounds(genome_wide_data);\n\n            // Set min, max value in config so that they can be adjusted. Make this silent\n            // because these attributes are watched for changes and the viz is updated\n            // accordingly (set up in initialize). Because we are setting up, we don't want\n            // the watch to trigger events here.\n            track.get(\"config\").set_value(\"min_value\", self.data_bounds[0], {\n                silent: true\n            });\n            track.get(\"config\").set_value(\"max_value\", self.data_bounds[1], {\n                silent: true\n            });\n\n            // Merge chroms layout with data.\n            var layout_and_data = _.zip(chrom_arcs, genome_wide_data);\n\n            // Render each chromosome's data.\n            _.each(layout_and_data, chrom_info => {\n                var chrom_arc = chrom_info[0];\n                var data = chrom_info[1];\n                return self._render_chrom_data(svg, chrom_arc, data);\n            });\n\n            // Apply prefs to all track data.\n            var color = self.get_fill_color();\n            self.parent_elt\n                .selectAll(\"path.chrom-data\")\n                .style(\"stroke\", color)\n                .style(\"fill\", color);\n\n            rendered_deferred.resolve(svg);\n        });\n\n        return rendered_deferred;\n    },\n\n    /**\n     * Render a chromosome data and attach elements to svg.\n     */\n    _render_chrom_data: function(svg, chrom_arc, data) {},\n\n    /**\n     * Returns data for creating a path for the given data using chrom_arc and data bounds.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {},\n\n    /**\n     * Returns arc layouts for genome's chromosomes/contigs. Arcs are arranged in a circle\n     * separated by gaps.\n     */\n    _chroms_layout: function() {\n        // Setup chroms layout using pie.\n        var chroms_info = this.genome.get_chroms_info();\n\n        var pie_layout = d3.layout\n            .pie()\n            .value(d => d.len)\n            .sort(null);\n\n        var init_arcs = pie_layout(chroms_info);\n        var gap_per_chrom = 2 * Math.PI * this.total_gap / chroms_info.length;\n\n        var chrom_arcs = _.map(init_arcs, (arc, index) => {\n            // For short chroms, endAngle === startAngle.\n            var new_endAngle = arc.endAngle - gap_per_chrom;\n            arc.endAngle = new_endAngle > arc.startAngle ? new_endAngle : arc.startAngle;\n            return arc;\n        });\n\n        return chrom_arcs;\n    }\n});\n\n/**\n * Render chromosome labels.\n */\nvar CircsterChromLabelTrackView = CircsterTrackView.extend({\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n        // Use a single arc for rendering data.\n        this.innerRadius = this.radius_bounds[0];\n        this.radius_bounds[0] = this.radius_bounds[1];\n        this.bg_stroke = \"#fff\";\n        this.bg_fill = \"#fff\";\n\n        // Minimum arc distance for labels to be applied.\n        this.min_arc_len = 0.05;\n    },\n\n    /**\n     * Render labels.\n     */\n    _render_data: function(svg) {\n        // -- Add chromosome label where it will fit; an alternative labeling mechanism\n        // would be nice for small chromosomes. --\n        var self = this;\n\n        var chrom_arcs = svg.selectAll(\"g\");\n\n        chrom_arcs.selectAll(\"path\").attr(\"id\", d => `label-${d.data.chrom}`);\n\n        chrom_arcs\n            .append(\"svg:text\")\n            .filter(d => d.endAngle - d.startAngle > self.min_arc_len)\n            .attr(\"text-anchor\", \"middle\")\n            .append(\"svg:textPath\")\n            .attr(\"class\", \"chrom-label\")\n            .attr(\"xlink:href\", d => `#label-${d.data.chrom}`)\n            .attr(\"startOffset\", \"25%\")\n            .text(d => d.data.chrom);\n\n        // -- Add ticks to denote chromosome length. --\n\n        /** Returns an array of tick angles and labels, given a chrom arc. */\n        var chromArcTicks = d => {\n            var k = (d.endAngle - d.startAngle) / d.value;\n\n            var ticks = d3.range(0, d.value, 25000000).map((v, i) => ({\n                radius: self.innerRadius,\n                angle: v * k + d.startAngle,\n                label: i === 0 ? 0 : i % 3 ? null : self.formatNum(v)\n            }));\n\n            // If there are fewer that 4 ticks, label last tick so that at least one non-zero tick is labeled.\n            if (ticks.length < 4) {\n                ticks[ticks.length - 1].label = self.formatNum(\n                    Math.round((ticks[ticks.length - 1].angle - d.startAngle) / k)\n                );\n            }\n\n            return ticks;\n        };\n\n        /** Rotate and move text as needed. */\n        var textTransform = d => (d.angle > Math.PI ? \"rotate(180)translate(-16)\" : null);\n\n        // Filter chroms for only those large enough for display.\n        var visibleChroms = _.filter(this.chroms_layout, c => c.endAngle - c.startAngle > self.min_arc_len);\n\n        this.drawTicks(this.parent_elt, visibleChroms, chromArcTicks, textTransform);\n    }\n});\n_.extend(CircsterChromLabelTrackView.prototype, UsesTicks);\n\n/**\n * View for quantitative track in Circster.\n */\nvar CircsterQuantitativeTrackView = CircsterTrackView.extend({\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n\n        // When config settings change, update view.\n        var track_config = this.track.get(\"config\");\n        track_config.get(\"min_value\").on(\"change:value\", this._update_min_max, this);\n        track_config.get(\"max_value\").on(\"change:value\", this._update_min_max, this);\n        track_config.get(\"color\").on(\"change:value\", this._transition_chrom_data, this);\n    },\n\n    /**\n     * Update track when min and/or max are changed.\n     */\n    _update_min_max: function() {\n        var track_config = this.track.get(\"config\");\n\n        var new_bounds = [track_config.get_value(\"min_value\"), track_config.get_value(\"max_value\")];\n\n        this._update_data_bounds(new_bounds);\n\n        // FIXME: this works to update tick/text bounds, but there's probably a better way to do this\n        // by updating the data itself.\n        this.parent_elt.selectAll(\".min_max\").text((d, i) => new_bounds[i]);\n    },\n\n    /**\n     * Returns quantile for an array of numbers.\n     */\n    _quantile: function(numbers, quantile) {\n        numbers.sort(d3.ascending);\n        return d3.quantile(numbers, quantile);\n    },\n\n    /**\n     * Renders quantitative data with the form [x, value] and assumes data is equally spaced across\n     * chromosome. Attachs a dict with track and chrom name information to DOM element.\n     */\n    _render_chrom_data: function(svg, chrom_arc, chrom_data) {\n        var path_data = this._get_path_function(chrom_arc, chrom_data);\n\n        if (!path_data) {\n            return null;\n        }\n\n        // There is path data, so render as path.\n        var parent = svg.datum(chrom_data.data);\n\n        var path = parent\n            .append(\"path\")\n            .attr(\"class\", \"chrom-data\")\n            .attr(\"chrom\", chrom_arc.data.chrom)\n            .attr(\"d\", path_data);\n\n        return path;\n    },\n\n    /**\n     * Returns function for creating a path across the chrom arc.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {\n        // If no chrom data, return null.\n        if (typeof chrom_data === \"string\" || !chrom_data.data || chrom_data.data.length === 0) {\n            return null;\n        }\n\n        // Radius scaler.\n        var radius = d3.scale\n            .linear()\n            .domain(this.data_bounds)\n            .range(this.radius_bounds)\n            .clamp(true);\n\n        // Scaler for placing data points across arc.\n        var angle = d3.scale\n            .linear()\n            .domain([0, chrom_data.data.length])\n            .range([chrom_arc.startAngle, chrom_arc.endAngle]);\n\n        // Use line generator to create area.\n        var line = d3.svg.line\n            .radial()\n            .interpolate(\"linear\")\n            .radius(d => radius(d[1]))\n            .angle((d, i) => angle(i));\n\n        return d3.svg.area\n            .radial()\n            .interpolate(line.interpolate())\n            .innerRadius(radius(0))\n            .outerRadius(line.radius())\n            .angle(line.angle());\n    },\n\n    /**\n     * Render track min, max using ticks.\n     */\n    render_labels: function() {\n        var self = this;\n\n        var // Keep counter of visible chroms.\n        textTransform = () => \"rotate(90)\";\n\n        // FIXME:\n        // (1) using min_max class below is needed for _update_min_max, which could be improved.\n        // (2) showing config on tick click should be replaced by proper track config icon.\n\n        // Draw min, max on first chrom only.\n        var ticks = this.drawTicks(\n            this.parent_elt,\n            [this.chroms_layout[0]],\n            this._data_bounds_ticks_fn(),\n            textTransform,\n            true\n        ).classed(\"min_max\", true);\n\n        // Show config when ticks are clicked on.\n        _.each(ticks, tick => {\n            $(tick).click(() => {\n                var view = new config.ConfigSettingCollectionView({\n                    collection: self.track.get(\"config\")\n                });\n                view.render_in_modal(\"Configure Track\");\n            });\n        });\n\n        /*\n        // Filter for visible chroms, then for every third chrom so that labels attached to only every\n        // third chrom.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; });\n        this.drawTicks(this.parent_elt, labeledChroms, this._data_bounds_ticks_fn(), textTransform, true);\n        */\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {\n        // FIXME: (a) pull out function for getting labeled chroms? and (b) function used in transition below\n        // is copied from UseTicks mixin, so pull out and make generally available.\n\n        // If there are no data bounds, nothing to transition.\n        if (this.data_bounds.length === 0) {\n            return;\n        }\n\n        // Transition labels to new radius bounds.\n        var self = this;\n\n        var visibleChroms = _.filter(this.chroms_layout, c => c.endAngle - c.startAngle > 0.08);\n\n        var labeledChroms = _.filter(visibleChroms, (c, i) => i % 3 === 0);\n\n        var new_data = _.flatten(_.map(labeledChroms, c => self._data_bounds_ticks_fn()(c)));\n\n        this.parent_elt\n            .selectAll(\"g.tick\")\n            .data(new_data)\n            .transition()\n            .attr(\"transform\", d => `rotate(${d.angle * 180 / Math.PI - 90})translate(${d.radius},0)`);\n    },\n\n    /**\n     * Get function for locating data bounds ticks.\n     */\n    _data_bounds_ticks_fn: function() {\n        // Closure vars.\n        var self = this;\n        visibleChroms = 0;\n\n        // Return function for locating ticks based on chrom arc data.\n        return (\n            d // Set up data to display min, max ticks.\n        ) => [\n            {\n                radius: self.radius_bounds[0],\n                angle: d.startAngle,\n                label: self.formatNum(self.data_bounds[0])\n            },\n            {\n                radius: self.radius_bounds[1],\n                angle: d.startAngle,\n                label: self.formatNum(self.data_bounds[1])\n            }\n        ];\n    },\n\n    /**\n     * Returns an array with two values denoting the minimum and maximum\n     * values for the track.\n     */\n    get_data_bounds: function(data) {}\n});\n_.extend(CircsterQuantitativeTrackView.prototype, UsesTicks);\n\n/**\n * Bigwig track view in Circster.\n */\nvar CircsterBigWigTrackView = CircsterQuantitativeTrackView.extend({\n    get_data_bounds: function(data) {\n        // Set max across dataset by extracting all values, flattening them into a\n        // single array, and getting third quartile.\n        var values = _.flatten(\n            _.map(data, d => {\n                if (d) {\n                    // Each data point has the form [position, value], so return all values.\n                    return _.map(\n                        d.data,\n                        (\n                            p // Null is used for a lack of data; resolve null to 0 for comparison.\n                        ) => parseInt(p[1], 10) || 0\n                    );\n                } else {\n                    return 0;\n                }\n            })\n        );\n\n        // For max, use 98% quantile in attempt to avoid very large values. However, this max may be 0\n        // for sparsely populated data, so use max in that case.\n        return [_.min(values), this._quantile(values, 0.98) || _.max(values)];\n    }\n});\n\n/**\n * Chromosome interactions track view in Circster.\n */\nvar CircsterChromInteractionsTrackView = CircsterTrackView.extend({\n    render: function() {\n        var self = this;\n\n        // When data is ready, render track.\n        $.when(self.track.get(\"data_manager\").data_is_ready()).then(() => {\n            // When data has been fetched, render track.\n            $.when(self.track.get(\"data_manager\").get_genome_wide_data(self.genome)).then(genome_wide_data => {\n                var chord_data = [];\n                var chroms_info = self.genome.get_chroms_info();\n                // Convert chromosome data into chord data.\n                _.each(genome_wide_data, (chrom_data, index) => {\n                    // Map each interaction into chord data.\n                    var cur_chrom = chroms_info[index].chrom;\n                    var chrom_chord_data = _.map(chrom_data.data, datum => {\n                        // Each datum is an interaction/chord.\n                        var source_angle = self._get_region_angle(cur_chrom, datum[1]);\n\n                        var target_angle = self._get_region_angle(datum[3], datum[4]);\n\n                        return {\n                            source: {\n                                startAngle: source_angle,\n                                endAngle: source_angle + 0.01\n                            },\n                            target: {\n                                startAngle: target_angle,\n                                endAngle: target_angle + 0.01\n                            }\n                        };\n                    });\n\n                    chord_data = chord_data.concat(chrom_chord_data);\n                });\n\n                self.parent_elt\n                    .append(\"g\")\n                    .attr(\"class\", \"chord\")\n                    .selectAll(\"path\")\n                    .data(chord_data)\n                    .enter()\n                    .append(\"path\")\n                    .style(\"fill\", self.get_fill_color())\n                    .attr(\"d\", d3.svg.chord().radius(self.radius_bounds[0]))\n                    .style(\"opacity\", 1);\n            });\n        });\n    },\n\n    update_radius_bounds: function(radius_bounds) {\n        this.radius_bounds = radius_bounds;\n        this.parent_elt\n            .selectAll(\"path\")\n            .transition()\n            .attr(\"d\", d3.svg.chord().radius(this.radius_bounds[0]));\n    },\n\n    /**\n     * Returns radians for a genomic position.\n     */\n    _get_region_angle: function(chrom, position) {\n        // Find chrom angle data\n        var chrom_angle_data = _.find(this.chroms_layout, chrom_layout => chrom_layout.data.chrom === chrom);\n\n        // Return angle at position.\n        return (\n            chrom_angle_data.endAngle -\n            (chrom_angle_data.endAngle - chrom_angle_data.startAngle) *\n                (chrom_angle_data.data.len - position) /\n                chrom_angle_data.data.len\n        );\n    }\n});\n\n// circster app loader\nvar Circster = Backbone.View.extend({\n    initialize: function() {\n        // -- Configure visualization --\n        var genome = new visualization.Genome(galaxy_config.app.genome);\n\n        var vis = new visualization.GenomeVisualization(galaxy_config.app.viz_config);\n\n        // Add Circster-specific config options.\n        vis.get(\"config\").add([\n            {\n                key: \"arc_dataset_height\",\n                label: \"Arc Dataset Height\",\n                type: \"int\",\n                value: 25,\n                view: \"circster\"\n            },\n            {\n                key: \"track_gap\",\n                label: \"Gap Between Tracks\",\n                type: \"int\",\n                value: 5,\n                view: \"circster\"\n            },\n            {\n                key: \"total_gap\",\n                label: \"Gap [0-1]\",\n                type: \"float\",\n                value: 0.4,\n                view: \"circster\",\n                hidden: true\n            }\n        ]);\n\n        var viz_view = new CircsterView({\n            // view pane\n            el: $(\"#center .unified-panel-body\"),\n            genome: genome,\n            model: vis\n        });\n\n        // Render vizualization\n        viz_view.render();\n\n        // setup title\n        $(\"#center .unified-panel-header-inner\").append(\n            `${galaxy_config.app.viz_config.title} ${galaxy_config.app.viz_config.dbkey}`\n        );\n\n        // setup menu\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: \"Add tracks\",\n                    on_click: function() {\n                        visualization.select_datasets({ dbkey: vis.get(\"dbkey\") }, tracks => {\n                            vis.add_tracks(tracks);\n                        });\n                    }\n                },\n                {\n                    icon_class: \"gear\",\n                    title: \"Settings\",\n                    on_click: function() {\n                        var view = new config.ConfigSettingCollectionView({\n                            collection: vis.get(\"config\")\n                        });\n                        view.render_in_modal(\"Configure Visualization\");\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: \"Save\",\n                    on_click: function() {\n                        // show saving dialog box\n                        Galaxy.modal.show({\n                            title: \"Saving...\",\n                            body: \"progress\"\n                        });\n\n                        // send to server\n                        $.ajax({\n                            url: `${Galaxy.root}visualization/save`,\n                            type: \"POST\",\n                            dataType: \"json\",\n                            data: {\n                                id: vis.get(\"vis_id\"),\n                                title: vis.get(\"title\"),\n                                dbkey: vis.get(\"dbkey\"),\n                                type: \"trackster\",\n                                vis_json: JSON.stringify(vis)\n                            }\n                        })\n                            .success(vis_info => {\n                                Galaxy.modal.hide();\n                                vis.set(\"vis_id\", vis_info.vis_id);\n                            })\n                            .error(() => {\n                                // show dialog\n                                Galaxy.modal.show({\n                                    title: \"Could Not Save\",\n                                    body: \"Could not save visualization. Please try again later.\",\n                                    buttons: {\n                                        Cancel: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            });\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location = `${Galaxy.root}visualizations/list`;\n                    }\n                }\n            ],\n            { tooltip_config: { placement: \"bottom\" } }\n        );\n\n        // add menu\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#center .unified-panel-header-inner\").append(menu.$el);\n\n        // manual tooltip config because default gravity is S and cannot be changed\n        $(\".menu-button\").tooltip({ placement: \"bottom\" });\n    }\n});\n\n// Module exports.\nexport default {\n    GalaxyApp: Circster\n};\n"]}